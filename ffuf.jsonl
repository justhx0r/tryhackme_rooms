{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/9363a97ad4a8e96737dcb08e524c5c19.png', 'title': 'ffuf', 'description': 'Enumeration, fuzzing, and directory brute forcing using ffuf', 'code': 'ffuf', 'users': 9492, 'tags': ['security', 'ffuf', 'enumeration', 'fuzzing', 'web', 'bruteforce'], 'type': 'walkthrough', 'difficulty': 'easy', 'userCompleted': False, 'upVotes': 652, 'created': '2021-05-01T18:12:52.511Z', 'published': '2021-07-13T19:00:00.215Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://i.imgur.com/Ln8tSMc.png', 'creator': 'noraj', 'tasks': [{'taskTitle': '<span class="badge badge-soft-info size-16">Info</span> Introduction', 'taskDesc': '<p><span style="font-size:24px">Summary</span><b><br /></b></p><p><b>ffuf</b> stands for <b>Fuzz Faster U Fool</b>. It\'s a tool used for web enumeration, fuzzing, and directory brute forcing.</p><p><span style="font-size:24px">Install ffuf<br /></span></p><p><span style="font-size:16px">ffuf</span><span style="font-size:16px">\ufeff</span><span style="font-size:24px"><span style="font-size:16px"> is already included in the following Linux distributions:</span></span></p><ul><li>BlackArch</li><li>Pentoo</li><li>Kali</li><li>Parrot</li><li>Search <a href="https://repology.org/project/ffuf/versions" target="_blank">Repology</a> for other distributions</li></ul><p><i>Note: <span>Repology is a service </span></i><i><span><span style="font-style:italic">that</span> monitors a lot of package repositories and other sources and aggregates data on software package versions, reporting new releases and packaging problems.</span></i></p><p>If it\'s not included in your Linux distribution you can deploy it manually following <a href="https://github.com/ffuf/ffuf#installation" target="_blank">the  installation instructions</a>.</p><p><span style="font-size:24px">Install SecLists</span></p><p>SecLists is a collection of multiple types of lists used during security assessments. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more.<br /></p><p>SecLists <span style="font-size:24px"><span style="font-size:16px">is already included in the following Linux distributions:</span></span></p><ul><li>BlackArch</li><li>Pentoo</li><li>Kali</li><li>Parrot</li><li>Search <a href="https://repology.org/project/seclists/versions" target="_blank">Repology</a> for other distributions</li></ul><p>If it\'s not included in your Linux distribution you can deploy it manually following <a href="https://github.com/danielmiessler/SecLists#install" target="_blank">the  installation instructions</a>.</p>', 'taskType': 'none', 'taskNo': 1, 'taskCreated': '2021-05-01T18:13:58.833Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'I have ffuf installed<br />', 'hint': ''}, {'questionNo': 2, 'question': '<p>I have SecLists installed</p>', 'hint': ''}]}, {'taskTitle': '<span class="badge size-16" style="background-color:rgba(252,190,108,.18);color:#fcbe6c">Walkthrough</span> Basics', 'taskDesc': '<p>The Help page can be displayed using <code>ffuf -h</code> and it will be useful as we will use a lot of options.<br /></p><p><code>Fuzz Faster U Fool - v1.3.0-dev<br /><br />HTTP OPTIONS:<br />\xa0 -H\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Header `"Name: Value"`, separated by colon. Multiple -H flags are accepted.<br />\xa0 -X\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HTTP method to use<br />\xa0 -b\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Cookie data `"NAME1=VALUE1; NAME2=VALUE2"` for copy as curl functionality.<br />\xa0 -d\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 POST data<br />\xa0 -ignore-body\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Do not fetch the response content. (default: false)<br />\xa0 -r\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Follow redirects (default: false)<br />\xa0 -recursion\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Scan recursively. Only FUZZ keyword is supported, and URL (-u) has to end in it. (default: false)<br />\xa0 -recursion-depth\xa0\xa0\xa0 Maximum recursion depth. (default: 0)<br />\xa0 -recursion-strategy Recursion strategy: "default" for a redirect based, and "greedy" to recurse on all matches (default: default)<br />\xa0 -replay-proxy\xa0\xa0\xa0\xa0\xa0\xa0 Replay matched requests using this proxy.<br />\xa0 -timeout\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HTTP request timeout in seconds. (default: 10)<br />\xa0 -u\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Target URL<br />\xa0 -x\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Proxy URL (SOCKS5 or HTTP). For example: http://127.0.0.1:8080 or socks5://127.0.0.1:8080<br /><br />GENERAL OPTIONS:<br />\xa0 -V\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Show version information. (default: false)<br />\xa0 -ac\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Automatically calibrate filtering options (default: false)<br />\xa0 -acc\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Custom auto-calibration string. Can be used multiple times. Implies -ac<br />\xa0 -c\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Colorize output. (default: false)<br />\xa0 -config\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Load configuration from a file<br />\xa0 -maxtime\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Maximum running time in seconds for entire process. (default: 0)<br />\xa0 -maxtime-job\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Maximum running time in seconds per job. (default: 0)<br />\xa0 -p\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Seconds of `delay` between requests, or a range of random delay. For example "0.1" or "0.1-2.0"<br />\xa0 -rate\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Rate of requests per second (default: 0)<br />\xa0 -s\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Do not print additional information (silent mode) (default: false)<br />\xa0 -sa\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Stop on all error cases. Implies -sf and -se. (default: false)<br />\xa0 -se\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Stop on spurious errors (default: false)<br />\xa0 -sf\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Stop when &gt; 95% of responses return 403 Forbidden (default: false)<br />\xa0 -t\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Number of concurrent threads. (default: 40)<br />\xa0 -v\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Verbose output, printing full URL and redirect location (if any) with the results. (default: false)<br /><br />MATCHER OPTIONS:<br />\xa0 -mc\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Match HTTP status codes, or "all" for everything. (default: 200,204,301,302,307,401,403,405)<br />\xa0 -ml\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Match amount of lines in response<br />\xa0 -mr\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Match regexp<br />\xa0 -ms\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Match HTTP response size<br />\xa0 -mw\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Match amount of words in response<br /><br />FILTER OPTIONS:<br />\xa0 -fc\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Filter HTTP status codes from response. Comma separated list of codes and ranges<br />\xa0 -fl\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Filter by amount of lines in response. Comma separated list of line counts and ranges<br />\xa0 -fr\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Filter regexp<br />\xa0 -fs\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Filter HTTP response size. Comma separated list of sizes and ranges<br />\xa0 -fw\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Filter by amount of words in response. Comma separated list of word counts and ranges<br /><br />INPUT OPTIONS:<br />\xa0 -D\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 DirSearch wordlist compatibility mode. Used in conjunction with -e flag. (default: false)<br />\xa0 -e\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Comma separated list of extensions. Extends FUZZ keyword.<br />\xa0 -ic\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Ignore wordlist comments (default: false)<br />\xa0 -input-cmd\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Command producing the input. --input-num is required when using this input method. Overrides -w.<br />\xa0 -input-num\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Number of inputs to test. Used in conjunction with --input-cmd. (default: 100)<br />\xa0 -input-shell\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Shell to be used for running command<br />\xa0 -mode\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Multi-wordlist operation mode. Available modes: clusterbomb, pitchfork (default: clusterbomb)<br />\xa0 -request\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 File containing the raw http request<br />\xa0 -request-proto\xa0\xa0\xa0\xa0\xa0 Protocol to use along with raw request (default: https)<br />\xa0 -w\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Wordlist file path and (optional) keyword separated by colon. eg. \'/path/to/wordlist:KEYWORD\'<br /><br />OUTPUT OPTIONS:<br />\xa0 -debug-log\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Write all of the internal logging to the specified file.<br />\xa0 -o\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Write output to file<br />\xa0 -od\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Directory path to store matched results to.<br />\xa0 -of\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Output file format. Available formats: json, ejson, html, md, csv, ecsv (or, \'all\' for all formats) (default: json)<br />\xa0 -or\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Don\'t create the output file if we don\'t have results (default: false)<br /></code><br /></p><p><span style="background-color:rgb(255, 0, 0)">Deploy the machine.</span></p><p>At a minimum we\'re required to supply two options: <code>-u</code> to specify an URL and <code>-w</code> to specify a wordlist. The default keyword <code>FUZZ</code> is used to tell ffuf where the wordlist entries will be injected. <span>We can append it to the end of the URL like so:</span></p><p style="line-height:1"><span style="font-size:10px">Command for Q1</span><br /></p><p><code>ffuf -u http://MACHINE_IP/FUZZ -w /usr/share/seclists/Discovery/Web-Content/big.txt</code></p><p>You could also use any custom keyword instead of <code>FUZZ</code>, <span>you just need to define it like this</span> <code>wordlist.txt:KEYWORD</code>.<br /></p><p><code>ffuf -u http://MACHINE_IP/NORAJ -w /usr/share/seclists/Discovery/Web-Content/big.txt:NORAJ</code></p>', 'taskType': 'THM', 'taskNo': 2, 'taskCreated': '2021-05-01T18:43:45.378Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '5bb54008edcfe42732f1d360', 'questions': [{'questionNo': 1, 'question': 'What is the first file you found with a 200 status code?<br />', 'hint': ''}]}, {'taskTitle': '<span class="badge size-16" style="background-color:rgba(252,190,108,.18);color:#fcbe6c">Walkthrough</span> Finding pages and directories', 'taskDesc': '<p><span>One approach you could take would be to start enumerating with a generic list of files such as raft-medium-files-lowercase.txt.</span></p><p style="line-height:1"><span style="font-size:10px">Command for Q1</span><br /></p><p><code>ffuf -u http://MACHINE_IP/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt</code></p><p><span>However, using a large generic wordlist containing irrelevant file extensions is not very efficient.</span></p><p>Instead, we can <span>usually </span>assume <code>index.&lt;extension&gt;</code> is the default page on most websites so we can try <span>common</span> extensions <span>for just the index page.</span> <span>With this method, we can usually determine what programming language or languages the site uses.</span></p><p><span>For example, we can append the extension after index.</span></p><p><code>head /usr/share/seclists/Discovery/Web-Content/web-extensions.txt\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0<br />.asp<br />.aspx<br />.bat<br />.c<br />.cfm<br />.cgi<br />.css<br />.com<br />.dll<br />.exe</code><span style="font-family:monospace"><br /></span></p><p style="line-height:1"><span style="font-size:10px">Command for Q2</span></p><p><code>ffuf -u http://MACHINE_IP/indexFUZZ -w /usr/share/seclists/Discovery/Web-Content/web-extensions.txt</code></p><p>Now that we know the extensions supported we can try a list of generic words (without of extension) and apply the extensions we know works (found from Q2) + some common ones like <code>.txt</code>.</p><p>We\'ll exclude the 4 letter extensions from this wordlist as it will result in many false positives.</p><p style="line-height:1"><span style="font-size:10px">Command for Q3</span></p><p><code>ffuf -u http://MACHINE_IP/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words-lowercase.txt -e .php,.txt</code><br /></p><p><span>Directory names are not always dependent on the type of environment you\'re enumerating and is often a good starting point before attempting to fuzz for files. </span>If we wanted to fuzz directories we only need to provide a wordlist.</p><p><span style="font-size:10px">Command for Q4</span></p><p><code>ffuf -u http://MACHINE_IP/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt</code><br /></p>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2021-05-01T18:25:08.683Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<span>What text file did you find?</span>', 'hint': ''}, {'questionNo': 2, 'question': '<p><span>What two file extensions were found for the index page?</span></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p><span>What page has a size of 4840?</span></p>', 'hint': ''}, {'questionNo': 4, 'question': '<p><span>How many directories are there?</span></p>', 'hint': ''}]}, {'taskTitle': '<span class="badge size-16" style="background-color:rgba(252,190,108,.18);color:#fcbe6c">Walkthrough</span> Using filters', 'taskDesc': '<p></p><p></p><p>Remember the command we ran for Q1 of Task 3?</p><p><code>$ ffuf -u http://MACHINE_IP/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt<br /><br />\xa0\xa0\xa0\xa0\xa0\xa0\xa0 /\'___\\\xa0 /\'___\\\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 /\'___\\<br />\xa0\xa0\xa0\xa0\xa0\xa0 /\\ \\__/ /\\ \\__/\xa0 __\xa0 __\xa0 /\\ \\__/<br />\xa0\xa0\xa0\xa0\xa0\xa0 \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\<br />\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/<br />\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \\ \\_\\\xa0\xa0 \\ \\_\\\xa0 \\ \\____/\xa0 \\ \\_\\<br />\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \\/_/\xa0\xa0\xa0 \\/_/\xa0\xa0 \\/___/\xa0\xa0\xa0 \\/_/<br /><br />\xa0\xa0\xa0\xa0\xa0\xa0 v1.3.1-dev<br />________________________________________________<br /><br />\xa0:: Method\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 : GET<br />\xa0:: URL\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 : http://10.10.130.176/FUZZ<br />\xa0:: Wordlist\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 : FUZZ: /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt<br />\xa0:: Follow redirects : false<br />\xa0:: Calibration\xa0\xa0\xa0\xa0\xa0 : false<br />\xa0:: Timeout\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 : 10<br />\xa0:: Threads\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 : 40<br />\xa0:: Matcher\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 : Response status: 200,204,301,302,307,401,403,405<br />________________________________________________<br /><br />favicon.ico\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 200, Size: 1406, Words: 5, Lines: 2]<br />.htaccess\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 403, Size: 289, Words: 21, Lines: 11]<br />logout.php\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 302, Size: 0, Words: 1, Lines: 1]<br />robots.txt\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 200, Size: 26, Words: 3, Lines: 2]<br />phpinfo.php\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 302, Size: 0, Words: 1, Lines: 1]<br />.\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 302, Size: 0, Words: 1, Lines: 1]<br />php.ini\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 200, Size: 148, Words: 17, Lines: 5]<br />about.php\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 200, Size: 4840, Words: 331, Lines: 109]<br />.html\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 403, Size: 285, Words: 21, Lines: 11]<br />login.php\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 200, Size: 1523, Words: 89, Lines: 77]<br />.php\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 403, Size: 284, Words: 21, Lines: 11]<br />setup.php\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 200, Size: 4067, Words: 308, Lines: 123]<br />.htpasswd\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 403, Size: 289, Words: 21, Lines: 11]<br />security.php\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 302, Size: 0, Words: 1, Lines: 1]<br />.htm\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 403, Size: 284, Words: 21, Lines: 11]<br />.htpasswds\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 403, Size: 290, Words: 21, Lines: 11]<br />index.php\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 302, Size: 0, Words: 1, Lines: 1]<br />.htgroup\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 403, Size: 288, Words: 21, Lines: 11]<br />wp-forum.phps\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 403, Size: 293, Words: 21, Lines: 11]<br />.htaccess.bak\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 403, Size: 293, Words: 21, Lines: 11]<br />.htuser\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 403, Size: 287, Words: 21, Lines: 11]<br />.ht\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 403, Size: 283, Words: 21, Lines: 11]<br />.htc\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 403, Size: 284, Words: 21, Lines: 11]<br />:: Progress: [16243/16243] :: Job [1/1] :: 1690 req/sec :: Duration: [0:00:13] :: Errors: 0 ::</code><br /><br />We had a lot of output but not much was useful.<br />For example, a 403 <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes" target="_blank">HTTP status code</a> <span>indicates that we\'re forbidden to access the requested resource. Let\'s hide responses with 403 status codes for now. We can accomplish this by using filters.</span></p><p style="line-height:1">By adding <code>-fc 403</code> (filter code) we\'ll hide from the output all 403 <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes" target="_blank">HTTP status codes</a>.<br /><br /><span style="font-size:10px">Command for Q1</span></p><p><code>ffuf -u http://MACHINE_IP/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -fc 403</code><br /><br /></p><p>Sometimes you might want to filter out multiple status codes such as 500, 302, 301, 401, etc. For instance, if you know you want to see 200 status code responses, you could use <code>-mc 200</code> (match code) instead of having a long list of filtered codes.</p>\n<p style="line-height:1"><span style="font-size:10px">Command for Q2</span><br /></p><p><code>ffuf -u http://MACHINE_IP/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -mc 200</code><br /></p><p><span>Sometimes it might be beneficial to see what requests the server doesn\'t handle by matching for HTTP 500 Internal Server Error response codes (</span><span><code>-mc 500</code>). Finding irregularities in behavior could help better understand how the web app works.</span><br /><br /><span>There are other filters and matchers. For example, you could encounter entries with a 200 status code with a response size of zero.</span> eg. <code>functions.php</code> or <code>inc/myfile.php</code>.<br /></p><p><code>$ ffuf -u http://MACHINE_IP/config/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -fc 403<br />...<br />.\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 200, Size: 1165, Words: 76, Lines: 18]<br />config.inc.php\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 [Status: 200, Size: 0, Words: 1, Lines: 1]<br />:: Progress: [16243/16243] :: Job [1/1] :: 1732 req/sec :: Duration: [0:00:13] :: Errors: 0 ::</code><br /></p><p>Unless we have a LFI (local file inclusion) this kind of files aren\'t interesting, so we can use <code>-fs 0</code> (filter size).</p><p>Here are all filters and matchers:<br /></p><p><code>$ ffuf -h<br />...<br />MATCHER OPTIONS:<br />\xa0 -mc\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Match HTTP status codes, or "all" for everything. (default: 200,204,301,302,307,401,403,405)<br />\xa0 -ml\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Match amount of lines in response<br />\xa0 -mr\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Match regexp<br />\xa0 -ms\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Match HTTP response size<br />\xa0 -mw\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Match amount of words in response<br /><br />FILTER OPTIONS:<br />\xa0 -fc\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Filter HTTP status codes from response. Comma separated list of codes and ranges<br />\xa0 -fl\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Filter by amount of lines in response. Comma separated list of line counts and ranges<br />\xa0 -fr\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Filter regexp<br />\xa0 -fs\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Filter HTTP response size. Comma separated list of sizes and ranges<br />\xa0 -fw\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Filter by amount of words in response. Comma separated list of word counts and ranges<br />...<br /></code></p>We often see there are false positives with files beginning with a dot (eg. <code>.htgroups</code>,<code> .php</code>, etc.). They throw a 403 Forbidden error, however those files don\'t actually exist.\xa0It\'s tempting to use <code>-fc 403</code> but this could hide valuable files we don\'t have access to yet. <span>So instead we can use a regexp to match all files beginning with a dot.</span><p></p><p style="line-height:1"><span style="font-size:10px">Command for Q3</span></p><p><code>ffuf -u http://MACHINE_IP/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -fr \'/\\..*\'</code></p><p></p>', 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2021-05-04T19:30:49.766Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'After applying the fc filter, how many results were returned?', 'hint': ''}, {'questionNo': 2, 'question': '<p>After applying the mc filter, how many results were returned?</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>Which valuable file would have been hidden if you used <code>-fc 403</code> instead of <code>-fr?</code></p>', 'hint': ''}]}, {'taskTitle': '<span class="badge size-16" style="background-color:rgba(252,190,108,.18);color:#fcbe6c">Walkthrough</span> Fuzzing parameters', 'taskDesc': '<p style="line-height:1"><span style="background-color:rgb(255, 0, 0);--darkreader-inline-bgcolor:#931513">Deploy the new machine.</span></p><p><span style="background-color:rgba(4, 4, 5, 0.07);color:rgb(220, 221, 222);font-family:Whitney, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;white-space:break-spaces;font-size:1rem;--darkreader-inline-bgcolor:rgba(16, 16, 15, 0.07);--darkreader-inline-color:#ada79d">For this task, we\'ll be looking at parameter fuzzing. This is the base URL we\'ll be fuzzing: </span>http://MACHINE_IP/sqli-labs/Less-1/.<br /></p><p>What would you do when you find a page or API endpoint but don\'t know which parameters are accepted? You fuzz!</p><p>Discovering a vulnerable parameter could lead to file inclusion, path disclosure, XSS, SQL injection, or even command injection. Since ffuf allows you to put the keyword anywhere we can use it to fuzz for parameters.</p><p style="line-height:1"><span style="font-size:10px">Command for Q1</span></p><p><code>$ ffuf -u \'http://MACHINE_IP/sqli-labs/Less-1/?FUZZ=1\' -c -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -fw 39<br />$ ffuf -u \'http://MACHINE_IP/sqli-labs/Less-1/?FUZZ=1\' -c -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words-lowercase.txt -fw 39<br /></code></p><p><span>Now that we found a parameter accepting integer values we\'ll start fuzzing  values.</span></p><p>At this point, we could generate a wordlist and save a file containing integers. To cut out a step we can use <code>-w -</code> <span>which tells ffuf to read a wordlist from <a href="https://www.gnu.org/software/libc/manual/html_node/Standard-Streams.html" target="_blank">stdout</a>.\xa0</span>This will allow us to generate a list of integers with a command of our choice then pipe the output to ffuf.<span> Below is a list of 5 different ways to generate numbers 0 - 255.</span></p><p><span style="font-size:10px">Commands for Q2</span></p><p><code>$ ruby -e \'(0..255).each{|i| puts i}\' | ffuf -u \'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ\' -c -w - -fw 33<br />$ ruby -e \'puts (0..255).to_a\' | ffuf -u \'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ\' -c -w - -fw 33<br />$ for i in {0..255}; do echo $i; done | ffuf -u \'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ\' -c -w - -fw 33<br />$ seq 0 255 | ffuf -u \'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ\' -c -w - -fw 33<br />$ cook \'[0-255]\' | ffuf -u \'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ\' -c -w - -fw 33</code><br /><br /><span>We can also use ffuf for wordlist-based brute-force attacks, for example, trying passwords on an authentication page.</span></p><p style="line-height:1"><span style="font-size:10px">Command for Q3</span><br /><br /><code>\ufeff$ ffuf -u http://MACHINE_IP/sqli-labs/Less-11/ -c -w /usr/share/seclists/Passwords/Leaked-Databases/hak5.txt -X POST -d \'uname=Dummy&amp;passwd=FUZZ&amp;submit=Submit\' -fs 1435 -H \'Content-Type: application/x-www-form-urlencoded\' </code><span></span></p><p><span>Here we have to use the POST method (specified with </span><code>-X</code><span>) and to give the POST data (with </span><code>-d</code><span>) where we include the </span><code>FUZZ</code><span> keyword in place of the password.</span></p><p><span>We also have to specify a custom header </span><code>-H \'Content-Type: application/x-www-form-urlencoded\'</code><span> </span><span><span>because ffuf doesn\'t set this content-type header automatically as curl does.</span></span></p>', 'taskType': 'THM', 'taskNo': 5, 'taskCreated': '2021-05-01T18:30:20.440Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '5c43c816ea5ebc64ac133aae', 'questions': [{'questionNo': 1, 'question': 'What is the parameter you found?<br />', 'hint': ''}, {'questionNo': 2, 'question': '<p>What is the highest valid id?<br /></p>', 'hint': ''}, {'questionNo': 3, 'question': "<p><span>What is Dummy's password?</span></p>", 'hint': ''}]}, {'taskTitle': '<span class="badge size-16" style="background-color:rgba(252,190,108,.18);color:#fcbe6c">Walkthrough</span> Finding vhosts and subdomains', 'taskDesc': '<p><span>ffuf may not be as efficient as specialized tools when it comes to </span><span>subdomain enumeration but it\'s possible to do.</span></p><p><code>$ ffuf -u http://FUZZ.mydomain.com -c -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt</code></p><p><span>Some subdomains might not be resolvable by the DNS server you\'re using and are only resolvable from within the target\'s local network by their private DNS servers. So some virtual hosts (vhosts) may exist with private subdomains so the previous command doesn\'t find them. To try finding private subdomains we\'ll have to use the Host HTTP header as these requests might be accepted by the web server.</span><br /><b>Note</b>: <a href="https://httpd.apache.org/docs/2.4/en/vhosts/examples.html" target="_blank">virtual hosts</a> (vhosts) is the name used by Apache httpd but for Nginx the right term is <a href="https://www.nginx.com/resources/wiki/start/topics/examples/server_blocks/" target="_blank">Server Blocks</a>.<br /></p><p>You could compare the results obtained with direct subdomain enumeration and with vhost enumeration:</p><p><code>$ ffuf -u http://FUZZ.mydomain.com -c -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -fs 0<br />$ ffuf -u http://mydomain.com -c -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -H \'Host: FUZZ.mydomain.com\' -fs 0</code><br /></p><p>For example, it is possible that you can\'t find a sub-domain with direct subdomain enumeration (1st command) but that you can find it with vhost enumeration (2nd command).</p>Vhost enumeration  technique shouldn\'t be discounted as it may lead to discovering content that wasn\'t meant to be accessed externally.<br />', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2021-05-01T18:58:14.850Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'I read the task material<br />', 'hint': ''}]}, {'taskTitle': '<span class="badge size-16" style="background-color:rgba(252,190,108,.18);color:#fcbe6c">Walkthrough</span> Proxifying ffuf traffic', 'taskDesc': '<p>Whether it\' for <a href="https://blog.raw.pm/en/state-of-the-art-of-network-pivoting-in-2019/" target="_blank">network pivoting</a> or for using BurpSuite plugins you can send all the ffuf traffic through a web proxy (HTTP or SOCKS5).<br /></p><p><code>$ ffuf -u http://MACHINE_IP/ -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -x http://127.0.0.1:8080</code></p><p>It\'s also possible to send only matches to your proxy for replaying:</p><p><code>$ ffuf -u http://MACHINE_IP/ -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -replay-proxy http://127.0.0.1:8080</code></p><p>This may be useful if you don\'t need all the traffic to traverse an upstream proxy and want to minimize resource usage or to avoid polluting your proxy history.</p>', 'taskType': 'none', 'taskNo': 7, 'taskCreated': '2021-05-01T18:59:27.077Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'I understand how to make the traffic go through a proxy.<br />', 'hint': ''}]}, {'taskTitle': '<span class="badge size-16" style="background-color:rgba(201,207,255,.18);color:#c9cfff">Questions</span> Reviewing the options', 'taskDesc': '<p>As you start to use ffuf more, some options will prove to be very useful depending on your situation.\xa0For example, <code>-ic</code> allows you to ignore comments in wordlists that such as headers, copyright notes, comments, etc</p><p></p><p><code>$ head /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0<br /># directory-list-2.3-medium.txt<br />#<br /># Copyright 2007 James Fisher<br />#<br /># This work is licensed under the Creative Commons<br /># Attribution-Share Alike 3.0 License. To view a copy of this<br /># license, visit http://creativecommons.org/licenses/by-sa/3.0/<br /># or send a letter to Creative Commons, 171 Second Street,<br /># Suite 300, San Francisco, California, 94105, USA.<br />#</code><br /><br /><code>$ ffuf -u http://MACHINE_IP/FUZZ -c -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -ic -fs 0</code><br /><br /><span>We\'ve only reviewed a small subset of the useful features and options ffuf has to offer for fuzzing.</span><br /><span><span>Use </span><span style="font-family:SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:85%;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(87, 90, 89, 0.15);--darkreader-inline-color:#b15752"><span>ffuf -h</span></span><span> to discover the other options that might be useful for you and to answer the remaining questions in this task.</span></span></p><p></p>', 'taskType': 'none', 'taskNo': 8, 'taskCreated': '2021-05-14T14:07:18.392Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<span>How do you save the output to a markdown file (ffuf.md)?</span>', 'hint': 'format first'}, {'questionNo': 2, 'question': '<p><span>How do you re-use a raw http request file?</span></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p><span>How do you strip comments from a wordlist?</span></p>', 'hint': ''}, {'questionNo': 4, 'question': '<p><span>How would you read a wordlist from STDIN?</span></p>', 'hint': ''}, {'questionNo': 5, 'question': '<p>How do you print full URLs and redirect locations?</p>', 'hint': ''}, {'questionNo': 6, 'question': '<p><span>What option would you use to follow redirects?</span></p>', 'hint': ''}, {'questionNo': 7, 'question': '<p><span>How do you enable colorized output?</span></p>', 'hint': ''}]}, {'taskTitle': '<span class="badge badge-soft-info size-16">Info</span> About the author', 'taskDesc': '<p>I hoped you enjoyed the room.<br />To find out more about me (<b><span style="background-color:transparent">noraj</span></b>) check out <a href="https://pwn.by/noraj" target="_blank">pwn.by/noraj</a>.<br />You can find my other THM rooms on <a href="https://tryhackme.com/p/noraj" target="_blank">my THM profile</a>.</p>\n<a href="https://pwn.by/noraj" target="_blank"><img src="https://tryhackme-badges.s3.amazonaws.com/noraj.png" alt="TryHackMe" /></a>', 'taskType': 'none', 'taskNo': 9, 'taskCreated': '2021-05-23T09:34:06.942Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Thank you<br />', 'hint': ''}]}]}