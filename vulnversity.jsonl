{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/85dee7ce633f5668b104d329da2769c3.png', 'title': 'Vulnversity', 'description': 'Learn about active recon, web app attacks and privilege escalation.', 'code': 'vulnversity', 'users': 254391, 'tags': ['recon', 'privesc', 'webappsec', 'video'], 'type': 'walkthrough', 'difficulty': 'easy', 'userCompleted': False, 'upVotes': 7508, 'created': '2019-08-01T16:43:14.858Z', 'published': '2020-03-21T11:50:16.527Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://i.imgur.com/JFYfwL8.png', 'creator': 'tryhackme', 'tasks': [{'taskTitle': 'Deploy the machine', 'taskDesc': '<p>Connect to our network and deploy this machine.\xa0If you need help getting connected, complete the <a href="https://tryhackme.com/room/openvpn" target="_blank">OpenVPN room</a> first.</p>', 'taskType': 'vm', 'taskNo': 1, 'taskCreated': '2019-08-01T17:02:09.503Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '5d4310ab2007b6126fa2c9f7', 'questions': [{'questionNo': 1, 'question': '<p>Deploy the machine.</p>', 'hint': ''}]}, {'taskTitle': 'Reconnaissance ', 'taskDesc': '<p>Gather information about this machine using a network scanning tool called <code>Nmap</code>. Check out the <a href="https://tryhackme.com/room/furthernmap" target="_blank">Nmap</a> room for more on this!<br /></p><p>Need a Linux machine with Nmap on? Deploy your own <a href="https://tryhackme.com/my-machine" target="_blank">AttackBox</a> and control it with your browser.</p>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2019-08-01T17:19:30.170Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Scan the box: <b>nmap -sV MACHINE_IP</b></p><p><b></b></p><div style="text-align:center"><b><img src="https://i.imgur.com/gZqOO8D.png" style="font-size:1rem;font-weight:400;width:134.5px;height:134.5px" /></b></div><p></p><p>Nmap is a free, open-source and powerful tool used to discover hosts and services on a computer network. In our example, we use Nmap to scan this machine to identify all services running on a particular port. Nmap has many capabilities; a table summarises some of its functionality below.</p><table class="table table-bordered"><tbody><tr><td><b>Nmap flag</b></td><td><b>Description</b></td></tr><tr><td>-sV</td><td>Attempts to determine the version of the services running</td></tr><tr><td>-p &lt;x&gt; or -p-</td><td>Port scan for port &lt;x&gt; or scan all ports</td></tr><tr><td>-Pn</td><td>Disable host discovery and scan for open ports</td></tr><tr><td>-A</td><td>Enables OS and version detection, executes in-build scripts for further enumeration\xa0</td></tr><tr><td>-sC</td><td>Scan with the default Nmap scripts</td></tr><tr><td>-v</td><td>Verbose mode</td></tr><tr><td>-sU</td><td>UDP port scan</td></tr><tr><td>-sS</td><td>TCP SYN port scan</td></tr></tbody></table><p>There are many Nmap "cheatsheets" online that you can use too.</p>', 'hint': ''}, {'questionNo': 2, 'question': '<p>Scan the box; how many ports are open?</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What version of the squid proxy is running on the machine?</p>', 'hint': ''}, {'questionNo': 4, 'question': '<p>How many ports will Nmap scan if the flag <b>-p-400 </b>was used?</p>', 'hint': ''}, {'questionNo': 5, 'question': '<p>What is the most likely operating system this machine is running?</p>', 'hint': 'Run nmap with the -O flag'}, {'questionNo': 6, 'question': '<p>What port is the web server running on?</p>', 'hint': ''}, {'questionNo': 7, 'question': "<p>It's essential to ensure you are always doing your reconnaissance thoroughly before progressing. Knowing all open services (which can all be points of exploitation) is very important, don't forget that ports on a higher range might be open, so constantly scan ports after 1000 (even if you leave checking in the background).<br /></p>", 'hint': ''}, {'questionNo': 8, 'question': '<p>What is the flag for enabling verbose mode using Nmap?<br /></p>', 'hint': ''}]}, {'taskTitle': 'Locating directories using Gobuster', 'taskDesc': '<p>Using a fast directory discovery tool called <code>Gobuster</code>, you will locate a directory to which you can use to upload a shell.<br /></p>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2019-08-01T17:25:17.629Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Let\'s first start by scanning the website to find any hidden directories. To do this, we\'re going to use Gobuster.</p><p style="text-align:center"><img src="https://i.imgur.com/gODlTeh.png" style="width:125.203px;height:134.063px" /></p><p>Gobuster is a tool used to brute-force URIs (directories and files), DNS subdomains, and virtual host names. For this machine, we will focus on using it to brute-force directories.</p><p>Download Gobuster <a href="https://github.com/OJ/gobuster">here</a>, or if you\'re on Kali Linux run <span style="font-weight:bold;color:rgb(8, 82, 148)">sudo apt-get install gobuster</span></p><p>To get started, you will need a wordlist for Gobuster (which will be used to quickly go through the wordlist to identify if a public directory is available. If you are using <a href="https://tryhackme.com/room/kali">Kali Linux</a>,\xa0you can find many wordlists under <b>/usr/share/wordlists</b>. You can also use the wordlist for directories located at\xa0<b>/usr/share/wordlists/dirbuster/directory-list-1.0.txt</b> in the AttackBox.</p><p>Now let\'s run Gobuster with a wordlist using <b>gobuster dir -u http://MACHINE_IP:3333 -w &lt;word list location&gt;</b><br /></p><table class="table table-bordered"><tbody><tr><td><b>Gobuster flag</b></td><td><b>Description</b></td></tr><tr><td>-e</td><td>Print the full URLs in your console</td></tr><tr><td>-u</td><td>The target URL</td></tr><tr><td>-w</td><td>Path to your wordlist</td></tr><tr><td>-U and -P</td><td>Username and Password for Basic Auth</td></tr><tr><td>-p <b>&lt;x&gt;</b></td><td>Proxy to use for requests</td></tr><tr><td>-c &lt;http cookies&gt;</td><td>Specify a cookie for simulating your auth</td></tr></tbody></table>', 'hint': ''}, {'questionNo': 2, 'question': '<p>What is the directory that has an upload form page?</p>', 'hint': ''}]}, {'taskTitle': 'Compromise the Webserver', 'taskDesc': '<p>Now that you have found a form to upload files, we can leverage this to upload and execute our payload, which will lead to compromising the web server.</p>', 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2019-08-02T20:30:40.695Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "What common file type you'd want to upload to exploit the server is blocked? Try a couple to find out.", 'hint': ''}, {'questionNo': 2, 'question': '<p>We will fuzz the upload form to identify which extensions are not blocked.</p><p>To do this, we\'re going to use BurpSuite. If you need clarification on what BurpSuite is or how to set it up, please complete our <a href="https://tryhackme.com/module/learn-burp-suite" target="_blank">BurpSuite module</a> first.</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p><span style="font-size:1rem">We\'re going to use Intruder (used for automating </span>customised<span style="font-size:1rem">\xa0attacks).</span></p><p>To begin, make a wordlist with the following extensions:</p><ul><li>.php</li><li>.php3</li><li>.php4</li><li>.php5</li><li>.phtml</li></ul><p><img src="https://i.imgur.com/ED153Nx.png" style="font-size:1rem;width:227px;height:103.976px" /></p><p><span style="font-size:1rem">Now make sure BurpSuite is configured to intercept all your browser traffic. Upload a file; once this request is captured, send it to the Intruder. Click on "Payloads" and select the "Sniper" attack type.</span></p><p><span style="font-size:1rem">Click the "Positions" tab now, find the filename and "Add\xa0</span>ยง" to the extension. It should look like so:</p><p><img src="https://i.imgur.com/6dxnzq6.png" style="width:392px;height:267.485px" /></p><p>Run this attack, what extension is allowed?</p>', 'hint': ''}, {'questionNo': 4, 'question': '<p>Now that we know what extension we can use for our payload, we can progress.</p><p>We are going to use a PHP reverse shell as our payload. A reverse shell works by being called on the remote host and forcing this host to make a connection to you. So you\'ll listen for incoming connections, upload and execute your shell, which will beacon out to you to control!</p><p>Download the following reverse PHP shell <a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">here</a>.</p><p>To gain remote access to this machine, follow these steps:<br /></p><ol><li>Edit the php-reverse-shell.php file and edit the ip to be your tun0 ip (you can get this by going to <a href="http://10.10.10.10">http://10.10.10.10</a> in the browser of your TryHackMe connected device).<br /><br /></li><li>Rename this file to php-reverse-shell.phtml<br /><br /></li><li>We\'re now going to listen to incoming connections using netcat. Run the following command: <b>nc -lvnp 1234<br /><br /></b></li><li>Upload your shell and navigate to <b>http://MACHINE_IP:3333/internal/uploads/php-reverse-shell.phtml\xa0</b>- This will execute your payload<br /><br /></li><li>You should see a connection on your Netcat session</li></ol><p><img src="https://i.imgur.com/FGcvTCp.png" style="width:543px;height:133.866px" /></p>', 'hint': ''}, {'questionNo': 5, 'question': '<p>What is the name of the user who manages the webserver?</p>', 'hint': ''}, {'questionNo': 6, 'question': '<p>What is the user flag?</p>', 'hint': 'The contents of the file /home/bill/user.txt'}]}, {'taskTitle': 'Privilege Escalation', 'taskDesc': '<p>Now that you have compromised this machine, we will escalate our privileges and become the superuser (root).<br /></p>', 'taskType': 'none', 'taskNo': 5, 'taskCreated': '2019-08-01T17:26:02.234Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>In Linux, SUID (<b>set owner userId upon execution</b>) is a particular type of file permission given to a file. SUID gives temporary permissions to a user to run the program/file with the permission of the file owner (rather than the user who runs it).<br /></p><p>For example, the binary file to change your password has the SUID bit set on it (/usr/bin/passwd). This is because to change your password; it will need to write to the shadowers file that you do not have access to, root does; so it has root privileges to make the right changes.</p><p><img src="https://i.imgur.com/ZhaNR2p.jpg" style="width:215.275px;height:140.109px" /></p><p>On the system, search for all SUID files. Which file<span style="font-size:1rem">\xa0stands out?</span></p>', 'hint': 'Use the command: find / -user root -perm -4000 -exec ls -ldb {} \\;'}, {'questionNo': 2, 'question': "<p>It's challenge time! We have guided you through this far. Can you exploit this system further to escalate your privileges and get the final answer?</p><p>Become root and get the last flag (/root/root.txt)</p>", 'hint': '/bin/systemctl'}]}]}