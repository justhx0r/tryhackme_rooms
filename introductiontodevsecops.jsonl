{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/00050c31a2b84443dcc58d4513939515.png', 'title': 'Introduction to DevSecOps', 'description': 'Learn about the story of DevSecOps, Software Development Models & Shifting Left.', 'code': 'introductiontodevsecops', 'users': 11085, 'tags': ['DevOps', ' DevSecOps', ' Agile', ' Software Development Lifecycle', ' SDLC'], 'type': 'walkthrough', 'difficulty': 'medium', 'userCompleted': False, 'upVotes': 500, 'created': '2022-02-17T22:41:37.854Z', 'published': '2022-05-24T16:06:31.847Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://assets.tryhackme.com/room-banners/introductiontodevsecops.jpg', 'creator': 'tryhackme', 'tasks': [{'taskTitle': 'Introduction ', 'taskDesc': '<div><span style="font-size:24px"><b>Introduction</b><br /></span><br /></div><div>In this lab, you will get introduced to the different styles of Software Development and their evolution throughout the years. It\'s essential to understand how things have improved over the years and their impact on the security industry.\xa0 </div><div><br /></div><div><b><span style="font-size:24px">Learning Objectives</span></b></div><div><b><br /></b></div><ul><li>The history behind software development practices and how they\'ve evolved over the years<br /></li><li>The importance of this field and the concepts of what makes DevSecOps</li><li>DevSecOps culture and as a discipline<br /><br /></li></ul><p><span style="font-size:24px">DevSecOps Learning Path</span></p><p>\ufeffThis is the first room in a new DevSecOps learning path being developed. The new path will cover:</p><ul><li>Introduction to DevSecOps (Secure SDLC, Environments, and Tools)</li><li>Security of the Pipeline (Pipeline Automation, Source Code Security, Automated Code Testing, Dependency Management, CI/CD, and Environment Security)</li><li>Security in the Pipeline (Attacking the Pipeline, Exploiting Vulnerabilities in the Pipeline, Defending the Pipeline)</li><li>Infrastructure as Code (Cloud DevOps, Secret Management, Exploiting Terraform, Exploiting Vagrant, Exploiting Docker)</li></ul>', 'taskType': 'none', 'taskNo': 1, 'taskCreated': '2022-02-26T21:17:09.504Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "I'm ready to start!<br />", 'hint': ''}]}, {'taskTitle': 'DevOps: A New Hope ', 'taskDesc': '<p>Since its inception, Developer Operations (DevOps) has become a significant influence in modern Software Development, Deployment and Operations. But where did the term come from?<br /></p><hr /><p><b><span style="font-size:24px">The story of DevOps</span></b></p><p>A long time ago, there were waterfalls in a galaxy far, far away.</p><p><b><span style="font-size:24px">Waterfall Model</span></b><br /></p><p> This is the name given to how project management was approached back in the day (the 70s). The cycle constituted and relied on a<i> hierarchy, </i>where every member had a specific responsibility. For example, System admins worked tirelessly to keep everything running smoothly and afloat. Developers build and add as many features as possible, and finally, Quality Assurance (QA) engineers test the system\'s functionality, ensuring everything works as expected.\xa0 </p><p><img alt="Diagram for Waterfall Software Development Model stages" style="width:454.333px;float:left;height:454.074px" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61a7523c029d1c004fac97b3/room-content/21ff900651b19689600a2a7d0cd2fcea.png" class="note-float-left" /><br /></p><p>If anything troubles the servers or something needs deployment, sysadmins will jump on it. If it\'s a code problem, devs will put out the fire. If there is anything to do with testing functionality and feedback, Quality Assurance teams will take care of it. But what if there is a flaw? A bug? Who fixes it? These situations led to many blame games and passing the baton around that created friction, things would get backlogged, and the symbiosis between teams would end up not working anymore. As the number of customer expectations grew, features and new releases increased. Responsibilities and tasks would end up being an accumulative, giant mess. Bugs and security flaws were backlogged, plenty of these unresolved, and more releases scheduled, which would be not scalable and messy. Excessive noise and pressure led to distrust, communication gaps, and friction between teams. </p><p>This popular problem-solving strategy and system became a root cause of ineffectiveness in flexibility and communication across teams. </p><p><b><span style="font-size:24px"><br /></span></b></p><p><b><span style="font-size:24px"><br /></span></b></p><p><b><span style="font-size:24px">Agile Model<br /></span></b></p><p>With the challenges teams were facing with waterfall, businesses started developing ways that allowed more flexibility and adaptability. Somewhere in early 2000,\xa0\xa0<b>The Agile Methodology </b>was coined. Soon, a manifesto was released:\xa0<a href="http://agilemanifesto.org/" target="_blank">Agile Manifesto</a>, emphasising four values for agile development:</p><p><img alt="Diagram for Agile Software Development Model stages" style="width:50%;float:left" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61a7523c029d1c004fac97b3/room-content/db09323bd5eed6fb32de796bdb20196f.png" class="note-float-left" /><br /></p><ul><li>\xa0Individuals and interactions over processes and tools </li><li>\xa0Working software over comprehensive documentation</li><li>\xa0Customer collaboration over contract negotiation</li><li>\xa0Responding to change vs following a plan</li></ul><p>Companies now value team collaboration and rely on self-organising teams, focusing on clients and plenty of room for change and flexibility.</p><p>But something was still missing.<br /></p><p><b><span style="font-size:24px"><br /></span></b></p><p><b><span style="font-size:24px"><br /></span></b></p><p align="center"><b><span style="font-size:24px">DevOps: A New Hope</span></b></p><p align="center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61a7523c029d1c004fac97b3/room-content/c31ab1829b8c9ef8850f90e38a4224f6.png" style="width:383.5px;height:549.098px" /><b><span style="font-size:24px"><br /></span></b></p><p><b><br /></b></p><p>In 2008, a conversation between Andrew Clay and Patrick Debois led to something quite revolutionary. While discussing the drawbacks of Agile, DevOps was born. After an event in Belgium the following year called "DevOpsDays," DevOps became the next buzzword, and its popularity increased. </p><p>DevOps is quite different from the previous methodologies because it focuses on driving "cultural change" to increase efficiency. It does this by uniting the magic of all teams working on a project, using integration and automation. With these ingredients, you get a cross-integration across all departments, QA+sysadmins+developers. For example, ensuring developers can now be involved in deployment and sysadmins can now write scripts, QA can figure out how to fix flaws vs constantly testing for functionality. By introducing automation and integration of systems, these engineers can now have the same visibility at all times and interact accordingly. We will dive more into how DevOps does this in the latter rooms as we talk about pipelines, automation, Continuous Integration and Continuous Delivery (CI/CD).</p><p><span style="font-size:24px">Why is DevOps important?</span></p><p><span style="font-size:16px">DevOps builds a philosophy that emphasises building trust and better liaising between \ndevelopers and other teams (sysadmins, QA, etc.). This helps the organisation align technological projects to business requirements, increasing the impact and value to the business as projects become more efficient and prioritised accordingly. Changes rolled\n out are usually small and reversible, visible to all teams involved. This ensures better contribution and communication that helps with the pace and an increased competency when delivering work.<br /></span></p><p><span style="font-size:24px">\ufeff</span><span style="font-size:16px"><span style="font-size:24px">In Summary:</span><br /></span></p><p>Thanks to the advent of DevOps, today\'s development infrastructure is fully automated and operates on a self-service basis:<span style="font-size:16px"></span></p><span style="font-size:16px"><span style="font-size:24px"></span></span><ul><li>Developers can provide resources to public clouds without depending on IT to provision infrastructure, which in the past led to weeks to months of delays.<br /></li><li>Continuous\n integration and deployment (CI/CD) processes automatically \nset up testing, staging, and production environments in the cloud or on-premises. They can be decommissioned, scaled, or re-configured as needed.<br /></li><li>Infrastructure-as-Code\n (IaC) is widely used to deploy environments declaratively*, using tools \nlike Terraform and Vagrant.<br /></li><li>Organisations can now provision containerised workloads \ndynamically using automated, adaptive processes</li></ul><p>*The declarative approach requires that users specify the end state of the infrastructure - for example, deploy these machines in a running state directly into an environment, automating the configuration choices throughout the workflow. The software builds it and releases it with no human interaction. </p><p>The imperative/procedural approach takes action to configure systems in a series of actionable steps. For example, you might declare to deploy a new version of the software and automate a series of steps to get a deployment-ready state. You choose when to apply those changes at the end by adding a "gate" this gate could be a button to release the changes, e.g. "deploy changes" button, after all the automated checks and new configurations pass.</p><p>In such a workflow, even a tiny problem could create a mess. Moreover, as the number of new releases increases (the actual case), the whole matter may turn disastrous. Things would surely go out of hand with an issue still unresolved and plenty of features scheduled to be released.</p><p>Read more at: <a href="https://www.appknox.com/blog/history-of-devops" target="_blank">https://www.appknox.com/blog/history-of-devops</a></p>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2022-02-17T22:43:51.259Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>What methodology relies on self-organising teams that focus on constructive collaboration? <br /></p>', 'hint': 'Rhymes with "grandchild"'}, {'questionNo': 2, 'question': '<p>What methodology relies on automation and integration to drive cultural change and unite teams? <br /></p>', 'hint': ''}, {'questionNo': 3, 'question': 'What traditional approach to project management led to mistrust and poor communication between development teams?<br />', 'hint': "Don't go chasing *beep*, please stick to the rivers and the lakes you're used to"}, {'questionNo': 4, 'question': '<p>What does DevOps emphasize? <br /></p>', 'hint': ''}]}, {'taskTitle': 'The Infinite Loop', 'taskDesc': '<p><span style="font-size:16px"><span style="font-size:24px"><span style="font-size:16px">In the previous task, we learned about the different software development styles throughout the years and how these played a big part in the\xa0</span></span></span>inception of DevOps. This task will introduce you to key concepts, tools, and how they all work together.</p><p><span style="font-size:16px"><span style="font-size:24px">How does DevOps work?</span></span></p><span style="font-size:16px"><span style="font-size:16px">DevOps is </span></span><span style="font-size:16px">\ufeff</span><span style="font-size:16px"><span style="font-size:24px"><span style="font-size:16px">visualized as an infinite loop, describing all the comprising phases:</span></span></span><p></p><p align="center"><img alt="the infinite loop diagram describing a DevOps lifecycle" style="width:50%" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61a7523c029d1c004fac97b3/room-content/538ad9f777ec0153d5d648edd4bcf65a.png" /><br /></p><p style="text-align:justify">Following the infinite loop of the DevOps diagram, let\'s expand on some DevOps tools &amp; processes that we\'ll look at as we follow the DevSecOps pathway and how they help an organization: <br /></p>\n<br /><ol><li><strong>CI/ CD</strong> – In the previous task, we mentioned CI/CD (Continuous Integration and Continuous \nDeployment); CI/CD deals with the frequent merging of code and adding testing in an automated manner to perform checks as new code is pushed and merged. We can test code as we push and merge thanks to a new dynamic and routine in deployment, which takes the form of minor code changes systematically and routinely. Thanks to this change in dynamic, CI/CD helps detect bugs early and decreases the effort of maintaining modular code massively, which introduces \nreliable rollbacks of versions/code.</li><li><strong>INFRASTRUCTURE AS CODE</strong> (IaC) – a way to manage and provision infrastructure through code and automation. Thanks to this approach, we can reuse code used to deploy infrastructure (for example, cloud instances), which helps inconsistent resource creation and management. Standard tools for IaC are terraform, vagrant, etc. We will use these tools further in the pathway as we experiment with IaC security. <br /></li><li><strong>CONFIGURATION MANAGEMENT</strong> – This is where the state of infrastructure is managed constantly and applying changes efficiently, making it more maintainable. Thanks to this, lots of time is saved, and more visibility into how infrastructure is configured. You can use IaC for configuration management.</li><li><strong>ORCHESTRATION</strong> – Orchestration is the automation of workflows. It helps achieve \nstability; for example, by automating the planning of resources, we can have fast responses whenever there is a problem (e.g., health checks failing); this can be achieved thanks to monitoring.</li><li><strong>MONITORING</strong> – focuses on collecting data about the performance and stability of services and \ninfrastructure. This enables faster \nrecovery, helps with cross-team visibility, provides more data to \nanalyze for better root-cause analysis, and also generates an automated \nresponse, as mentioned earlier.</li><li><strong>MICROSERVICES</strong> – An architecture \nthat breaks an application into many small services. This has several benefits, like flexibility if there is a need to scale, reduced complexity, and more options for choosing technology across microservices. We will look at these in more detail in the DevSecOps pathway.<br /></li></ol>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2022-02-27T23:08:29.192Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What helps in adding tests in an automated manner and deals with the frequent merging of small code changes? <br />', 'hint': ''}, {'questionNo': 2, 'question': '<p>What process focuses on collecting data to analyse the performance and stability of services?<br /></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What is a way to provision infrastructure through reusable and consistent pieces of code?<br /></p>', 'hint': ''}]}, {'taskTitle': 'Shifting Left ', 'taskDesc': '<p><span style="font-size:24px">Introduction</span></p><p>Security can now be easily integrated because of the visibility and flexibility that DevOps introduces. You might have heard of the concept "Shifting Left." This means that\xa0<span class="ILfuVd"><span class="hgKElc"> DevOps teams focus on instilling security from the earliest stages in the development lifecycle and introducing a more collaborative culture between development and security. </span></span></p><p><span class="ILfuVd"><span class="hgKElc">Since security can now be \nintroduced early, risks are reduced massively. In the past, you would \nfind out about security flaws and bugs at the very late stages, even in \nproduction. They are leading to stress, rollbacks, and economic losses. Integrating code analysis tools and automated tests earlier in the \nprocess can now identify these security flaws during early development.</span></span><span class="ILfuVd"><span class="hgKElc"></span></span></p><p><span style="font-size:24px">Shifting Left</span></p><p>In the past, security testing was implemented at the end of \nthe development cycle. As the industry evolved and security functions were introduced, \nsecurity teams would perform various analyses and security \ntesting in the final stages of the lifecycle.\xa0</p>\n\n\n\n<p>Depending on the results of security testing, it would either permit the application \nto proceed for deployment into production or reject the application and\n pass it back to developers for remediating the flaws identified. This resulted in long \ndelays in development and friction between teams.<br /></p>\n\n\n\n<p>Implementing security measures during \nall stages of the development lifecycle (shifting left) rather than at the end of the cycle will ensure the software is designed with security \nbest practices built in. By detecting security flaws early in development, remediation costs are lower, and there would be no need to roll back changes as they are being addressed on time. This reduces cost, builds trust, and improves the security and quality of the product.<br /></p><p><span style="font-size:24px"></span><span class="ILfuVd"><span class="hgKElc"></span></span></p><p><span class="ILfuVd"><span class="hgKElc"> </span></span></p><p><span class="ILfuVd"><span class="hgKElc"><span style="font-size:24px">Why are we shifting left</span></span></span></p><p>Back in the day, before agile,\n developers would request infrastructure from IT and receive servers \nweeks or months later. Nowadays, this provisioning of infrastructure in the cloud is automated.\xa0<span style="font-size:1rem">This shift has improved development productivity and speed. However, this increased velocity can also spark security concerns and lead to flaws that can go unnoticed.\xa0</span></p><p align="center"><img alt="Shifting Left Benefits" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61a7523c029d1c004fac97b3/room-content/2078c48d1463aaf4245f2ed0d1175cab.png" class="note-float-left" style="width:565.861px;height:239.742px" /><span style="font-size:1rem;text-align:left"></span></p><div style="text-align:left"><span style="font-size:1rem">The Shift-Left approach ensures these flaws are caught early by introducing processes from the start. In this fast-paced environment, post-development security reviews of new software versions or analysis of cloud infrastructure configurations become a bottleneck. Even when problems are discovered, there is not enough time to remediate them before the next version or feature is introduced. To keep up with customer needs, they need a fast-paced environment for scaling and growth. Security is at risk of being left behind; instilling security in the beginning and adapting security testing to become flexible and adapted to the development lifecycle increases the chances of addressing things promptly.</span></div><p></p><p><span class="ILfuVd"><span class="hgKElc">This development approach to shifting left in DevOps can be referred to as <b>DevSecOps.</b></span></span></p><div style="position:absolute;left:-99999px">Yes, you heard it \nright. With DevOps, security gets introduced early in the \ndevelopment cycle, which minimizes risks massively. Integrating code \nanalysis tools and automated tests earlier can lead to \nbetter identification and elimination of security loopholes. And as the \nsoftware gets to the deployment stage, everything works smoothly as \nanticipated.\n\nSecurity is not an add-on. It\'s a must-have design feature. Blending \nsecurity in DevOps would enhance the impact of DevOps and \neliminate a lot of other bottlenecks that could arise otherwise. With a \nrise in the frequency of cyber threats and tightening regulations, \nadding security to DevOps is not a choice now but certainly an \nobligation.<br />Read more at: <a href="https://www.appknox.com/blog/history-of-devops">https://www.appknox.com/blog/history-of-devops</a></div><div style="position:absolute;left:-99999px">Yes, you heard it \nright. With DevOps, security gets introduced early in the \ndevelopment cycle, which minimizes risks massively. Integrating code \nanalysis tools and automated tests earlier can lead to \nbetter identification and elimination of security loopholes. And as the \nsoftware gets to the deployment stage, everything works smoothly as \nanticipated.\n\nSecurity is not an add-on. It\'s a must-have design feature. Blending \nsecurity in DevOps would enhance the impact of DevOps and \neliminate a lot of other bottlenecks that could arise otherwise. With a \nrise in the frequency of cyber threats and tightening regulations, \nadding security to DevOps is not a choice now but certainly an \nobligation.<br />Read more at: <a href="https://www.appknox.com/blog/history-of-devops">https://www.appknox.com/blog/history-of-devops</a>.</div><div style="position:absolute;left:-99999px"> Yes, you heard it \nright. With DevOps, security gets introduced early in the \ndevelopment cycle, which minimizes risks massively. Integrating code \nanalysis tools and automated tests earlier can lead to \nbetter identification and elimination of security loopholes. And as the \nsoftware gets to the deployment stage, everything works smoothly as \nanticipated.\n\nSecurity is not an add-on. It\'s a must-have design feature. Blending \nsecurity in DevOps would not only enhance the impact of DevOps but also \neliminate a lot of other bottlenecks that could arise otherwise. With a \nrise in the frequency of cyber threats and tightening regulations, \nadding security to DevOps is not a choice now but indeed an \nobligation.<br />Read more at: <a href="https://www.appknox.com/blog/history-of-devops">https://www.appknox.com/blog/history-of-devops</a>.</div><div style="position:absolute;left:-99999px">With DevOps, security \ngets introduced early in the development cycle, which minimizes \nrisks massively. Integrating code analysis tools and automated tests \nearlier can lead to better identification and elimination\n of security loopholes. And as the software gets to the deployment \nstage, everything works smoothly as anticipated.\n\nSecurity is not an add-on. It\'s a must-have design feature. Blending \nsecurity in DevOps would not only enhance the impact of DevOps but also \neliminate a lot of other bottlenecks that could arise otherwise. With a \nrise in the frequency of cyber threats and tightening regulations, \nadding security to DevOps is not a choice now but certainly an \nobligation.<br />Read more at: <a href="https://www.appknox.com/blog/history-of-devops">https://www.appknox.com/blog/history-of-devops</a></div><p><span class="ILfuVd"><span class="hgKElc"></span></span></p><div style="position:absolute;left:-99999px">With DevOps, security \ngets to be introduced early in the development cycle and this minimizes \nrisks massively. Integrating code analysis tools and automated tests \nearlier in the process can lead to better identification and elimination\n of security loopholes. And as the software gets to the deployment \nstage, everything works smoothly as anticipated.\n\nSecurity is not an add-on. It\'s a must-have design feature. Blending \nsecurity in DevOps would not only enhance the impact of DevOps but also \neliminate a lot of other bottlenecks that could arise otherwise. With a \nrise in the frequency of cyber threats and tightening regulations, \nadding security to DevOps is not a choice now, but certainly an \nobligation.<br />Read more at: <a href="https://www.appknox.com/blog/history-of-devops">https://www.appknox.com/blog/history-of-devops</a></div><p><span class="ILfuVd"><span class="hgKElc"></span></span></p><div style="position:absolute;left:-99999px"> Yes, you heard it \nright. With DevOps, security gets to be introduced early in the \ndevelopment cycle and this minimizes risks massively. Integrating code \nanalysis tools and automated tests earlier in the process can lead to \nbetter identification and elimination of security loopholes. And as the \nsoftware gets to the deployment stage, everything works smoothly as \nanticipated.\n\nSecurity is not an add-on. It\'s a must-have design feature. Blending \nsecurity in DevOps would not only enhance the impact of DevOps but also \neliminate a lot of other bottlenecks that could arise otherwise. With a \nrise in the frequency of cyber threats and tightening regulations, \nadding security to DevOps is not a choice now, but certainly an \nobligation.<br />Read more at: <a href="https://www.appknox.com/blog/history-of-devops">https://www.appknox.com/blog/history-of-devops</a></div><p><span class="ILfuVd"><span class="hgKElc"></span></span></p><div style="position:absolute;left:-99999px">With DevOps, security \ngets to be introduced early in the development cycle and this minimizes \nrisks massively. Integrating code analysis tools and automated tests \nearlier in the process can lead to better identification and elimination\n of security loopholes. And as the software gets to the deployment \nstage, everything works smoothly as anticipated.\n\nSecurity is not an add-on. It\'s a must-have design feature. Blending \nsecurity in DevOps would not only enhance the impact of DevOps but also \neliminate a lot of other bottlenecks that could arise otherwise. With a \nrise in the frequency of cyber threats and tightening regulations, \nadding security to DevOps is not a choice now, but certainly an \nobligation.<br />Read more at: <a href="https://www.appknox.com/blog/history-of-devops">https://www.appknox.com/blog/history-of-devops</a></div><p><span class="ILfuVd"><span class="hgKElc"></span></span></p><div>With DevOps, security \ngets to be introduced early in the development cycle and this minimizes \nrisks massively. Integrating code analysis tools and automated tests \nearlier in the process can lead to better identification and elimination\n of security loopholes. And as the software gets to the deployment \nstage, everything works smoothly as anticipated.\n\nSecurity is not an add-on. It\'s a must-have design feature. Blending \nsecurity in DevOps would enhance the impact of DevOps and \neliminate a lot of other bottlenecks that could arise otherwise. With a \nrise in the frequency of cyber threats and tightening regulations, \nadding security to DevOps is not a choice now but indeed an \nobligation.<br />Read more <a href="https://www.appknox.com/blog/history-of-devops">here</a></div>', 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2022-02-17T22:44:18.146Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What term is it used to describe accounting for security from the earliest stages in a development lifecycle?<br />', 'hint': 'shift right'}, {'questionNo': 2, 'question': '<p>What is the development approach where security is introduced from the early stages of a development lifecycle until the final stages?<br /></p>', 'hint': ''}]}, {'taskTitle': 'DevSecOps: Security Strikes Back', 'taskDesc': '<p align="center"><span style="font-size:24px">DevSecOps: Security Strikes Back </span></p><p align="center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61a7523c029d1c004fac97b3/room-content/f008fcb933365fa95cc2f9acfa8ef443.png" style="width:406px;height:645.223px" /><br /></p><p align="center"><br /></p><p><span style="font-size:24px"></span></p><p>DevSecOps <span class="ILfuVd"><span class="hgKElc">is an approach that relies heavily on\nautomation and platform design that integrates security as a shared \nresponsibility. It is a culture-driven development style that normalises security as a day-to-day operation. </span></span></p><p><span style="font-size:24px">What is the value?</span><br /></p><p><span class="ILfuVd"><span class="hgKElc">DevSecOps helps bring down \nvulnerabilities, maximises test coverage, and intensifies the automation\n of security frameworks. This reduces risk massively, assisting organisations in preventing brand reputation damage, and economic losses due to security flaws incidents, making life easier for auditing and monitoring. </span></span></p><p><span class="ILfuVd"><span class="hgKElc" style="font-size:24px">How to implement this efficiently? </span></span></p><p><span class="ILfuVd"><span class="hgKElc">Culture is key. </span></span>It does not work without open communication and trust. It only works with collective effort. DevSecOps should aim to bridge the security knowledge gaps between teams; for everyone to think and be accountable for security, they first need the tools and knowledge to drive this autonomy efficiently and confidently. <br /></p><p><span style="font-size:24px">DevSecOps Challenges</span><br /></p><p><b><span class="ILfuVd"><span class="hgKElc"><span style="font-size:18px">Security Silos</span></span></span></b></p><p>It is common for many security teams to be left out of DevOps processes and portray security as a separate entity, where specialised \npeople can only maintain and lead security practices. This situation creates a\n silo around security and prevents engineers from understanding the \nnecessity of security or applying security measures from the beginning. \n</p><p> This is not scalable or flexible. Security should be a supportive function to help other teams scale and build security, without security teams being a blocker, but rather a ramp to promote secure solutions and decisions. The best practice is to share these responsibilities across\n all team members instead of having a specialised security engineer. </p><p><b style="font-size:1rem"><span class="ILfuVd"><span class="hgKElc"><span style="font-size:18px">Lack of Visibility &amp; Prioritisation</span></span></span></b><br /></p><p> Aim to create a culture where security and other essential application components treat security as a regular aspect of the \napplication. Developers can then focus on development with confidence about security instead of security departments playing police and the blame game. Trust should be built between teams, and security should promote the autonomy of teams by establishing processes that instil security. <span class="ILfuVd"><span class="hgKElc"><span style="font-size:18px"></span></span></span></p><p><b><span class="ILfuVd"><span class="hgKElc"><span style="font-size:18px">Stringent Processes</span></span></span></b></p><p> Every new experiment or piece of software must not go through a complicated\n process and verification against security compliances before being used by developers. Procedures should be flexible to account for these scenarios, where lower-level tasks should be treated differently, and higher-risk tasks and changes are targeted for these more stringent processes.<br /></p><p> Developers need environments to test new software without common \nsecurity limitations. These environments are known as "SandBox," which\n are temporarily isolated environments. These \nenvironments have no connection to any internal network and have no \ncustomer data.</p><span style="font-size:18px"></span>', 'taskType': 'none', 'taskNo': 5, 'taskCreated': '2022-02-17T22:44:41.180Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What DevSecOps challenge can lead to a siloed culture?<br />', 'hint': ''}, {'questionNo': 2, 'question': '<p>What DevSecOps challenge can affect not prioritizing the right risks at the right times?<br /></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What DevSecOps challenge stems from needlessly overcomplicated security processes?<br /></p>', 'hint': ''}]}, {'taskTitle': 'DevSecOps Culture', 'taskDesc': '<p><b><span style="font-size:24px"></span><span style="font-size:24px">DevSecOps Culture</span></b><br /><br /><span style="font-size:24px">Promote autonomy of teams</span><br /><br /><span style="font-size:16px">Whether it is a large organization or a start-up in hypergrowth, the only way to not leave security behind is by promoting the autonomy of teams. This can be done by automating processes that fit seamlessly with the development pipeline until security tests become just another type of test, like unit testing, smoke bombs, etc.</span><br /><br /><span style="font-size:16px">Leading by example and promoting education like creating playbooks / runbooks to spot these flaws and fix them, understand their risk, and build confidence in engineers to make the secure decision independently. The ratio of developers, platform, infrastructure engineers, etc., won\'t be the same as security engineers, and we must understand they can\'t be in every conversation. Security should act as a supporting function that focuses on building trust and creating as much overlap in knowledge between teams as possible.</span><br /><br /><span style="font-size:24px">Visibility and Transparency</span><br /><br /><span style="font-size:16px">For every tool being introduced or practised, there needs to be a supporting process that provides visibility and promotes transparency to other teams. This means that if we want to build autonomy in groups, as mentioned earlier, they need to have visibility on the security state of the service they own or maintain. For example, a dashboard visualizes the number of security flaws by the criticality of the service. This helps prioritize accordingly, so tasks don\'t get lost in the backlog or noise, and they can tackle flaws at the right time. The security state measure depends on the company, but it could be the number of high findings a service might or might not have which determine if it is in a good security state.</span><br /><br /><span style="font-size:16px">Transparency would refer to introducing tools and practices that are accessible to teams. For example, if you present a check before merging code, and the review doesn\'t pass and shows a message saying "signature of possible code injection flaw detected, please remediate," the developer or engineer should have access to the tool that is flagging that message. Usually, these analysis tools that flag those alerts have a UI that specifies the line in code where it\'s affected. They include a definition and a remediation suggestion with steps. In this example, a developer role can be created so that they have access to more information. This promotes education and autonomy by extending transparency that, traditionally, was only accessible by security teams.</span><br /><br /><br /><span style="font-size:24px">Account for flexibility thanks to understanding and empathy</span><br /><br /><span style="font-size:16px">\ufeffAs mentioned earlier, instilling security in DevOps processes with visibility and transparency is no easy task. There is a factor that can determine success: the level of understanding and empathy. This means that the definition of risk for security teams is unequivocal, but for other teams, risk can be different and just as precise for them. This doesn\'t only apply to risk but to an umbrella of things; it ramifies into what they prioritize, how they work, and what they think is important enough to leave aside a project with a tight deadline to fix a bug.</span><br /><br /><span style="font-size:16px">There is no magic tool or process for everyone. It is essential to understand how developers/engineers work, what they know to be a risk, and what they prioritize. If you know their perspective, it\'s easier to build a process that finds common ground and has a higher chance to work vs adding another tool that creates more noise and stress for everyone. This understanding builds perspective, which accounts for empathy for how other teams work and builds a process that accounts for flexibility. This is needed because every situation might be different, deadlines might be different, and bandwidth can change over time.</span><br /><br />As a DevSecOps engineer, suppose you took the time to understand how a team owns a service. In that case, that will have a security scanner added to its development process, worked and viewed priority; it will be easier to get their buy-in and demonstrate value. For example, if it\'s a platform team and owns an internal service but a core service, a risk would be a bug that disrupts the service, not a potential injection that lives behind a proxy. You would need internal credentials to exploit it. You can tune the scanners or add a triaging process that tackles the questions they would ask themselves, and this would, in turn, build trust vs crying wolf and security processes being questioned.\ufeff</p><p><span style="font-size:24px"><span style="font-size:14px">Read about DevSecOps success stories <a href="https://www.csoonline.com/article/3439737/3-devsecops-success-stories.html" target="_blank">here</a>.</span><br /></span></p>', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2022-03-15T23:35:30.236Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "How can you make security scalable so it's not left behind when start ups face hypergrowth or in large corporations?", 'hint': 'Promote teams acting securely and doing the right thing independently and confidently'}, {'questionNo': 2, 'question': '<p>How can you support teams in understanding risk and educating on security flaws?</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What are key factors to successfully instill security in the development process by accounting for flexibility?</p>', 'hint': 'Build processes that account for how teams work and their understanding of risk, to find common ground and get their buy-in'}]}, {'taskTitle': 'Exercise: Fuel Trouble', 'taskDesc': '<p></p><p></p><p align="center"><span style="font-size:24px">Software Development Models</span><br /></p><p>SEC3PO, X Fighter Dev, Chewba-QA and S2-A2 have been assigned to discover minerals in nearby planets in the Galaxy. Watto, the Bug, is funding the mission by providing equipment and fuel to carry out this project. They are tasked to set a course and research these planets. Can you guess which Software Development Model they have used in each case to achieve the mission?</p><p><b><span style="font-size:16px">Click the </span></b><code>View Site</code><b><span style="font-size:16px"> button on the top right, and\xa0</span></b><span style="font-weight:bolder;font-size:1rem">look at the static site attached to this task</span><b style="font-size:1rem">. Can you figure out which approach was taken in each comic snippet?</b></p><p><b style="font-size:1rem">To view the comic again, click the </b><code>View Site</code><b style="font-size:1rem"> button again.</b></p><p><span style="font-size:24px"><b>Background</b></span></p><p><span style="font-size:18px"><b><span style="font-size:16px">Mission: </span></b><span style="font-size:16px">T</span></span><span style="font-size:16px">ravel to the planet with the least amount of risk possible.</span><b><span style="font-size:16px"> </span></b></p><p><b><span style="font-size:16px">Fuel: </span></b><span style="font-size:16px">Accounts for 130.000 Light Years of travel</span></p><p><span style="font-size:18px"><b><span style="font-size:16px">Models:</span></b><span style="font-size:16px"> Waterfall, Agile &amp; DevOps</span><br /></span><b><span style="font-size:18px"><br /></span></b></p><table class="table table-bordered"><tbody><tr><td><b>Planet</b><br /></td><td><b>Distance from Spaceship</b><br /></td></tr><tr><td>Testooine<br /></td><td>125.000 Light Years<br /></td></tr><tr><td>Hackboo<br /></td><td>100.000 Light Years<br /></td></tr><tr><td>TryHothMe<br /></td><td>80.000 Light Years<br /></td></tr><tr><td>Dagobug<br /></td><td>60.000 Light Years<br /></td></tr></tbody></table><p><b><span style="font-size:18px"><br /></span></b><span style="font-size:24px">Comic 1</span><br /></p><p align="left"></p><p><b style="font-size:1rem">Some tests have passed to go to Testooine, which was the initial decision by x fighter dev. It is decided that it is the next planet to visit.</b><br /></p><p><span style="font-size:24px">Comic 2</span><br /></p><p></p><p align="left"><b style="font-size:1rem">Some tests indicated that it is a high risk to travel to Testooine; first, some tests have passed for Naboo, but S2-D2 has decided the course should be changed to Hoth.</b></p><p align="left"><span style="font-size:24px">Comic 3</span><br /></p><p><b>The initial decision based on analysis by X fighter Dev is to travel to Hoth. Costs were questioned, and although Hoth is one of the closest, SEC3PO has analysed the trajectory\xa0and has set new parameters for the tests. Chewba-QA has concluded to change orbit\xa0to Dagobah based on further tests.</b></p>', 'taskType': 'static-site', 'taskNo': 7, 'taskCreated': '2022-03-15T23:40:39.046Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '62879521437056aee2a84f3a', 'questions': [{'questionNo': 1, 'question': '<p>What Software Development Model did the team in Comic 1 follow?</p>', 'hint': 'The team decided to stick to the trajectory that was decided from the start, regardless of hints were only "some" tests passed.'}, {'questionNo': 2, 'question': 'What Software Development Model did the team in Comic 2 follow?<br />', 'hint': "The team was able to change the course as needed. However, tests were missing, and the planet still wasn't the best option"}, {'questionNo': 3, 'question': '<p>What Software Development Model did the team in Comic 3 follow?</p>', 'hint': 'The team was able to address issues from the start, and carry out better tests to find the least risky planet to travel.'}, {'questionNo': 4, 'question': '<p>What is the flag?</p>', 'hint': ''}], 'staticSites': [{'_id': '6538e18e6489ff4faaab25ab', 'title': 'DevSecOps Comic', 'url': 'https://static-labs.tryhackme.cloud/sites/comic-book/', 'autoOpen': False}]}]}