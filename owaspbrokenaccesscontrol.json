{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/b60af5cb376e62ee1a7af132cc134588.png', 'title': 'OWASP Broken Access Control', 'description': 'Exploit Broken Access Control: Number 1 of the Top 10 web security risks.', 'code': 'owaspbrokenaccesscontrol', 'users': 3162, 'tags': ['owasp', 'broken access control', 'web', 'php'], 'type': 'walkthrough', 'difficulty': 'easy', 'userCompleted': False, 'upVotes': 212, 'created': '2023-05-18T09:37:49.127Z', 'published': '2023-06-29T15:00:00.370Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/3a87f46cd41d70622dcfa6b10c2a79bb.png', 'creator': 'l000g1c', 'tasks': [{'taskTitle': 'Introduction', 'taskDesc': '<p>Broken access controls are a type of security vulnerability that\narises when an application or system fails to properly restrict access\nto sensitive data or functionality. This vulnerability allows attackers\nto gain unauthorized access to resources that should be restricted, such\nas user accounts, files, databases, or administrative functions. Broken\naccess controls can occur due to a variety of factors, including poor\ndesign, configuration errors, or coding mistakes.</p>\n<h4>Objectives that the\nstudent will learn:</h4>\n<ol>\n<li>Understand what Broken Access Control is and its impact.</li>\n<li>Identify Broken Access Control vulnerabilities in web\napplications.</li>\n<li>Exploit these vulnerabilities in a controlled environment.</li>\n<li>Understand and apply measures to mitigate and prevent these\nvulnerabilities.</li>\n</ol>\n<h4>Pre-requisites:</h4>\n<ol>\n<li>Basic understanding of JSON, web applications, and HTTP\nprotocols.</li>\n<li>Familiarity with scripting languages such as PHP and\nJavaScript.</li>\n<li>Knowledge of web application security standards and frameworks such\nas <a href="https://tryhackme.com/room/owasptop102021">OWASP Top\n10</a>.</li>\n<li>Basic understanding and usage of a proxy tool like <a href="https://tryhackme.com/room/burpsuiterepeater">Burp Suite</a>.</li>\n</ol>\n', 'taskType': 'none', 'taskNo': 1, 'taskCreated': '2023-04-03T14:18:46.335Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Click me to proceed onto the next task.', 'hint': ''}]}, {'taskTitle': 'Broken Access Control Introduction', 'taskDesc': '<h4>What is Access Control?</h4>\n<p>Access control is a security mechanism used to control which users or\nsystems are allowed to access a particular resource or system. Access\ncontrol is implemented in computer systems to ensure that only\nauthorized users have access to resources, such as files, directories,\ndatabases, and web pages. The primary goal of access control is to\nprotect sensitive data and ensure that it is only accessible to those\nwho are authorized to access it.</p>\n<p style="text-align:center"><img alt="Example of Access Control" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/c0163e47202f8fb14d0d9bf407fb65df.png" style="width:70%" /></p>\n<p>Access control can be implemented in different ways, depending on the\ntype of resource being protected and the security requirements of the\nsystem. Some common access control mechanisms include:</p>\n<ol>\n<li><p><strong>Discretionary Access Control (DAC)</strong>: In this type\nof access control, the resource owner or administrator determines who is\nallowed to access a resource and what actions they are allowed to\nperform. DAC is commonly used in operating systems and file systems. In layman’s terms, imagine a castle where the king can give keys to his advisors, allowing them to open any doors they like, whenever they want.\nThat’s DAC for you. It’s the liberty to control access to your own\nresources. The one in charge, like the king of the castle, can hand out\npermissions to whomever they please, dictating who can come in and\nout.</p>\n<p style="text-align:center"><img alt="Example of Discretionary Access Control" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/fda89930eb8e0fe0be0bc2b0050df2bb.png" style="width:50%" /></p></li>\n<li><p><strong>Mandatory Access Control (MAC)</strong>: In this type of\naccess control, access to resources is determined by a set of predefined\nrules or policies that are enforced by the system.\xa0MAC\xa0is commonly used\nin highly secure environments, such as government and military\nsystems.\xa0In layman’s terms, picture a fort with an iron-clad security protocol. Only specific individuals with particular security clearances\ncan access certain areas, and this is non-negotiable. The high commander\nsets the rules, and they are rigorously followed. That’s how MAC works.\nIt’s like the stern security officer who allows no exceptions to the\nrule.</p>\n<p style="text-align:center"><img alt="Example of Mandatory Access Control" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/680f5f2a359b86e88a01f75509b48976.png" style="width:623.661px;height:490.094px" /></p></li>\n<li><p><strong>Role-Based Access Control (RBAC)</strong>: In this type\nof access control, users are assigned roles that define their level of\naccess to resources. RBAC is commonly used in enterprise systems, where\nusers have different levels of authority based on their job\nresponsibilities. In layman’s terms, imagine a modern corporation. You\nhave your managers, your executives, your sales staff, etc. They each\nhave different access to the building. Some can enter the boardroom,\nothers can access the sales floor, and so on. That’s the essence of RBAC\n- assigning access based on a person’s role within an organization.</p>\n<p><img alt="Example of Role-based Access Control" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/951b891b22025b3a67b2675361b23415.png" style="width:100%" /></p></li>\n<li><p><strong>Attribute-Based Access Control (ABAC)</strong>: In this\ntype of access control, access to resources is determined by a set of\nattributes, such as user role, time of day, location, and device. ABAC\nis commonly used in cloud environments and web applications. In layman’s\nterms, think of a highly advanced sci-fi security system that scans\nindividuals for certain attributes. Maybe it checks whether they’re from\na particular planet, whether they’re carrying a specific device, or if\nthey’re trying to access a resource at a specific time. That’s ABAC.\nIt’s like the smart, flexible security of the future.</p>\n<p style="text-align:center"><img alt="Example of Attribute-Based Access Control" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/0057e9b8b5ea7f0e1bed9c33f586163b.png" style="width:651.53px;height:457.203px" /></p></li>\n</ol>\n<p>Implementing access control can help prevent security breaches and\nunauthorized access to sensitive data. However, access control is not\nfoolproof and can be vulnerable to various types of attacks, such as\nprivilege escalation and broken access control vulnerabilities.\nTherefore, it is important to regularly review and test access control\nmechanisms to ensure that they are working as intended.</p>\n<h4>Broken Access Control:</h4>\n<p>Broken access control vulnerabilities refer to situations where\naccess control mechanisms fail to enforce proper restrictions on user\naccess to resources or data. Here are some common exploits for broken\naccess control and examples:</p>\n<ol>\n<li><p><strong>Horizontal privilege escalation</strong>\xa0occurs when an\nattacker can access resources or data belonging to other users with the\nsame level of access. For example, a user might be able to access\nanother user’s account by changing the user ID in the URL.</p></li>\n<li><p><strong>Vertical privilege escalation</strong> occurs when an\nattacker can access resources or data belonging to users with higher\naccess levels. For example, a regular user can access administrative\nfunctions by manipulating a hidden form field or URL parameter.</p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/fa3bb36f2fde2bd29aa290ff2610428d.png" style="width:50%" /><br /></p>\n<p style="text-align:center"></p></li>\n<li><p><strong>Insufficient access control checks</strong> occur when\naccess control checks are not performed correctly or consistently,\nallowing an attacker to bypass them. For example, an application might\nallow users to view sensitive data without verifying their proper\npermissions.</p></li>\n<li><p><strong>Insecure direct object references</strong> occur when an\nattacker can access a resource or data by exploiting a weakness in the\napplication’s access control mechanisms. For example, an application\nmight use predictable or easily guessable identifiers for sensitive\ndata, making it easier for an attacker to access. You may refer to this\n<a href="https://tryhackme.com/room/owasptop102021">room</a>\xa0in <strong>Task\n#4</strong>\xa0to learn more about this.</p>\n<p style="text-align:center"><img alt="Example of Insecure direct object references" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/55df42c444edbd2a24f7973b5792b769.png" style="width:772.584px;height:485.219px" /></p></li>\n</ol>\n<p>These exploits can be prevented by implementing strong access control\nmechanisms and regularly reviewing and testing them to ensure they are\nfunctioning as intended.</p>\n', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2023-04-04T01:01:55.300Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What is IDOR?', 'hint': ''}, {'questionNo': 2, 'question': '<p><span style="color:rgb(0, 0, 0);font-family:Söhne, ui-sans-serif, system-ui, -apple-system, &quot;Segoe UI&quot;, Roboto, Ubuntu, Cantarell, &quot;Noto Sans&quot;, sans-serif, &quot;Helvetica Neue&quot;, Arial, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;;white-space:pre-wrap">What occurs when an attacker can access resources or data belonging to other users with the same level of access?</span><br /></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p><span style="color:rgb(0, 0, 0);font-family:Söhne, ui-sans-serif, system-ui, -apple-system, &quot;Segoe UI&quot;, Roboto, Ubuntu, Cantarell, &quot;Noto Sans&quot;, sans-serif, &quot;Helvetica Neue&quot;, Arial, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;;white-space:pre-wrap">What occurs when an attacker can access resources or data from users with higher access levels?</span><br /></p>', 'hint': ''}, {'questionNo': 4, 'question': '<p>What is ABAC?</p>', 'hint': ''}, {'questionNo': 5, 'question': '<p>What is RBAC?</p>', 'hint': ''}]}, {'taskTitle': 'Deploy the Machine', 'taskDesc': '<p>To focus on learning about the Broken Access Controls, please click\n    on the\xa0<code>Start Machine</code>\xa0button located in the upper-right-hand\n    corner of this task to deploy the virtual machine for this room.</p>\n    <p>After obtaining the machine’s generated IP address, you can either\n    use our AttackBox or use your own VM connected to TryHackMe’s VPN to\n    begin the attack.\xa0If you prefer to use the AttackBox, you can simply\n    click on the\xa0<code>Start AttackBox</code>\xa0button located above the room\n    name.</p>\n    <p>After starting the AttackBox or connecting your attack\xa0VM\xa0to\n    TryHackMe’s VPN, you can now start accessing the target website\n    application by entering <strong>http://MACHINE_IP/</strong> into the\n    browser.</p>\n    <p style="text-align:center"><img alt="Vulnerable App Preview" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/3b7a393324ba60bf9a7ddf04d60d14fc.png" style="width:900px;height:290.437px;border:1px solid #000000" /></p>\n    <p><em>Keep in mind that the machine may take up to\n    <strong>5 minutes</strong> to spawn.</em></p>\n    ', 'taskType': 'vm', 'taskNo': 3, 'taskCreated': '2023-04-10T12:53:02.611Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '648d65d98c340900441a26f9', 'questions': [{'questionNo': 1, 'question': 'I have deployed the machine attached to the task.', 'hint': ''}]}, {'taskTitle': 'Assessing the Web Application', 'taskDesc': '<h4>Learning Objective:</h4>\n<p>In this task, our objective is to gain a comprehensive understanding\nof the web application’s functionalities. This will allow us to make the\nmost of the application’s capabilities and achieve our desired\noutcomes.</p>\n<h4>Assessing the Application:</h4>\n<p>When you browse a web application as a penetration tester, imagine\nwhat the underlying code looks like and what vulnerabilities come to\nmind for each functionality, request, and response.</p>\n<p>The web application for this room features a Dashboard, Login, and\nRegistration form that enables users to access the dashboard of the\nwebsite. From a web app pentester standpoint, the pentester will usually\nregister an account. After the registration, the pentester will then try\nto check the login function for any access control vulnerabilities.</p>\n<p>Below are the screenshots of each webpage:</p>\n<p><strong>Registration:</strong></p><p style="text-align:center"><img alt="Registration Page" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/1b103a3eb8b3bda9f399da0702de7655.png" style="width:901.489px;height:331.5px;border:1px solid #000000" /><strong><br /></strong></p>\n<p style="text-align:center"></p>\n<p><strong>Login:</strong></p><p style="text-align:center"><img alt="Login Page" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/34f8072b8919303582352d6a1d914579.png" style="width:900px;height:256.248px;border:1px solid #000000" /><strong><br /></strong></p>\n<p style="text-align:center"></p>\n<p><strong>Dashboard:</strong></p>\n<p style="text-align:center"><img alt="Dashboard Page" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/95f2bd55c06a13d47ab06ee6a8a0b6cd.png" style="width:900px;height:349.654px;border:1px solid #000000" /></p>\n<p>In order for us to capture the HTTP requests being sent to the server,\nwe can use <a href="https://www.zaproxy.org/">OWASP ZAP</a>\xa0or Burp\nSuite Community Edition.</p>\n<p>To learn more about the detailed usage of Burp Suite and its\nfunctionalities, you may refer to the <a href="https://tryhackme.com/module/learn-burp-suite">Burp Suite\nModule</a>.</p>\n<h4>Capturing the HTTP traffic</h4>\n<p>In order for us to further analyze the requests and responses being\nsent and received from the server, we will use the\n<strong>“Proxy”</strong> module of Burp Suite to capture the HTTP\ntraffic that is being sent to the server. The captured HTTP traffic can be used with the other modules of Burp Suite.</p>\n<p>These can then be manipulated or sent to other tools, such as\n<strong>“Repeater”</strong>, for further processing before being allowed\nto continue to their destination.\xa0</p>\n<p>Below is the captured HTTP traffic that is being sent to\n<code>functions.php</code> after login.</p>\n<p><img alt="Captured HTTP traffic" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/85d5720c06d8e1d993730cbf1a790849.png" style="width:100%;border:1px solid #000000" /></p>\n<p>Based on the screenshot displayed above, we can observe that upon\ncompleting the login process, the web application will give us a JSON\nresponse that contains the status, message, first_name, last_name,\nis_admin, and redirect_link which the server uses to redirect the user\nto the <code>dashboard.php</code> with the parameter “isadmin” in the\nURL.</p>\n<h4>Understanding\nthe content of the\xa0HTTP\xa0request and response:</h4>\n<ul>\n<li>The target web application does not have any implemented security\nheaders, which indicates that there are no preventative measures (like a\nfirst line of defense) in place to protect the web application against\ncertain types of attacks.</li>\n<li>The target web application is running on a\xa0Linux\xa0operating system\n(<code>Debian</code>) and is using\xa0Apache\xa0web server\n(<code>Apache/2.4.38</code>). This information can be useful in\nidentifying potential security\xa0vulnerabilities that may exist in the\ntarget web application.</li>\n<li>The target web application utilizes\xa0<code>PHP/8.0.19</code>\xa0as its\nbackend programming language. This information is important for\nunderstanding the technology stack of the application and identifying\npotential security vulnerabilities or compatibility issues that may\narise with other software components.</li>\n<li>The target web application redirects the user to the dashboard with\na parameter that we can possibly test for privilege escalation\nvulnerabilities.</li>\n</ul>\n', 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2023-04-11T05:34:14.700Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What is the type of server that is hosting the web application? This can be found in the response of the request in Burp Suite.', 'hint': ''}, {'questionNo': 2, 'question': '<p>What is the name of the parameter in the JSON response from the login request that contains a redirect link?</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What Burp Suite module allows us to\xa0<span style="font-size:1rem">capture requests and responses between ourselves and our target?</span></p>', 'hint': ''}, {'questionNo': 4, 'question': '<p>What is the admin’s email that can be found in the online users’ table?</p>', 'hint': ''}]}, {'taskTitle': 'Exploiting the Web Application', 'taskDesc': '<p>In the previous task, we learned that the file\n    <code>functions.php</code> returns a JSON response upon login. The\n    response contains a <strong>redirect_link</strong> with a parameter that\n    we can test for access control vulnerabilities.</p>\n    <p>To start testing for this vulnerability, we can intercept the HTTP\n    response and copy the value of the\n    <strong>redirect_link</strong>\xa0parameter to our address bar.</p>\n    <p><img alt="Redirect link in the address bar" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/ae62caddd97044d2f502fb843a5792aa.png" style="width:100%;border:1px solid #000000" /><br /></p>\n    <p>Since the application redirects the user to dashboard.php while the\n    JSON response can only be seen by intercepting using a proxy tool, we can try changing the parameter’s value from\xa0<strong>“false”</strong> to\n    <strong>“true”</strong> or vice versa.</p>\n    <p><img alt="Modified parameter value in the address bar" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/5dd8248de6785f4032080981acd689dc.png" style="width:100%;border:1px solid #000000" /><br /></p>\n    <p>Upon changing the value from <strong>false</strong>\n    to <strong>true</strong>, application redirects us to <code>admin.php</code>, which is hidden to a normal user by default.\n    Below is the HTTP request that is captured using Burp Suite Proxy.</p>\n    <p><img alt="Captured HTTP request using Burp Suite Proxy" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/ad005cdf8c587872cf3c1ed1fe6b90b3.png" style="width:100%;border:1px solid #000000" /></p>\n    <p><img alt="Admin Page Preview" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/c019a5987cac64d81dc2859b13f56bdc.png" style="width:100%;border:1px solid #000000" /><br /></p>\n    <p>Since we have access to admin.php using a low-privilege account, we might as well check for a vertical privilege escalation attack.</p>\n    <p>Checking the box in the “Admin access” column of the account you\n    registered and clicking the “Save Changes” button will give us admin privileges. Which in return enables us to revoke the access of other\n    admin users.</p>\n    <p><img alt="Admin Page Preview with modified admin access" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ee9d82ebaa78254d39dc7a7/room-content/b8e6cf35af3196314036bfde4dee77b8.png" style="width:100%;border:1px solid #000000" /></p>\n    ', 'taskType': 'none', 'taskNo': 5, 'taskCreated': '2023-04-11T11:49:15.876Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What kind of privilege escalation happened after accessing admin.php?', 'hint': ''}, {'questionNo': 2, 'question': '<p>What parameter allows the attacker to access the admin page?</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What is the flag in the admin page?</p>', 'hint': ''}]}, {'taskTitle': 'Mitigation', 'taskDesc': '<p>There are several steps that can be taken to mitigate the risk of\nbroken access control vulnerabilities in PHP applications:</p>\n<ol>\n<li><p><strong>Implement Role-Based Access Control (RBAC)</strong>:\nRole-based access control (RBAC) is a method of regulating access to\ncomputer or network resources based on the roles of individual users\nwithin an enterprise. By defining roles in an organization and assigning\naccess rights to these roles, you can control what actions a user can\nperform on a system. The provided code snippet illustrates how you can\ndefine roles (such as ‘admin’, ‘editor’, or ‘user’) and the permissions\nassociated with them. The <code>hasPermission</code> function checks if\na user of a certain role has a specified permission.</p>\n<div class="terminal-container">\n<div class="terminal-content">\n<div class="terminal-top">\nSample Code\n</div>\n<pre class="terminal-code"> <code class="language-php">// Define roles and permissions\n $roles = [\n     \'admin\' =&gt; [\'create\', \'read\', \'update\', \'delete\'],\n     \'editor\' =&gt; [\'create\', \'read\', \'update\'],\n     \'user\' =&gt; [\'read\'],\n ];\n\n // Check user permissions\n function hasPermission($userRole, $requiredPermission) {\n     global $roles;\n     return in_array($requiredPermission, $roles[$userRole]);\n }\n\n // Example usage\n if (hasPermission(\'admin\', \'delete\')) {\n     // Allow delete operation\n } else {\n     // Deny delete operation\n }\n </code>\n </pre>\n</div>\n</div></li>\n<li><p><strong>Use Parameterized Queries</strong>: Parameterized queries\nare a way to protect PHP applications from SQL Injection attacks, where\nmalicious users could potentially gain unauthorized access to your\ndatabase. By using placeholders instead of directly including user input\ninto the SQL query, you can significantly reduce the risk of SQL\nInjection attacks. The provided example demonstrates how a query can be\nmade secure using prepared statements, which separates SQL syntax from\ndata and handles user input safely.</p>\n<div class="terminal-container">\n<div class="terminal-content">\n<div class="terminal-top">\nSample Code\n</div>\n<pre class="terminal-code"> <code class="language-php">// Example of vulnerable query\n $username = $_POST[\'username\'];\n $password = $_POST[\'password\'];\n $query = "SELECT * FROM users WHERE username=\'$username\' AND password=\'$password\'";\n\n // Example of secure query using prepared statements\n $username = $_POST[\'username\'];\n $password = $_POST[\'password\'];\n $stmt = $pdo-&gt;prepare("SELECT * FROM users WHERE username=? AND password=?");\n $stmt-&gt;execute([$username, $password]);\n $user = $stmt-&gt;fetch();\n </code> </pre>\n</div>\n</div></li>\n<li><p><strong>Proper Session Management</strong>: Proper session\nmanagement ensures that authenticated users have timely and appropriate\naccess to resources, thereby reducing the risk of unauthorized access to\nsensitive information. Session management includes using secure cookies,\nsetting session timeouts, and limiting the number of active sessions a\nuser can have. The code snippet shows how to initialize a session, set\nsession variables and check for session validity by looking at the last\nactivity time.</p>\n<div class="terminal-container">\n<div class="terminal-content">\n<div class="terminal-top">\nSample Code\n</div>\n<pre class="terminal-code"> <code class="language-php">// Start session\n session_start();\n\n // Set session variables\n $_SESSION[\'user_id\'] = $user_id;\n $_SESSION[\'last_activity\'] = time();\n\n // Check if session is still valid\n if (isset($_SESSION[\'last_activity\']) &amp;&amp; (time() - $_SESSION[\'last_activity\'] &gt; 1800)) {\n     // Session has expired\n     session_unset();\n     session_destroy();\n }\n </code> </pre>\n</div>\n</div></li>\n<li><p><strong>Use Secure Coding Practices</strong>: Secure coding\npractices involve methods to prevent the introduction of security\nvulnerabilities. Developers should sanitize and validate user input to\nprevent malicious data from causing harm and avoid using insecure\nfunctions or libraries. The given example shows how to sanitize user\ninput using PHP’s <code>filter_input</code> function and demonstrates\nhow to securely hash a password using <code>password_hash</code> instead\nof an insecure function like <code>md5</code>.</p>\n<div class="terminal-container">\n<div class="terminal-content">\n<div class="terminal-top">\nSample Code\n</div>\n<pre class="terminal-code"> <code class="language-php">// Validate user input\n $username = filter_input(INPUT_POST, \'username\', FILTER_SANITIZE_STRING);\n $password = filter_input(INPUT_POST, \'password\', FILTER_SANITIZE_STRING);\n\n // Avoid insecure functions\n // Example of vulnerable code using md5\n $password = md5($password);\n // Example of secure code using password_hash\n $password = password_hash($password, PASSWORD_DEFAULT);\n </code> </pre>\n</div>\n</div></li>\n</ol>\n', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2023-05-18T10:08:53.814Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Click me to proceed onto the next task.', 'hint': ''}]}, {'taskTitle': 'Conclusion', 'taskDesc': '<p>Broken access control is a security vulnerability that occurs when a\nsystem fails to properly enforce access controls, which can result in\nunauthorized users gaining access to sensitive information or performing\nactions they are not authorized to do.</p>\n<p>Horizontal privilege escalation occurs when a user is able to access\ndata or perform actions that they are not authorized to do within their\nown privilege level. This can be dangerous because it can allow an\nattacker who has already gained access to the system to move laterally\nthrough the network and access additional resources or sensitive\ndata.</p>\n<p>Vertical privilege escalation occurs when a user is able to gain\naccess to data or perform actions that are reserved for users with\nhigher privilege levels, such as system administrators. This can be even\nmore dangerous because it can allow an attacker to gain full control of\nthe system and potentially take over the entire network.</p>\n<p>The impact of these types of privilege escalation can vary depending\non the specific system and the level of access that is gained. However,\nin general, the consequences can include unauthorized access to\nsensitive information, data loss or theft, disruption of critical\nsystems or services, and even complete network compromise. Therefore, it is important to implement strong access controls and regularly\nmonitor for any signs of unauthorized access or activity.</p>\n<p>Here are some references that you can give to PHP developers to help\nthem implement these mitigation strategies:</p>\n<ol>\n<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/PHP_Configuration_Cheat_Sheet.html">OWASP PHP Configuration Cheat Sheet</a></li>\n<li><a href="https://phptherightway.com/#security">PHP\xa0The Right Way:\nSecurity</a></li>\n<li><a href="https://www.php.net/manual/en/security.php">Secure Coding\nin\xa0PHP</a></li>\n</ol>\n', 'taskType': 'none', 'taskNo': 7, 'taskCreated': '2023-06-07T07:40:49.896Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Click me to finish this room.', 'hint': ''}]}]}