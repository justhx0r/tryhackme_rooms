{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/69208399c3fe8b0416103c51e291e117.png', 'title': 'Hydra', 'description': "Learn about and use Hydra, a fast network logon cracker, to bruteforce and obtain a website's credentials. ", 'code': 'hydra', 'users': 103648, 'tags': ['hydra', 'bruteforce'], 'type': 'walkthrough', 'difficulty': 'easy', 'userCompleted': False, 'upVotes': 3400, 'created': '2020-02-19T00:00:29.502Z', 'published': '2020-02-19T00:41:49.956Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://i.imgur.com/kzeMRHz.png', 'creator': 'tryhackme', 'tasks': [{'taskTitle': 'Hydra Introduction', 'taskDesc': '<h2>What is Hydra?</h2>\n<p>Hydra is a brute force online password cracking program, a quick\nsystem login password “hacking” tool.</p>\n<p>Hydra can run through a list and “brute force” some authentication\nservices. Imagine trying to manually guess someone’s password on a\nparticular service (SSH, Web Application Form, FTP or SNMP) - we can use\nHydra to run through a password list and speed this process up for us,\ndetermining the correct password.</p>\n<p>According to its <a href="https://github.com/vanhauser-thc/thc-hydra">official\nrepository</a>, Hydra supports, i.e., has the ability to brute force the\nfollowing protocols: “Asterisk, AFP, Cisco AAA, Cisco auth, Cisco\nenable, CVS, Firebird, FTP, HTTP-FORM-GET, HTTP-FORM-POST, HTTP-GET,\nHTTP-HEAD, HTTP-POST, HTTP-PROXY, HTTPS-FORM-GET, HTTPS-FORM-POST,\nHTTPS-GET, HTTPS-HEAD, HTTPS-POST, HTTP-Proxy, ICQ, IMAP, IRC, LDAP,\nMEMCACHED, MONGODB, MS-SQL, MYSQL, NCP, NNTP, Oracle Listener, Oracle\nSID, Oracle, PC-Anywhere, PCNFS, POP3, POSTGRES, Radmin, RDP, Rexec,\nRlogin, Rsh, RTSP, SAP/R3, SIP, SMB, SMTP, SMTP Enum, SNMP v1+v2+v3,\nSOCKS5, SSH (v1 and v2), SSHKEY, Subversion, TeamSpeak (TS2), Telnet,\nVMware-Auth, VNC and XMPP.”</p>\n<p>For more information on the options of each protocol in Hydra, you\ncan check the <a href="https://en.kali.tools/?p=220">Kali Hydra tool\npage</a>.</p>\n<p>This shows the importance of using a strong password; if your\npassword is common, doesn’t contain special characters and is not above\neight characters, it will be prone to be guessed. A\none-hundred-million-password list contains common passwords, so when an\nout-of-the-box application uses an easy password to log in, change it\nfrom the default! CCTV cameras and web frameworks often use\n<code>admin:password</code> as the default login credentials, which is\nobviously not strong enough.</p>\n<h2>Installing Hydra</h2>\n<p>Hydra is already installed on the AttackBox. You can access it by\nclicking on the <strong>Start AttackBox</strong> button.</p>\n<p>If you prefer to use the in-browser Kali machine, Hydra also comes\npre-installed, as is the case with all Kali distributions. You can\naccess it by selecting Use Kali Linux and clicking on <strong>Start Kali\nLinux</strong> button.</p>\n<p>However, you can check its official repositories if you prefer to use\nanother Linux distribution. For instance, you can install Hydra on an\nUbuntu or Fedora system by executing <code>apt install hydra</code> or\n<code>dnf install hydra</code>. Furthermore, you can download it from\nits official <a href="https://github.com/vanhauser-thc/thc-hydra">THC-Hydra\nrepository</a>.</p>', 'taskType': 'none', 'taskNo': 1, 'taskCreated': '2020-02-19T00:00:51.399Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read the above and have Hydra at the ready.</p>', 'hint': ''}]}, {'taskTitle': 'Using Hydra', 'taskDesc': '<p>Deploy the machine attached to this task, then navigate to\xa0<a href="http://machine_ip/">http://MACHINE_IP</a>\xa0<em>(this machine can\ntake up to 3 minutes to boot)</em></p>\n<h2>Hydra Commands</h2>\n<p>The options we pass into Hydra depend on which service (protocol)\nwe’re attacking. For example, if we wanted to brute force FTP with the\nusername being <code>user</code> and a password list being\n<code>passlist.txt</code>, we’d use the following command:</p>\n<p><code>hydra -l user -P passlist.txt ftp://MACHINE_IP</code></p>\n<p>For this deployed machine, here are the commands to use Hydra on SSH\nand a web form (POST method).</p>\n<h3>SSH</h3>\n<p><code>hydra -l &lt;username&gt; -P &lt;full path to pass&gt; MACHINE_IP -t 4 ssh</code></p>\n<table class="table table-bordered">\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-l</code></td>\n<td>specifies the (SSH) username for login</td>\n</tr>\n<tr>\n<td><code>-P</code></td>\n<td>indicates a list of passwords</td>\n</tr>\n<tr>\n<td><code>-t</code></td>\n<td>sets the number of threads to spawn</td>\n</tr>\n</tbody>\n</table>\n<p>For example,\n<code>hydra -l root -P passwords.txt MACHINE_IP -t 4 ssh</code> will run\nwith the following arguments:</p>\n<ul>\n<li>Hydra will use <code>root</code> as the username for\n<code>ssh</code></li>\n<li>It will try the passwords in the <code>passwords.txt</code>\nfile</li>\n<li>There will be four threads running in parallel as indicated by\n<code>-t 4</code></li>\n</ul>\n<h3>Post Web Form</h3>\n<p>We can use Hydra to brute force web forms too. You must know which\ntype of request it is making; GET or POST methods are commonly used. You\ncan use your browser’s network tab (in developer tools) to see the\nrequest types or view the source code.</p>\n<p><code>sudo hydra &lt;username&gt; &lt;wordlist&gt; MACHINE_IP http-post-form "&lt;path&gt;:&lt;login_credentials&gt;:&lt;invalid_response&gt;"</code></p>\n<table class="table table-bordered">\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-l</code></td>\n<td>the username for (web form) login</td>\n</tr>\n<tr>\n<td><code>-P</code></td>\n<td>the password list to use</td>\n</tr>\n<tr>\n<td><code>http-post-form</code></td>\n<td>the type of the form is POST</td>\n</tr>\n<tr>\n<td><code>&lt;path&gt;</code></td>\n<td>the login page URL, for example, <code>login.php</code></td>\n</tr>\n<tr>\n<td><code>&lt;login_credentials&gt;</code></td>\n<td>the username and password used to log in, for example,\n<code>username=^USER^&amp;password=^PASS^</code></td>\n</tr>\n<tr>\n<td><code>&lt;invalid_response&gt;</code></td>\n<td>part of the response when the login fails</td>\n</tr>\n<tr>\n<td><code>-V</code></td>\n<td>verbose output for every attempt</td>\n</tr>\n</tbody>\n</table>\n<p>Below is a more concrete example Hydra command to brute force a POST\nlogin form:</p>\n<p><code>hydra -l &lt;username&gt; -P &lt;wordlist&gt; MACHINE_IP http-post-form "/:username=^USER^&amp;password=^PASS^:F=incorrect" -V</code></p>\n<ul>\n<li>The login page is only <code>/</code>, i.e., the main IP\naddress.</li>\n<li>The <code>username</code> is the form field where the username is\nentered</li>\n<li>The specified username(s) will replace <code>^USER^</code></li>\n<li>The <code>password</code> is the form field where the password is\nentered</li>\n<li>The provided passwords will be replacing <code>^PASS^</code></li>\n<li>Finally, <code>F=incorrect</code> is a string that appears in the\nserver reply when the login fails</li>\n</ul>\n<p>You should now have enough information to put this to practice and\nbrute force your credentials to the deployed machine!</p>', 'taskType': 'vm', 'taskNo': 2, 'taskCreated': '2020-02-19T00:27:35.357Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '5e4c7a197095e6fb1e5cb12b', 'questions': [{'questionNo': 1, 'question': "<p>Use Hydra to bruteforce molly's web password. What is flag 1?<br /></p>", 'hint': "If you've tried more than 30 passwords from RockYou.txt, you are doing something wrong!"}, {'questionNo': 2, 'question': "<p>Use Hydra to bruteforce molly's SSH password. What is flag 2?<br /></p>", 'hint': ''}]}]}