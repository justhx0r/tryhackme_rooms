{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/0ad87658878df43e1232587177221386.png', 'title': 'Introduction to Antivirus', 'description': 'Understand how antivirus software works and what detection techniques are used to bypass malicious file checks.', 'code': 'introtoav', 'users': 13150, 'tags': ['AV detection techniques', 'Heuristic Engine', 'Signature Engine', 'AV software', 'Antivirus'], 'type': 'walkthrough', 'difficulty': 'easy', 'userCompleted': False, 'upVotes': 508, 'created': '2022-03-08T16:29:39.896Z', 'published': '2022-07-20T18:46:42.472Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://tryhackme-images.s3.amazonaws.com/user-uploads/5e73cca6ec4fcf1309f2df86/room-content/461db271e310812a73d4a96abd2dc9eb.png', 'creator': 'tryhackme', 'tasks': [{'taskTitle': 'Introduction', 'taskDesc': '<p><span style="font-size:24px">Welcome to Intro to AV</span></p><p><span style="font-size:1rem">Antivirus (AV) software is one of the essential host-based security solutions available to detect and prevent malware attacks </span>within the end-user\'s machine<span style="font-size:1rem">.\xa0</span><span style="font-size:1rem">AV software consists of different modules, features, and detection techniques, which are discussed in this room.</span><br /></p><p style="text-align:center"></p><p><span style="font-size:1rem">As a red teamer or pentester, it is essential to be familiar with and understand how AV software\xa0</span>and its detection techniques<span style="font-size:1rem">\xa0work. Once this knowledge is acquired, it will be easier to work toward AV evasion techniques.</span><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5c549500924ec576f953d9fc/room-content/1c337e6e58b75099340f628252383a1c.png" style="float:right;width:431.148px;height:262.906px" class="note-float-right" alt /></p><p></p><p><span style="font-size:24px">Learning Objectives</span><br /></p><ul>\n<li>What is Antivirus software?</li>\n<li>Antivirus detection approaches</li>\n<li>Enumerate installed AV software in the target machine</li>\n<li>Test in a simulated environment<br /></li></ul><p><span style="font-size:24px">Room prerequisites</span></p><ul>\n<li>General knowledge of host-based detection solutions; check <a href="https://tryhackme.com/room/thelayoftheland" target="_blank">The Lay of the Land</a> room for more information.</li><li>General experience with Hashing crypto; check the\xa0<a href="https://tryhackme.com/room/hashingcrypto101" target="_blank">Hashing - Crypto 101</a> room for more information.</li><li>Basic knowledge of Yara Rules; check the THM <a href="https://tryhackme.com/room/yara" target="_blank">Yara</a> room for more information.</li></ul><ul>\n</ul><ul>\n</ul>', 'taskType': 'none', 'taskNo': 1, 'taskCreated': '2022-03-09T08:31:02.730Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "Let's get started!", 'hint': ''}]}, {'taskTitle': 'Antivirus Software', 'taskDesc': '<p><span style="font-size:24px">What is AV software</span><span style="font-size:24px">?</span></p><p></p>\n<p></p>\n<p>Antivirus (AV) software is an extra layer of security that aims to detect and prevent the execution and spread of malicious files in a target operating system.</p>\n\n<p>It is a host-based application that runs in real-time (in the background) to monitor and check the current and newly downloaded files. The AV software inspects and decides whether files are malicious using different techniques, which will be covered later in this room.\n\n<img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5c549500924ec576f953d9fc/room-content/cc7df5646938a83c96371cc0dc615253.png" style="float:right;width:489.5px;height:298.489px" class="note-float-right" alt /></p>\n\n<p>Interestingly, the first antivirus software was designed solely to detect and remove\xa0<a href="https://malware-history.fandom.com/wiki/Virus">computer viruses</a>. Nowadays, that has changed; modern antivirus applications can detect and remove computer viruses as well other harmful files and threats.<br /></p>\n<p><span style="font-size:24px">What does AV software look for?</span></p><p><span style="background:transparent;font-size:1rem;color:rgb(14, 16, 26);margin-top:0pt;margin-bottom:0pt;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:transparent;--darkreader-inline-color:#dbd8d4">Traditional AV software looks for\xa0</span><strong>malware</strong><span style="background:transparent;font-size:1rem;color:rgb(14, 16, 26);margin-top:0pt;margin-bottom:0pt;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:transparent;--darkreader-inline-color:#dbd8d4">\xa0with predefined malicious patterns or signatures. Malware is harmful software whose primary goal is to cause damage to a target machine, including but not limited to:</span></p>\n<ul>\n<li>Gain full access to a target machine.</li>\n<li>Steal sensitive information such as passwords.</li>\n<li>Encrypt files and cause damage to files.</li>\n<li>Inject other malicious software or unwanted advertisements.</li>\n<li>Used the compromised machine to perform further attacks such as botnet attacks.<br /></li>\n</ul>\n<h2><p style="font-size:16px"><span style="font-size:24px">AV vs other security products</span></p><p style="font-size:16px"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5c549500924ec576f953d9fc/room-content/ff53d2570143967d4073d0f9005d0928.png" style="float:left;width:272.429px;height:166.109px" class="note-float-left" /></p><p style="font-size:16px"></p></h2>\n<p>In addition to AV software, other host-based security solutions provide real-time protection to endpoint devices. Endpoint Detection and Response (EDR) is a security solution that provides real-time protection based on behavioral analytics. An antivirus application performs scanning, detecting, and removing malicious files. On the other hand, EDR monitors various security checks in the target machine, including file activities, memory, network connections, Windows registry, processes, etc.</p>\n<p>Modern Antivirus products are implemented to integrate the traditional Antivirus features and other advanced functionalities (similar to EDR functionalities) into one product to provide comprehensive protection against digital threats.\xa0<span style="font-size:1rem">For more information about Host-based security solutions, we suggest visiting the THM room:\xa0</span><a href="https://tryhackme.com/room/thelayoftheland" target="_blank">The Lay of the Land</a><span style="font-size:1rem">.</span></p><h2><p style="font-size:16px"><span style="font-size:24px">AV software in the past and present</span></p></h2>\n<p>McAfee Associates, Inc. started the first AV software implementation in 1987. It was called "VirusScan," and its main goal at that time was to remove a virus named "Brain" that infected John McAfee\'s computer.\xa0<span style="font-size:1rem">Later, other companies joined in the battle against viruses. AV software was called scanners, and they were command-line software that searched for malicious patterns in files.</span></p>\n<p>Since then, things have changed. AV software nowadays uses a Graphical User Interface (GUI) to perform scans for malicious files and other tasks.\xa0Malware programs have also expanded in scope and now target victims on Windows and other operating systems.<span style="font-size:1rem">\xa0Modern AV software supports most devices and platforms, including Windows, Linux, macOS, Android, and iOS. </span>Modern AV software has improved and become<span style="font-size:1rem">\xa0more intelligent and sophisticated, </span>as they pack a bundle of versatile features<span style="font-size:1rem">, including Antivirus, Anti-Exploit, Firewall, Encryption tool, etc.</span></p>\n<p>We will be discussing some AV features in the next task.</p>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2022-03-08T16:40:51.519Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What does AV mean?', 'hint': ''}, {'questionNo': 2, 'question': '<p>Which PC Antivirus vendor implemented the first AV software on the market?</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>Antivirus software is a _____-based security solution.</p>', 'hint': ''}]}, {'taskTitle': 'Antivirus Features', 'taskDesc': '<p><span style="font-size:24px">Antivirus Engines</span></p><p></p><p>An AV engine is responsible for finding and removing malicious code and files. Good AV software implements an effective and solid AV core\xa0that accurately and quickly analyzes<span style="font-size:1rem">\xa0</span>malicious files<span style="font-size:1rem">. Also, It should handle and support various file types, including archive files, where it can self-extract and inspect all compressed files.</span></p><p>Most AV products share the same common features but are implemented\xa0 differently, including but not limited to:</p><ul><li>Scanner</li><li>Detection techniques</li><li>Compressors and Archives</li><li>Unpackers</li><li>Emulators<br /></li></ul><p><span style="font-size:24px">Scanner</span></p><p>The scanner feature is included in most AV products: AV software runs and scans in real-time or on-demand. This feature is available in the GUI or through the command prompt. The user can use it whenever required to check files or directories. The scanning feature must support the most known malicious file types to detect and remove the threat. In addition, it also may support other types of scanning depending on the AV software, including vulnerabilities, emails, Windows memory, and Windows Registry.<br /></p><p><span style="font-size:24px">Detection techniques</span></p><p>An AV detection technique searches for and detects malicious files; different detection techniques can be used within the AV engine, including: </p><ul><li>Signature-based detection is the traditional AV technique that looks for predefined malicious patterns and signatures within files.</li><li>Heuristic detection is a more advanced technique that includes various behavioral methods to analyze suspicious files.</li><li>Dynamic detection is a technique that includes monitoring the system calls and APIs and testing and analyzing in an isolated environment.</li></ul><p>We will cover these techniques in the next task. A good AV engine is accurate and quickly detects malicious files with fewer false-positive results. We will showcase several AV products that provide inaccurate results and misclassify a file.<br /></p><p><span style="font-size:24px">Compressors and Archives</span></p><p>The "Compressors and Archives" feature should be included in any AV software. It must support and be able to deal with various system file types, including compressed or archived files: ZIP, TGZ, 7z, XAR, RAR, etc.\xa0Malicious code often tries to evade host-based security solutions by hiding in compressed files.<span style="font-size:1rem">\xa0For this reason, AV software must decompress and scan through all files </span>before a user opens a file within the archive<span style="font-size:1rem">.<br /></span></p><p><span style="font-size:24px">PE\xa0</span><span style="font-size:24px">(Portable Executable) Parsing and\xa0</span><span style="font-size:24px">Unpackers</span></p><p>Malware hides and packs its malicious code by compressing and encrypting it within a payload. It decompresses and decrypts itself during runtime to make it harder to perform static analysis. Thus, AV software must be able to detect and unpack most of the known packers (UPX, Armadillo, ASPack, etc.) before the runtime for static analysis. </p><p>Malware developers use various techniques, such as Packing, to shrink the size and change the malicious file\'s structure. Packing compresses the original executable file to make it harder to analyze. Therefore, AV software must have an unpacker feature to unpack protected or compressed executable files into the original code.<br /></p><p>Another feature that AV software must have is Windows Portable Executable (PE) header parser. Parsing PE of executable files helps distinguish malicious and legitimate software (.exe files). The PE file format in Windows (32 and 64 bits) contains various information and resources, such as object code, DLLs, icon files, font files, and core dumps.<br /></p><p><span style="font-size:24px">Emulators</span></p><p>An emulator is an Antivirus feature that does further analysis on suspicious files. Once an emulator receives a request, the emulator runs the suspect (exe, DLL, PDF, etc.) files in a virtualized and controlled environment. It monitors the executable files\' behavior during the execution, including the Windows APIs calls, Registry, and other Windows files. The following are examples of the artifacts that the emulator may collect: </p><ul><li>API calls </li><li>Memory dumps </li><li>Filesystem modifications</li><li>Log events </li><li>Running processes</li><li>Web requests<br /></li></ul><p>An emulator stops the execution of a file when enough artifacts are collected to detect malware.</p><p><span style="font-size:24px">Other common features</span></p><p><span style="font-size:1rem">The following are some common features found in AV products:</span></p><ul><li><span style="font-size:1rem">A self-protection driver to guard against malware attacking the actual AV.</span></li><li><span style="font-size:1rem">Firewall and network inspection functionality.</span></li><li><span style="font-size:1rem">Command-line and graphical interface tools.</span></li><li><span style="font-size:1rem">A daemon or service.</span></li><li><span style="font-size:1rem">A management console.<br /></span></li>\n</ul>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2022-03-09T11:22:11.444Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Which AV feature analyzes malware in a safe and isolated environment?</p>', 'hint': ''}, {'questionNo': 2, 'question': '<p>An _______ feature is a process of restoring or decrypting the compressed executable files to the original.\xa0</p>', 'hint': ''}, {'questionNo': 3, 'question': 'Read the above to proceed to the next task, where we discuss the AV detection techniques.', 'hint': ''}]}, {'taskTitle': 'Deploy the VM', 'taskDesc': '<p>We have provided a Windows machine 10 Pro to complete this room. The VM can be accessed through the in-browser feature. Once the VM is deployed, your browser should split into two windows, as the following:</p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5d617515c8cd8348d0b4e68f/room-content/cd4aae33ce8fdd617eb544a6321b4b38.png" style="width:100%" /><br /></p><p>If the browser doesn\'t split, you can select the "Show Split View" bottom located at the top of your browser.</p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5d617515c8cd8348d0b4e68f/room-content/dbd5b42819beff951254adaf5f202399.png" style="width:100%" /><br /></p><p><span style="font-size:1rem">You can also connect via RDP, make sure you deploy the AttackBox or connect\xa0</span><u>to the VPN</u><span style="font-size:1rem">.</span><br /></p><p><span style="font-size:1rem">Use the following credentials below.</span></p><p style="text-align:center">Machine IP:\xa0<span class="notion-enable-hover" style="text-align:left;font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em">MACHINE_IP</span><span style="font-size:1rem;text-align:left">\xa0</span><span style="font-size:1rem">\xa0 \xa0 \xa0 \xa0 \xa0 \xa0Username:\xa0</span><span class="notion-enable-hover" style="text-align:left;font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em">thm</span><span style="font-size:1rem;text-align:left">\xa0</span><span style="font-size:1rem">\xa0 \xa0 \xa0 \xa0\xa0</span><span style="font-size:1rem">Password:\xa0</span><span class="notion-enable-hover" style="text-align:left;font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em">TryHackM3</span><span style="font-size:1rem;text-align:left">\xa0</span></p>\n<p>\n</p><div class="terminal-container">\n\t<div class="terminal-content">\n\t\t<div class="terminal-top">Connect to the VM via the RDP client</div>\n\t\t<pre class="terminal-code" style="font-size:14px">           \n\t\t\t<code class="language-shell-session">user@machine$ xfreerdp /v:MACHINE_IP /u:thm /p:TryHackM3</code>\n\t    </pre></div></div>\n<p></p>', 'taskType': 'vm', 'taskNo': 4, 'taskCreated': '2022-04-19T06:04:31.975Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '630cc3bdacb6200043fccf5b', 'questions': [{'questionNo': 1, 'question': "<p>Once you've deployed the VM, it will take a few minutes to boot up. Then, progress to the next task!</p>", 'hint': ''}]}, {'taskTitle': 'AV Static  Detection', 'taskDesc': '<p><span style="font-size:1rem">Generally speaking, AV detection can be classified into three main approaches:</span><br /></p><ol><li>Static Detection</li><li>Dynamic Detection<br /></li><li>Heuristic and Behavioral Detection\xa0</li></ol><p><span style="font-size:24px">Static Detection</span></p><p>A static detection technique is the simplest type of Antivirus detection, which is based on predefined signatures of malicious files. Simply, it uses pattern-matching techniques in the detection, such as finding a unique string, CRC (Checksums), sequence of bytecode/Hex values, and Cryptographic hashes (MD5, SHA1, etc.).<br /></p><p>It then performs a set of comparisons between existing files within the operating system and a database of signatures. If the signature exists in the database, then it is considered malicious. This method is effective against static malware.</p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5c549500924ec576f953d9fc/room-content/06689aaadc7842fbe0cc1424e89e1b3c.png" alt="Static detection flow" /><br /></p><p style="text-align:center"></p><p>In this task, we will be using a signature-based detection method to see how antivirus products detect malicious files. It is important to note that this technique works against known malicious files only with pre-generated signatures in a database. Thus, the database needs to be updated from time to time.</p><p>We will use the\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">ClamAV</span><span style="font-size:1rem;background-color:transparent;--darkreader-inline-bgcolor:transparent">\xa0</span>antivirus software to demonstrate how signature-based detection identifies malicious files<span style="font-size:1rem">. The ClamAV software is pre-installed in the provided VM, and we can access it in the following path:\xa0</span><span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">c:\\Program Files\\ClamAV\\clamscan.exe</span><span style="background-color:transparent;font-size:1rem;--darkreader-inline-bgcolor:transparent">.</span><span style="font-size:1rem">\xa0We will also scan a couple of malware samples, which can be found on the desktop. The Malware samples folder contains the following files:</span></p><ol><li><span style="background:transparent;color:rgb(14, 16, 26);font-size:1rem;margin-top:0pt;margin-bottom:0pt;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:transparent;--darkreader-inline-color:#dbd8d4"><b>EICAR </b>is a test file containing ASCII strings used to test AV software\'s effectiveness instead of real malware that could damage your machine. For more information, you may visit the official EICAR website,\xa0</span><a target="_blank" href="https://www.eicar.org/?page_id=3950" class="editor-rtfLink">Here</a><span style="background:transparent;color:rgb(14, 16, 26);font-size:1rem;margin-top:0pt;margin-bottom:0pt;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:transparent;--darkreader-inline-color:#dbd8d4">.</span></li><li><b>Backdoor 1</b> is a C# program that uses a well-known technique to establish a reverse connection, including creating a process and executing a Metasploit Framework shellcode.</li><li><b>Backdoor 2</b> is a C# program that uses process injection and encryption to establish a reverse connection, including injecting a Metasploit shellcode into an existing and running process.</li><li><b>AV-Check</b> is a C# program that enumerates AV software in a target machine. Note that this file is not malicious. We will discuss this tool in more detail in task 6.\xa0</li><li><b>notes.txt</b> is a text file that contains a command line. Note that this file is not malicious.</li></ol><p>ClamAV comes with its database, and during the installation, we need to download the recently updated version. Let\'s try to scan the Malware sample folder using the\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">clamscan.exe</span>\xa0binary and check how ClamAV performs against these samples.</p>\n<p></p><div class="terminal-container"><div class="terminal-content"><div class="terminal-top">Command Prompt<br /></div><pre class="terminal-code" style="font-size:14px">           \n\t\t\t<code class="language-shell-session">c:\\&gt;"c:\\Program Files\\ClamAV\\clamscan.exe" c:\\Users\\thm\\Desktop\\Samples\nLoading:    22s, ETA:   0s [========================&gt;]    8.61M/8.61M sigs\nCompiling:   4s, ETA:   0s [========================&gt;]       41/41 tasks\n\nC:\\Users\\thm\\Desktop\\Samples\\AV-Check.exe: OK\nC:\\Users\\thm\\Desktop\\Samples\\backdoor1.exe: Win.Malware.Swrort-9872015-0 FOUND\nC:\\Users\\thm\\Desktop\\Samples\\backdoor2.exe: OK\nC:\\Users\\thm\\Desktop\\Samples\\eicar.com: Win.Test.EICAR_HDB-1 FOUND\nC:\\Users\\thm\\Desktop\\Samples\\notes.txt: OK</code>\n\t    </pre></div></div><p></p>\n<p>The above output shows that ClamAV software correctly analyzed and flagged two of our tested files (EICAR, backdoor1, AV-Check, and notes.txt) as malicious. However, it incorrectly identified the backdoor2 as non-malicious while it does.</p><p><span style="font-size:1rem">You can run\xa0</span><span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">clamscan.exe --debug &lt;file_to_scan&gt;</span><span style="font-size:1rem">, and you will see all modules loaded and used during the scanning. For example, it uses the unpacking method to split the files and look for a predefined malicious sequence of bytecode\xa0values, and that is how it was able to detect the C# backdoor 1. The bytecode value of the Metasploit shellcode used in backdoor 1 was previously identified and added to ClamAV\'s database.\xa0</span><br /></p><p>However, backdoor 2 uses an encryption technique (XOR) for the Metasploit shellcode, resulting in different sequences of bytecode\xa0values that it doesn\'t find in the ClamAV database.\xa0</p><p><span style="font-size:1rem">While the ClamAV was able to detect the EICAR.COM test file as malicious using the md5 signature-based technique. To confirm this, we can re-scan the EICAR.COM test file again in debug mode (--debug). At some point in the output, you will see the following message:</span></p><p>\n\n</p><pre style="font-size:14px"><code class="language-javascript">LibClamAV debug: FP SIGNATURE: 44d88612fea8a8f36de82e1278abb02f:68:Win.Test.EICAR_HDB-1  # Name: eicar.com, Type: CL_TYPE_TEXT_ASCII</code></pre>\n<p></p><p><span style="font-size:16px">\ufeffNow let\'s generate the md5 value of the EICAR.COM if it matches what we see in the previous message from the output. We will be using the sigtool for that:\xa0</span><br /></p>\n\n<p></p><div class="terminal-container"><div class="terminal-content"><div class="terminal-top">Command Prompt<br /></div><pre class="terminal-code" style="font-size:14px">           \n\t\t\t<code class="language-shell-session">c:\\&gt;"c:\\Program Files\\ClamAV\\sigtool.exe" --md5 c:\\Users\\thm\\Desktop\\Samples\\eicar.com\n44d88612fea8a8f36de82e1278abb02f:68:eicar.com</code>\n\t    </pre></div></div><span style="font-size:24px">\n</span><p></p>\n\n<p>If you closely check the generated MD5 value,\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">44d88612fea8a8f36de82e1278abb02f</span><span style="font-size:1rem">, it matches.<br /><br /></span></p><p><span style="font-size:24px">Create Your Own Signature Database\xa0</span></p><p>One of ClamAV\'s features is creating your own database, allowing you to include items not found in the official ClamAV database. Let\'s try to create a signature for Backdoor 2, which ClamAV already missed, and add it to a database. The following are the required steps:</p><ol><li>Generate an MD5 signature for the file.</li><li>Add the generated signature into a database with the extension ".hdb".</li><li>Re-scan the ClamAV against the file using our new database.</li></ol><p>First, we will be using the\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">sigtool</span><span style="background-color:transparent;font-size:1rem;--darkreader-inline-bgcolor:transparent">\xa0</span><span style="font-size:1rem">tool, which is included in the ClamAV suite, to generate an MD5 hash of\xa0</span><span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">backdoor2.exe</span><span style="font-size:1rem;background-color:transparent;--darkreader-inline-bgcolor:transparent">\xa0</span><span style="font-size:1rem">\xa0using the\xa0</span><span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">--md5</span><span style="background-color:transparent;font-size:1rem;--darkreader-inline-bgcolor:transparent">\xa0</span><span style="font-size:1rem">argument.</span><br /></p><p></p><div class="terminal-container"><div class="terminal-content"><div class="terminal-top"><span style="font-size:16px">Generate an MD5 hash</span><br /></div><pre class="terminal-code" style="font-size:14px">           \n\t\t\t<code class="language-shell-session">C:\\Users\\thm\\Desktop\\Samples&gt;"c:\\Program Files\\ClamAV\\sigtool.exe" --md5 backdoor2.exe\n75047189991b1d119fdb477fef333ceb:6144:backdoor2.exe\xa0</code>\n\t    </pre></div></div><p></p><p>As shown in the output, the generated hash string contains the following structure: <span style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:85%;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c" class="notion-enable-hover">Hash:Size-in-byte:FileName</span>.  Note that ClamAV uses the generated value in the comparison during the scan.</p><p>Now that we have the MD5 hash, now let\'s create our own database. We will use the <span style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:85%;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c" class="notion-enable-hover">sigtool</span> tool and save the output into a file using the <span style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:85%;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c" class="notion-enable-hover">&gt; thm.hdb</span> as follows, </p><p></p><div class="terminal-container"><div class="terminal-content"><div class="terminal-top">Generate our new database<br /></div><pre class="terminal-code" style="font-size:14px">           \n\t\t\t<code class="language-shell-session">C:\\Users\\thm\\Desktop\\Samples&gt;"c:\\Program Files\\ClamAV\\sigtool.exe" --md5 backdoor2.exe &gt; thm.hdb</code>\n\t    </pre></div></div><p></p><p>As a result, a <span style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:85%;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c" class="notion-enable-hover">thm.hdb</span> file will be created in the current directory that executes the command.\xa0</p><p><span style="font-size:1rem">We already know that ClamAV did not detect the backdoor2.exe using the official database! Now, let\'s re-scan it using the database we created, </span><span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:85%;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">thm.hdb</span><span style="font-size:1rem">, and see the result!</span></p><p></p><div class="terminal-container"><div class="terminal-content"><div class="terminal-top">Re-scanning backdoor2.exe using the new database!<br /></div><pre class="terminal-code" style="font-size:14px">           \n\t\t\t<code class="language-shell-session">C:\\Users\\thm\\Desktop\\Samples&gt;"c:\\Program Files\\ClamAV\\clamscan.exe" -d thm.hdb backdoor2.exe\nLoading:     0s, ETA:   0s [========================&gt;]        1/1 sigs\nCompiling:   0s, ETA:   0s [========================&gt;]       10/10 tasks\n\nC:\\Users\\thm\\Desktop\\Samples\\backdoor2.exe: backdoor2.exe.UNOFFICIAL FOUND</code>\n\t    </pre></div></div><p></p><p>As we expected,\xa0<span style="font-size:1rem">the </span><span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:85%;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">ClamAV</span><span style="font-size:1rem"> tool flagged the </span><span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:85%;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">backdoor2.exe</span><span style="font-size:1rem"> binary as malicious based on the database we provided. As a practice, add the AV-Check.exe\'s MD5 signature into the same database we already created, then check whether ClamAV can flag AV-Check.exe as malicious.<br /><br /></span></p><p><span style="font-size:24px">Yara Rules for Static Detection</span></p><p><span style="font-size:24px"></span></p><p>One of the tools that help in static detection is <a href="http://virustotal.github.io/yara/" target="_blank">Yara</a>. Yara is a tool that allows\xa0malware engineers to classify and detect malware. Yara uses rule-based detection, so in order to detect new malware, we need to create a new rule. ClamAV can also deal with Yara rules to detect malicious files. The rule will be the same as in our database in the previous section.\xa0</p><p>To create a rule, we need to examine and analyze the malware; based on the findings, we write a rule. Let\'s take AV-Check.exe as an example and write a rule for it.\xa0</p><p>First, let\'s analyze the file and list all human-readable strings in the binary using the strings tool. As a result, we will see all functions, variables, and nonsense strings. But, if you look closely, we can use some of the unique strings in our rules to detect this file in the future. The AV-Check uses a program database (.pdb), which contains a type and symbolic debugging information of the program during the compiling.</p>\n\n<p>\n</p><div class="terminal-container"><div class="terminal-content"><div class="terminal-top">Command Prompt<br /></div><pre class="terminal-code" style="font-size:14px">           \n\t\t\t<code class="language-shell-session">C:\\Users\\thm\\Desktop\\Samples&gt;strings AV-Check.exe | findstr pdb\nC:\\Users\\thm\\source\\repos\\AV-Check\\AV-Check\\obj\\Debug\\AV-Check.pdb</code>\n\t    </pre></div></div>\n<p></p>\n\n<p><span style="font-size:1rem">We will use the path in the previous command\'s output as our unique string example in the Yara rule that we will create. The signature could be something else in the real world, such as Registry keys, commands, etc. If you are not familiar with Yara, then we suggest checking the <a href="https://tryhackme.com/room/yara" target="_blank">Yara THM room</a>. The following is Yara\'s rule that we will use in our detection</span><span style="font-size:1rem">:</span></p>\n\n<p>\n</p><pre style="font-size:14px"><code class="language-Yara">rule thm_demo_rule {\n\tmeta:\n\t\tauthor = "THM: Intro-to-AV-Room"\n\t\tdescription = "Look at how the Yara rule works with ClamAV"\n\tstrings:\n\t\t$a = "C:\\\\Users\\\\thm\\\\source\\\\repos\\\\AV-Check\\\\AV-Check\\\\obj\\\\Debug\\\\AV-Check.pdb"\n\tcondition:\n\t\t$a\n}</code></pre>\n<p></p>\n\n<p>Let\'s explain this Yara\'s rule a bit more.</p><ul><li>The rule starts with\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">rule thm_demo_rule</span><span style="font-size:1rem">,\xa0</span>which is the name of our rule. ClamAV uses this name if a rule matches.</li><li>The metadata section, which is general information, contains the author and description, which the user can fill.</li><li>The strings section contains the strings or bytecode that we are looking for. We are using the C# program\'s database path in this case. Notice that we add an extra\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">\\</span><span style="font-size:1rem">\xa0in that path to escape the special character, so it does not break the rule.\xa0</span></li><li>In the condition section, we specify if the defined string is found in the string section, then flag the file.</li></ul><p>Note that Yara rules must store in a\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">.yara</span>\xa0extension file for ClamAV to deal with it. Let\'s re-scan the\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">c:\\Users\\thm\\Desktop\\Samples</span>\xa0folder again using the Yara rule we created. You can find a copy of the Yara rule on the desktop at\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">c:\\Users\\thm\\Desktop\\Files\\thm-demo-1.yara</span><span style="font-size:1rem">.</span></p>\n\n<p></p><div class="terminal-container"><div class="terminal-content"><div class="terminal-top">Scanning using the Yara rule<br /></div><pre class="terminal-code" style="font-size:14px">           \n\t\t\t<code class="language-shell-session">C:\\Users\\thm&gt;"c:\\Program Files\\ClamAV\\clamscan.exe" -d Desktop\\Files\\thm-demo-1.yara Desktop\\Samples\nLoading:     0s, ETA:   0s [========================&gt;]        1/1 sigs\nCompiling:   0s, ETA:   0s [========================&gt;]       40/40 tasks\n\nC:\\Users\\thm\\Desktop\\Samples\\AV-Check.exe: YARA.thm_demo_rule.UNOFFICIAL FOUND\nC:\\Users\\thm\\Desktop\\Samples\\backdoor1.exe: OK\nC:\\Users\\thm\\Desktop\\Samples\\backdoor2.exe: OK\nC:\\Users\\thm\\Desktop\\Samples\\eicar.com: OK\nC:\\Users\\thm\\Desktop\\Samples\\notes.txt: YARA.thm_demo_rule.UNOFFICIAL FOUND</code>\n\t    </pre></div></div><p></p>\n\n<p>As a result, ClamAV can detect the\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">AV-Check.exe</span>\xa0binary as malicious based on the Yara rule we provide. However, ClamAV gave a false-positive result where it flagged the\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">notes.txt</span>\xa0file as malicious. If we open the\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">notes.txt</span>\xa0file, we can see that the text contains the same path we specified in the rule.</p><p>Let\'s improve our Yara rule to reduce the false-positive result. We will be specifying the file type in our rule. Often, the types of a file can be identified using magic numbers, which are the first two bytes of the binary. For example, <a href="https://en.wikipedia.org/wiki/DOS_MZ_executable" target="_blank">executable files</a> (.exe) always start with the ASCII "MZ" value or "4D 5A" in hex.</p><p>To confirm this, let\'s use the <a href="https://mh-nexus.de/en/hxd/" target="_blank">HxD</a> application, which is a freeware Hex Editor, to examine the AV-Check.exe binary and see the first two bytes. Note that the HxD is\xa0<span style="font-size:1rem">already available in the provided VM.</span></p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5d617515c8cd8348d0b4e68f/room-content/44dfc0fa904b0e4a9dfe983001d38a2e.png" alt="HxD Application" style="width:805px;height:321.641px" /><span style="font-size:1rem"><br /></span></p><p style="text-align:center"><span style="font-size:1rem">\n\n</span></p>\n\n<p>Knowing this will help improve the detection, let\'s include this in our Yara rule to flag only the .exe files that contain our signature string as malicious. The following is the improved Yara rule:</p><p>\n\n</p><pre style="font-size:14px"><code class="language-yara">rule thm_demo_rule {\n\tmeta:\n\t\tauthor = "THM: Intro-to-AV-Room"\n\t\tdescription = "Look at how the Yara rule works with ClamAV"\n\tstrings:\n\t\t$a = "C:\\\\Users\\\\thm\\\\source\\\\repos\\\\AV-Check\\\\AV-Check\\\\obj\\\\Debug\\\\AV-Check.pdb"\n\t\t$b = "MZ"\n\tcondition:\n\t\t$b at 0 and $a\n}</code></pre>\n<p></p>\n\n\n<p></p><p>In the new Yara rule, we defined a unique string ($b) equal to the MZ as an identifier for the .exe file type. We also updated the condition section, which now includes the following conditions:</p><ol><li style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt;list-style-type:decimal;--darkreader-inline-color:#dbd8d4;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:transparent"><span style="background:transparent;margin-top:0pt;margin-bottom:0pt;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:transparent">If the string "MZ" is found at the 0 location, the file\'s beginning.</span></li><li style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt;list-style-type:decimal;--darkreader-inline-color:#dbd8d4;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:transparent">If the unique string (the path) occurs within the binary.</li><li style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt;list-style-type:decimal;--darkreader-inline-color:#dbd8d4;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:transparent">In the condition section, we used the\xa0<span style="color:rgb(33, 37, 41);--darkreader-inline-color:#d1cdc7">\xa0</span><span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">AND</span><span style="color:rgb(33, 37, 41);--darkreader-inline-color:#d1cdc7">\xa0operator for both\xa0</span>definitions in 1 and 2 are found, then we have a match.\xa0</li></ol><p>You can find the updated rule in\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">Desktop\\Files\\thm-demo-2.yara</span><span style="font-size:1rem">. Now that we have our updated Yara rule, now let\'s try it again.</span></p>\n\n<p></p><div class="terminal-container"><div class="terminal-content"><div class="terminal-top">Scanning using the Yara rule<br /></div><pre class="terminal-code" style="font-size:14px">           \n\t\t\t<code class="language-shell-session">C:\\Users\\thm&gt;"c:\\Program Files\\ClamAV\\clamscan.exe" -d Desktop\\Files\\thm-demo-2.yara Desktop\\Samples\nLoading:     0s, ETA:   0s [========================&gt;]        1/1 sigs\nCompiling:   0s, ETA:   0s [========================&gt;]       40/40 tasks\n\nC:\\Users\\thm\\Desktop\\Samples\\AV-Check.exe: YARA.thm_demo_rule.UNOFFICIAL FOUND\nC:\\Users\\thm\\Desktop\\Samples\\backdoor1.exe: OK\nC:\\Users\\thm\\Desktop\\Samples\\backdoor2.exe: OK\nC:\\Users\\thm\\Desktop\\Samples\\eicar.com: OK\nC:\\Users\\thm\\Desktop\\Samples\\notes.txt: OK</code>\n\t    </pre></div></div><p></p>\n<p>The output shows we improved our Yara rule to reduce the false-positive results. That was a simple example of how AV software works. Thus, AV software vendors work hard to fight against malware and improve their products and database to enhance the performance and accuracy of results.</p><p>The drawback of the signature-based detection is that files<span style="font-size:1rem">\xa0will have a different hash value if the binary is modified.\xa0</span>Therefore, it is easy for someone to bypass signature-based detection techniques if they know what AV software looks for and how to analyze binaries, as shown in later rooms.</p>', 'taskType': 'none', 'taskNo': 5, 'taskCreated': '2022-03-09T08:53:55.529Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What is the\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">sigtool</span>\xa0tool output to generate an MD5 of the\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em;--darkreader-inline-bgimage:initial;--darkreader-inline-bgcolor:rgba(96, 104, 108, 0.15);--darkreader-inline-color:#ec5c5c">AV-Check.exe</span>\xa0binary?', 'hint': '"C:\\Program Files\\ClamAV\\sigtool.exe" --md5 AV-Check.exe'}, {'questionNo': 2, 'question': 'Use the strings tool to list all human-readable strings of the AV-Check binary. What is the flag?', 'hint': 'The flag starts with "THM" characters. You can use findstr to find it: strings <file.exe> | findstr "THM"'}]}, {'taskTitle': 'Other Detection Techniques', 'taskDesc': '<p>The concept of static detection is relatively simple. In this section, we will discuss the different types of detection techniques.<br /><br /></p><p><span style="font-size:24px">Dynamic Detection</span><br /></p><p>The dynamic detection approach is advanced and more complicated than static detection. Dynamic detection is focused more on checking files at runtime using different methods. The following diagram shows the dynamic detection scanning flow:</p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5c549500924ec576f953d9fc/room-content/5d0d8cd90a2c4b2ce035af1f3b735563.png" alt="Dynamic detection flow" /><br /></p>\n<p style="text-align:center"></p><p style="text-align:left">The first method is by monitoring Windows APIs. The detection engine inspects Windows application calls and monitors Windows API calls using Windows <a href="https://docs.microsoft.com/en-us/windows/win32/winmsg/about-hooks" target="_blank">Hooks</a>. </p><p style="text-align:left">Another method for dynamic detection is Sandboxing. A sandbox is a virtualized environment used to run malicious files separated from the host computer. This is usually done in an isolated environment, and the primary goal is to analyze how the malicious software acts in the system. Once the malicious software is confirmed, a unique signature and rule will be created based on the characteristic of the binary. Finally, a new update will be pushed into the cloud database for future use.</p><p style="text-align:left">This type of detection also has drawbacks because it requires executing and running the malicious software for a limited time in the virtual environment to protect the system resources. As with other detection techniques, dynamic detection can be bypassed. Malware developers implement their software to not work within the virtual or simulated environment to avoid dynamic analysis. For example, they check if the system spawns a real process of executing the software before running malicious activities or let the software wait sometime before execution.</p><p style="text-align:left">For more information about sandbox evasion, we suggest checking the THM room: <a href="https://tryhackme.com/room/sandboxevasion" target="_blank">Sandbox Evasion</a>!<br /><br /></p><p><span style="font-size:24px">Heuristic and Behavioral Detection</span><br /></p><p>Heuristic and behavioral detection have become essential in today\'s modern AV products. Modern AV software relies on this type of detection to detect malicious software. The heuristic analysis uses various techniques, including static and dynamic heuristic methods:</p><ol><li>Static Heuristic Analysis is a process of decompiling (if possible) and extracting the source code of the malicious software. Then, the extracted source code is compared to other well-known virus source codes. These source codes are previously known and predefined in a heuristic database. If a match meets or exceeds a threshold percentage, the code is flagged as malicious.</li><li style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt;list-style-type:decimal"><span style="background:transparent;margin-top:0pt;margin-bottom:0pt">Dynamic Heuristic Analysis is based on predefined behavioral rules. Security researchers analyzed suspicious software in isolated and secured environments. Based on their findings, they flagged the software as malicious. Then, behavioral rules are created to match the software\'s malicious activities within a target machine.</span></li></ol><p style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt;list-style-type:decimal">The following are examples of behavioral rules:\xa0</p><p></p><ul><li style="background:transparent;margin-top:0pt;margin-bottom:0pt;list-style-type:disc">If a process tries to interact with the LSASS.exe process that contains users\' \nNTLM hashes, Kerberos tickets, and more</li><li style="background:transparent;margin-top:0pt;margin-bottom:0pt;list-style-type:disc">If a process opens a listening port and waits to receive commands from a Command \nand Control (C2) server</li></ul><p style="background:transparent;margin-top:0pt;margin-bottom:0pt;list-style-type:disc">The following diagram shows the Heuristic and behavioral\xa0detection scanning flow:</p><p style="text-align:center;background:transparent;margin-top:0pt;margin-bottom:0pt;list-style-type:disc"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5c549500924ec576f953d9fc/room-content/bbdeb1fd3e1140a20ebee8553b194054.png" alt="Heuristic and behavioral detection flow" /><br /></p><p style="text-align:center"><br /></p><p><span style="font-size:24px">Summing up detection methods</span><br /></p><p>Let\'s summarize how modern AV software works as one unit, including all components, and combines various features and detection techniques to implement its AV engine. The following is an example of the components of an antivirus engine:</p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5c549500924ec576f953d9fc/room-content/61b1c8a009202170cf3deee3cefe7ccf.png" alt="Detection methods summary" /><br /></p><p style="text-align:center"></p><p style="text-align:left"><span style="font-size:1rem">In the diagram, you can see a\xa0</span>suspicious<span style="font-size:1rem">\xa0</span><span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em">Foobar.zip</span><span style="background-color:transparent;font-size:1rem">\xa0</span><span style="font-size:1rem">file is passed to AV software to scan. AV software recognizes that it is a compressed file (.zip). </span><span style="font-size:1rem">Since the software supports .zip files, it\xa0</span><span style="font-size:1rem">applies an un-archiver feature to extract the files (</span><span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em">Foobar.exe</span><span style="font-size:1rem">). Next, it identifies the file type to know which module to work with and then performs a PE parsing operation to pull the binary\'s information and other characteristic features. </span>Next, it checks whether the file is packed; if it is, it unpacks the code.<span style="font-size:1rem">\xa0Finally, it passes the collected information and the binary to the AV engine, where it tries to detect if it is malicious and gives us the result.</span></p>', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2022-03-17T09:21:25.453Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Which detection method is used to analyze malicious software inside virtual environments?', 'hint': ''}]}, {'taskTitle': 'AV Testing and Fingerprinting ', 'taskDesc': '<p><span style="font-size:24px">AV Vendors</span></p><p><span style="font-size:16px">Many AV vendors in the market mainly focus on implementing a security product for home or enterprise users. Modern AV software has improved and now combines antivirus capabilities with other security features such as Firewall, Encryption, Anti-spam, EDR, vulnerability scanning, VPN, etc. </span></p><p><span style="font-size:16px">It is important to note that it is hard to recommend which AV software is the best. It all comes down to user preferences and experience. Nowadays, AV vendors focus on business security in addition to end-user security.\xa0</span>We suggest checking the<a href="https://www.av-comparatives.org/list-of-enterprise-av-vendors-pc/" target="_blank"> AV comparatives website</a> for more details on enterprise AV vendors.<br /></p><p><span style="font-size:24px">AV Testing Environment\xa0</span><br /></p><p>AV testing environments are a great place to check suspicious or malicious files. You can upload files to get them scanned against various AV software vendors. Moreover, platforms such as VirusTotal use various techniques and provide results within seconds. As a red teamer or a pentester, we must test a payload against the most well-known AV applications to check the effectiveness of the bypass technique.<br /></p><p><span style="font-size:24px">VirusTotal\xa0</span><span style="font-size:1rem"><br /></span></p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5d617515c8cd8348d0b4e68f/room-content/368287c08435172ac9740a2a68e4e3fa.png" style="width:407px;height:78.6826px" /><br /></p><p>VirusTotal is a well-known web-based scanning platform for checking suspicious files. It allows users to upload files to be scanned with over 70 antivirus detection engines. VirusTotal passes the uploaded files to the Antivirus engines to be checked, returns the result, and reports whether it is malicious or not. Many checkpoints are applied, including checking for blacklisted URLs or services, signatures, binary analysis, behavioral analysis, as well as checking for API calls. In addition, the binary will be run and checked in a simulated and isolated environment for better results. For more information and to check other features, you may visit the <a href="https://www.virustotal.com/" target="_blank">VirusTotal </a>website.<br /><br /></p><p></p><ul style="box-sizing:border-box;margin-top:0px;margin-bottom:1rem;color:rgb(33, 37, 41);font-family:Ubuntu, monospace;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:left;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial"></ul><p></p><p style="box-sizing:border-box;margin-top:0px;margin-bottom:1rem;color:rgb(33, 37, 41);font-family:Ubuntu, monospace;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:left;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial"><span style="box-sizing:border-box;font-size:24px">VirusTotal alternatives</span><br /></p><p><strong>Important Note:</strong><span style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt">\xa0VirusTotal is a handy scanning platform with great features, but it has a sharing policy. All scanned results will be passed and shared with antivirus vendors to improve their products and update their databases for known malware. As a red teamer, this will burn a dropper or a payload you use in engagements. Thus, alternative solutions are available for testing against various security product vendors, and the most important advantage is that they do not have a sharing policy. However, there are other limitations. You will have a limited number of files to scan per day; otherwise, a\xa0</span><span style="color:rgb(14, 16, 26);font-size:1rem">subscription</span><span style="color:rgb(14, 16, 26);font-size:1rem">\xa0is needed\xa0</span><span style="background-color:transparent;color:rgb(14, 16, 26);font-size:1rem">for unlimited testing. For those reasons, we recommend you only test your malware on sites that do not share information, such as:</span></p><ul><li><a href="https://antiscan.me/" target="_blank">AntiscanMe</a>\xa0(6 free scans a day)</li><li><a href="https://virusscan.jotti.org/" target="_blank">Virus Scan Jotti\'s malware scan</a><br /><br /></li></ul><p><span style="font-size:24px">Fingerprinting AV software</span><br /></p><p>As a red teamer, we do not know what AV software is in place once we gain initial access to a target machine. Therefore, it is important to find and identify what host-based security products are installed, including AV software. AV fingerprinting is an essential process to determine which AV vendor is present. Knowing which AV software is installed is also quite helpful in creating the same environment to test bypass techniques.\xa0\xa0<br /></p><p>This section introduces different ways to look at and identify antivirus software based on static artifacts, including service names, process names, domain names, registry keys, and filesystems.</p><p>The following table contains well-known and commonly used AV software.\xa0</p><table class="table table-bordered"><tbody><tr><td><b>Antivirus Name</b></td><td><b>Service Name</b></td><td><b>Process Name</b></td></tr><tr><td>Microsoft Defender</td><td>WinDefend</td><td>MSMpEng.exe</td></tr><tr><td>Trend Micro</td><td>TMBMSRV</td><td>TMBMSRV.exe<br /></td></tr><tr><td>Avira</td><td>AntivirService, Avira.ServiceHost</td><td>avguard.exe, Avira.ServiceHost.exe</td></tr><tr><td>Bitdefender</td><td>VSSERV</td><td>bdagent.exe, vsserv.exe</td></tr><tr><td>Kaspersky</td><td>AVP&lt;Version #&gt;</td><td>avp.exe, ksde.exe<br /></td></tr><tr><td>AVG</td><td>AVG Antivirus</td><td>AVGSvc.exe</td></tr><tr><td>Norton</td><td>Norton Security</td><td>NortonSecurity.exe</td></tr><tr><td>McAfee</td><td>McAPExe, Mfemms</td><td>MCAPExe.exe, mfemms.exe</td></tr><tr><td>Panda</td><td>PavPrSvr</td><td>PavPrSvr.exe</td></tr><tr><td>Avast</td><td>Avast Antivirus</td><td>afwServ.exe, AvastSvc.exe</td></tr></tbody></table><br /><p><span style="font-size:24px">SharpEDRChecker</span></p><p><span style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt">One way to fingerprint AV is by using public tools such as\xa0</span><a target="_blank" href="https://github.com/PwnDexter/SharpEDRChecker" class="editor-rtfLink">SharpEDRChecker</a><span style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt">. It is written in C# and performs various checks on a target machine, including checks for AV software, like running processes, files\' metadata, loaded DLL files, Registry keys, services, directories, and files.</span></p><p><span style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt">We have pre-downloaded the SharpEDRChecker from the <a href="https://github.com/PwnDexter/SharpEDRChecker" target="_blank">GitHub repo</a>\xa0so that we can use it in the attached VM. Now we need to compile the project, and we have already created a shortcut to the project on the desktop (SharpEDRChecker). To do so, double-click on it to open it in Microsoft Visual Studio 2022. Now that we have our project ready, we need to compile it, as shown in the following screenshot:</span></p><p style="text-align:left"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5d617515c8cd8348d0b4e68f/room-content/9f2dc2083d2a8227b688cef623ac9bf8.png" /><span style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt"><br /></span></p><div style="text-align:center"></div><p>Once it is compiled, we can find the path of the compiled version in the output section, as highlighted in step 3. We also added a copy of the compiled version in the\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:85%;padding:0.2em 0.4em">C:\\Users\\thm\\Desktop\\Files</span><span style="font-size:1rem"> directory.\xa0</span><span style="font-size:1rem">Now let\'s try to run it and see the result as follows:</span></p>\n\n<p>\n</p><table style="border-collapse:collapse;width:100%">\n<tbody>\n<tr>\n<td style="width:26.2964%">\n<div class="terminal-container"><div class="terminal-content"><div class="terminal-top">Command Prompt!</div><pre class="terminal-code" style="font-size:14px">           \n<code class="language-shell-session">C:\\&gt; SharpEDRChecker.exe\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n</div>\n</div>\n</td>\n<td style="width:2.2708%;text-align:center"><span style="font-size:24px">➜</span></td>\n<td style="width:71.4327%">\n<div class="terminal-container"><div class="terminal-content"><div class="terminal-top">SharpEDRChecker\'s Summary</div><pre class="terminal-code" style="font-size:14px">           \n<code class="language-shell-session">[!] Directory Summary:\n   [-] C:\\Program Files\\Windows Defender : defender\n   [-] C:\\Program Files\\Windows Defender Advanced Threat Protection : defender, threat\n   [-] C:\\Program Files (x86)\\Windows Defender : defender\n\n[!] Service Summary:\n   [-] PsShutdownSvc : sysinternal\n   [-] Sense : defender, threat\n   [-] WdNisSvc : defender, nissrv\n   [-] WinDefend : antimalware, defender, malware, msmpeng\n   [-] wscsvc : antivirus</code>\n</pre></div></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n\n\n\n\n<p><span style="font-size:1rem">As a result, the Windows Defender is found based on folders and services. Note that this program may be flagged by AV software as malicious since it does various checks and APIs calls.\xa0<br /></span></p><p><span style="font-size:24px">C# Fingerprint checks</span></p><p><span style="font-size:16px">Another way to enumerate AV software is by coding our own program.</span>\xa0We have prepared a C# program in the provided Windows 10 Pro VM, so we can do some hands-on experiments! You can find the project\'s icon on the desktop (AV-Check) and double-click it to open it using Microsoft Visual Studio 2022.\xa0</p><p>The following C# code is straightforward, and its primary goal is to determine whether AV software is installed based on a predefined list of well-known AV applications.<br /></p><span style="font-size:16px">\n</span><p>\n</p><pre style="font-size:14px"><code class="language-csharp">using System;\nusing System.Management;\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        var status = false;\n        Console.WriteLine("[+] Antivirus check is running .. ");\n        string[] AV_Check = { \n            "MsMpEng.exe", "AdAwareService.exe", "afwServ.exe", "avguard.exe", "AVGSvc.exe", \n            "bdagent.exe", "BullGuardCore.exe", "ekrn.exe", "fshoster32.exe", "GDScan.exe", \n            "avp.exe", "K7CrvSvc.exe", "McAPExe.exe", "NortonSecurity.exe", "PavFnSvr.exe", \n            "SavService.exe", "EnterpriseService.exe", "WRSA.exe", "ZAPrivacyService.exe" \n        };\n        var searcher = new ManagementObjectSearcher("select * from win32_process");\n        var processList = searcher.Get();\n        int i = 0;\n        foreach (var process in processList)\n        {\n            int _index = Array.IndexOf(AV_Check, process["Name"].ToString());\n            if (_index &gt; -1)\n            {\n                Console.WriteLine("--AV Found: {0}", process["Name"].ToString());\n                status = true;\n            }\n            i++;\n        }\n        if (!status) { Console.WriteLine("--AV software is not found!");  }\n    }\n}</code></pre><p>Let\'s explain the code a bit more. We have predefined a list of well-known AV applications in the\xa0<span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em">AV_Check</span><span style="font-size:1rem">\xa0</span><span style="font-size:1rem">array within our code, which is taken from the previous section, where we discussed fingerprinting AV software (table above). Then, we use the Windows Management Instrumentation Command-Line (WMIC) query (</span><span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:85%;padding:0.2em 0.4em">select * from win32_process</span><span style="font-size:1rem">) to list all currently running processes in the target machine and store them in the\xa0</span><span class="notion-enable-hover" style="font-family:SFMono-Regular, Menlo, Consolas, &quot;PT Mono&quot;, &quot;Liberation Mono&quot;, Courier, monospace;line-height:normal;background:rgba(135, 131, 120, 0.15);color:rgb(235, 87, 87);border-radius:3px;font-size:13.6px;padding:0.2em 0.4em">processList</span><span style="font-size:1rem">\xa0variable</span><span style="font-size:1rem">. Next, we go through the currently running processes and compare if they exist in the </span>predefined<span style="font-size:1rem">\xa0array. If a match is found, then we have AV software installed.</span></p><p><span style="font-size:16px">The C# program utilizes a WMIC object to list current running processes, which may be monitored by AV software. If AV software is poorly implemented to monitor the WMIC queries or Windows APIs, it may cause false-positive results in scanning our C# program. </span></p><p>Let\'s compile an x86 version of the C# program, upload it to the VirusTotal website, and check the results!\xa0<span style="font-size:1rem">To compile the C# program in the Microsoft Visual Studio 2022, select <b>Build </b>from the bar menu and choose the <b>Build Solution</b> option. Then, if it complied correctly, you can find the path of the compiled version in the output section, as highlighted in step 3 in the screenshot below.</span></p><p></p><div style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5d617515c8cd8348d0b4e68f/room-content/4abf4090797989e9457af9a2cb18a35b.png" alt="Compiling the C# project" /><br /></div><p><span></span></p><div style="text-align:left"><span style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt">If we upload the AV-Check program to the\xa0</span><a target="_blank" href="https://www.virustotal.com/gui/home/upload" class="editor-rtfLink">VirusTotal website</a><span style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt">\xa0and check the result, surprisingly, VirusTotal showed that two AV vendors (MaxSecure and SecureAge APEX) flagged our program as malicious! Thus, this is a false-positive result where it incorrectly identifies a file as malicious where it is not. One of the possible reasons is that these AV vendors\' software uses a machine-learning classifier or rule-based detection method that is poorly implemented. For more details about the actual submission report, see\xa0</span><a target="_blank" href="https://www.virustotal.com/gui/file/5f7d3e6cf58596a0186d89c20004c76805769f9ef93dc39e346e7331eee9e7ff?nocache=1" class="editor-rtfLink">here</a><span style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt">. There are four main sections: Detection, Details, Behavior, and Community. If we check the Behavior section, we can see all calls of Windows APIs, Registry keys, modules, and the WMIC query.</span><br /></div><p></p><p style="text-align:center;box-sizing:border-box;margin-top:0px;margin-bottom:1rem;color:rgb(33, 37, 41);font-family:Ubuntu, monospace;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5d617515c8cd8348d0b4e68f/room-content/87289129012d58c2d77c1791131333c3.png" alt="VirusTotal check" style="width:100%" /><span style="box-sizing:border-box;font-size:1rem"><br /></span></p><p><span style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt">In the Detection section, there are Sigma rules that, if a system event during execution is matched (in the sandbox environment), consider the file malicious. This result is likely based on the rules; VirusTotal flagged our program because of the\xa0</span><a target="_blank" href="https://pentestlaboratories.com/2021/12/08/process-ghosting/" class="editor-rtfLink">Process Ghosting technique</a><span style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt">, as shown in the following screenshot.</span><br /></p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5d617515c8cd8348d0b4e68f/room-content/c4de9def10a394bc77b0b05580cae8e5.png" alt="VirusTotal check" style="width:883.333px;height:302.389px" /><span style="font-size:1rem"><br /></span></p><p><span style="font-size:1rem">Now let\'s re-compile the C# program using an x64 CPU and check if the check engines act differently. In our submission attempt this time, three AV vendors\' software (Cyren AV is added to the list) flagged the file as malicious.\xa0</span><span style="background:transparent;font-size:1rem;color:rgb(14, 16, 26);margin-top:0pt;margin-bottom:0pt">For more details about the actual submission report, look\xa0</span><a target="_blank" href="https://www.virustotal.com/gui/file/b092173827888ed62adea0c2bf4f451175898d158608cf7090e668952314e308?nocache=1" class="editor-rtfLink">here</a><span style="background:transparent;font-size:1rem;color:rgb(14, 16, 26);margin-top:0pt;margin-bottom:0pt">.\xa0</span></p><p></p><div style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5d617515c8cd8348d0b4e68f/room-content/6992f821933117c890b129f63cbbcebf.png" alt="VirusTotal check" style="width:100%" /></div><div style="text-align:center"><br /></div><div style="text-align:left"><strong>Note:</strong><span style="color:rgb(14, 16, 26);background:transparent;margin-top:0pt;margin-bottom:0pt">\xa0if you try to submit a file to the VirusTotal website, it may give you a different result. Keep in mind that VirusTotal shares submission reports with the Antivirus vendors to improve their AV detection engines, including false-positive results.</span></div><p></p>', 'taskType': 'none', 'taskNo': 7, 'taskCreated': '2022-03-09T11:22:41.698Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'For the C# AV fingerprint, try to rewrite the code in a different language, such as Python, and check whether VirusTotal flag it as malicious.', 'hint': ''}, {'questionNo': 2, 'question': 'Read the Above!', 'hint': ''}]}, {'taskTitle': 'Conclusion', 'taskDesc': '<p><span style="font-size:24px">Recap</span></p><p>In this room, we covered Antivirus software and its detection approaches. As a red teamer, it is important to know how AV software works and detects malicious applications to be able to implement bypass techniques.</p><p>We also discussed the static detection technique in detail and showcased how ClamAV, an open-source Antivirus, detects malicious files using static analysis. Additionally, we showed how to create your own database and use Yara rules to detect malicious files that are not detected by the official database.</p><p>Once we obtain access to a target, it is essential to enumerate the target machine before performing further actions, such as privilege escalation or lateral movement. The reason is to not trigger alerts for suspicious activities, which may cause losing access to the target machine. Thus, we introduced two methods to practice AV fingerprinting using public and private tools.</p>', 'taskType': 'none', 'taskNo': 8, 'taskCreated': '2022-03-09T11:27:23.562Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<div>Congrats on completing the room, and keep learning!</div>', 'hint': ''}]}]}