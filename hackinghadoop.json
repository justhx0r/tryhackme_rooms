{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/88a78308312cbba547f0e0fa5f6025bd.png', 'title': 'Hacking Hadoop', 'description': 'Learning about the security failings commonly seen in Hadoop', 'code': 'hackinghadoop', 'users': 1591, 'tags': ['security', 'hadoop', 'datalake', 'bigdata', 'hdfs', 'yarn'], 'type': 'walkthrough', 'difficulty': 'hard', 'userCompleted': False, 'upVotes': 95, 'created': '2021-10-08T12:23:57.703Z', 'published': '2022-03-02T19:00:00.302Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://assets.tryhackme.com/room-banners/hadoop.png', 'creator': 'am03bam4n', 'tasks': [{'taskTitle': 'Connect to the datalake', 'taskDesc': '<div style="font-size:1rem"><span style="font-size:1rem">This lab simulates a network through the use of Docker. To access this network, you will first have to configure your routing to enable you to see the network.</span></div><div style="font-size:1rem"><span style="font-size:1rem"><br /></span></div><div style="font-size:1rem"><span style="font-size:1rem">The lab lives in the 172.23.0.0/24 range. You will have to configure this route to the Hadoop network. Since THM does not currently support hosting full networks, we are cheating a bit by hosting a full network using Docker and then using another VPN file to connect into that hosted network. Before starting the lab, please download the second VPN file. You will start this VPN once your machine is active. Note that if you are using your own machine for hacking, you will have to first start the normal THM VPN and then in another window start the second VPN. Download the second VPN file and follow the steps in the next task.<br /></span></div><div style="font-size:1rem"><span style="font-size:1rem"><br /></span></div><div style="font-size:1rem"><span style="font-size:1rem"><i>Notes:</i></span></div><ul><li style="font-size:1rem"><span style="font-size:1rem">you need to wait <b>10 minutes</b> after the lab has started for the cluster to become fully active.</span></li><li style="font-size:1rem"><span style="font-size:1rem">you can confirm that the lab is ready by running the scan of your choice to confirm that port 8080 is open on 172.23.0.3.<br /><i></i><br /></span></li></ul><i>The network structure is as follows:</i><p></p><ul><li><code>172.23.0.3</code> - This is your primary target, an edge node in the Hadoop network.</li><li><code>172.23.0.4</code> - In Hadoop terms, this is called the "master" node. Your final flag is here and root access signifies full Hadoop compromise.</li><li><code>172.23.0.2</code> - This is the simulated Kerberos server. This server is out of scope for this challenge.</li></ul>', 'taskType': 'downloadable', 'taskNo': 1, 'taskCreated': '2021-10-08T12:37:53.136Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '616b5987cce652004e79c21b', 'questions': [{'questionNo': 1, 'question': '<i>Read the above</i>', 'hint': ''}]}, {'taskTitle': 'Understanding the datalake', 'taskDesc': '<p>Welcome to the Hadoop network!</p><p>Start by loading this lab. </p><p>Once your lab has started, before you can use the VPN from the previous task, you will have to add the machine as a static host. This can be done using the following command:</p><p><code>sudo bash -c "echo \'MACHINE_IP thm_hadoop_network.net\' &gt;&gt; /etc/hosts"</code><br /></p><p>Once this is done and you have given the lab some time to boot, you can start your Hadoop network VPN using the following command:</p><p><code>sudo openvpn\xa0thmhadoopvpn.ovpn</code><br /></p><p>Verify that your lab is up and running by trying to ping\xa0<code>172.23.0.3</code><span style="font-size:1rem">\xa0and verify that Hadoop has finished booting by ensuring port 8080 is open on this host.</span></p><p>In this challenge, you will be guided to compromising a datalake. Most large organisations out there have at least one datalake, some even more, and the most widely used datalake technology out there is Hadoop!</p><p>This task will give you a brief overview of Hadoop before you jump into your hacking activities.</p><p><i><span style="font-size:24px">Hadoop terminology?</span></i></p><p>There are some key terms used in Hadoop that you should know to make this hacking journey easier. It should be noted that Hadoop still makes use of the terms master and slave, since primary and secondary already have specific meanings in the context of Hadoop.</p><ul><li><b>Cluster</b> - Refers to all the systems that together make the datalake.</li><li><b>Node - </b>A single host or computer in the Hadoop cluster. </li><li><b>NameNode</b> - A node that is responsible for keeping the directory tree of the Hadoop file system.</li><li><b>DataNode</b> - A slave node that stores files according to the instructions of a NameNode.</li><li><b>Primary NameNode </b>- The current active node responsible for keeping the directory structure.</li><li><b>Secondary NameNode</b> - The backup node which will perform a seamless takeover of the directory structure should the Primary NameNode become unresponsive. There can be more than one Secondary NameNode in a cluster, but only one Primary active at any given time.</li><li><b>Master Node</b> - Any node that is executing a Hadoop "management" application such as HDFS Manager or YARN Resource Manager.</li><li><b>Slave Node</b> - Any node that runs a Hadoop "worker" application such as HDFS or MapReduce. It should be noted that a single node can be both a Master and Slave node at the same time.</li><li><b>Edge Node </b>- Any node that is hosting a Hadoop "user" application such as Zeppelin or Hue. These are applications that users can use to perform processing on the data stored in the datalake.</li><li><b>Kerberised</b> - The term given for a datalake that has security enabled through Kerberos.<br /><i></i><br /></li></ul><p><i><span style="font-size:24px">What is Hadoop?</span></i></p><p>Hadoop is a datalake technology developed by Apache. It is a collection of open-source applications and services that can utilise a network of computers to solve large and complex problems. Hadoop in its simplest form has two main functions namely distributed storage and distributed processing. </p><p>In essence, it allows a network of computers to become one very large computer with a massive hard drive and a ton of CPU power. How big are we talking? Well, let\'s just put it this way, most organisations have clusters of about 200 nodes each with about 25 TeraBytes of storage equalling a staggering 5 PetaBytes of storage and roughly 1700 CPUs. To ensure network speed is not a bottleneck, usually, these nodes are connected to each other through multiple fibre lines.\xa0 The world\'s largest cluster? 2000+ nodes with 21 PB of storage capacity and 22000+ CPUs.</p><p><i><span style="font-size:24px">What are the services of Hadoop?</span></i></p><p>The diagram below shows an example of a Hadoop ecosystem. Note that there are many more services that can be integrated:</p><p align="center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/831c8beb7531bb55121fbaf0643cadcc.jpg" /><br /></p><p>There are quite a number of different Apache Hadoop applications and services. These are some of the most common ones:</p><ul><li><b>HDFS </b>- Hadoop Distributed File System is the primary storage application for unstructured data such as files</li><li><b>Hive</b> - Hive is the primary storage application for structured data. Think of it as a massive database.</li><li><b>YARN</b> - Main resource manager application of Hadoop, used to schedule jobs in the cluster</li><li><b>MapReduce </b>- Application executor of Hadoop to process vast amounts of data. It consists of a Map procedure, which performs filtering and sorting, and a reduce method, which performs a summary operation.</li><li><b>HUE </b>- A user application that provides a GUI for HDFS and Hive.</li><li><b>Zookeeper</b> - Provides operational services for the cluster to set the configuration of the cluster in question.</li><li><b>Spark</b> - Engine for large-scale data processing.</li><li><b>Kafka</b> - A message broker to build pipelines for real-time data processing.</li><li><b>Ranger</b> - Used for the configuration of privilege access control over the resources in the datalake.</li><li><b>Zeppelin </b>- A web-based notebook application for interactive data analytics.</li></ul><p>There are more for you to discover on your own, but the fun part? All of these applications are open source, so you can download the source code and create your very own instance to play around with! In this lab, our focus will be mainly on primary applications such as HDFS and YARN.</p><p><i><span style="font-size:24px">Is security even a thing in Hadoop?</span></i></p><p>Short answer, for a really scary long time, no. But over the years improvements have been made. The two biggest improvements were the introduction of authentication through Kerberos and PAM through optional applications such as Ranger. Optional is the scary word there. A lot of datalakes out there simply don\'t make use of these security controls. </p><p>In this lab, we will be looking at a Kerberised datalake, so there is some security, but common misconfigurations have led to this datalake being insecure.</p><p><b>Note:</b> We will provide assistance on the Hadoop specific components, but basic enumeration, exploitation, and privilege escalation techniques will be expected for you to complete this lab.<br /></p>', 'taskType': 'vm', 'taskNo': 2, 'taskCreated': '2021-10-10T17:07:38.928Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '616b51202e0b080051c05f7d', 'questions': [{'questionNo': 1, 'question': 'Which node is responsible for actively keeping the directory tree structure of the datalake? <br />', 'hint': ''}, {'questionNo': 2, 'question': '<p>What type of node provides applications for users?<br /></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What Hadoop service is responsible for scheduling jobs?<br /></p>', 'hint': ''}, {'questionNo': 4, 'question': '<p>What Hadoop service provides granular access control to resources?<br /></p>', 'hint': ''}, {'questionNo': 5, 'question': '<p>What is the term provided to a datalake that makes use of Kerberos for security?<br /></p>', 'hint': ''}, {'questionNo': 6, 'question': '<p>Who owns the largest Hadoop cluster in the world?<br /></p>', 'hint': 'Google time!'}]}, {'taskTitle': 'All aboard the Hindenburg', 'taskDesc': "<p>Let's start the fun. Before we can begin to attack, you will have to do some recon. Using your favorite network scanner and its associated flags, enumerate the services exposed by <b>172.23.0.3</b>.<br /></p><p>There are going to be a bunch of different services and ports exposed. However, reviewing some of them you will quickly realise that this Hadoop environment is kerberised. Meaning the only way in is through a legitimate service.</p><p>Using a breadth-first approach, try to enumerate these services and find the edge node applications that are available. One of these will be your primary target.<br /><br /><b>Note</b>: When you finally authenticate, DO NOT rush to RCE, you will shoot yourself in the foot. Take time to first read through the provided loot and maybe save a copy of it.<br /></p>", 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2021-10-10T19:14:37.300Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What edge node service is running on this host?<br />', 'hint': 'What application is running on port 8080?'}, {'questionNo': 2, 'question': '<p>What file is responsible for the authentication configuration for this service?<br /></p>', 'hint': 'Since Apache Zeppelin is open source, google Apache Zeppelin Authentication, this will point you in the right direction.'}, {'questionNo': 3, 'question': '<p>What is the username and password combination that gives you your initial entry? (Format: &lt;username&gt;:&lt;password&gt;) <br /></p>', 'hint': "Zeppelin is open source, why don't you pull the file for authentication and read through it? Note: We are not going to make it that easy by leaving the admin user active. We take security seriously here!"}, {'questionNo': 4, 'question': '<p>Once authenticated, submit the flag that is hiding nicely in one of the notebooks.<br /></p>', 'hint': 'If you rushed to RCE, now would be the time to terminate and restart the lab.'}]}, {'taskTitle': 'Rocking it like Led', 'taskDesc': "<p>So you found a nice service? Not all roles are created equal.<br /></p><p>This is the first misconfiguration you will see in many datalakes that have the initial security applied. Due to the sheer amount of applications and services running in a datalake, you are bound to find at least one service that still makes use of default credentials and configuration.</p><p>After exploring the loot here, let's see what we can do to gain access to this edge node.</p><p>This application is a very popular Hadoop application. Similar to Jupyter notebooks, it allows data analysts to quickly writeup scripts that can pull, process, and display analytics from the data stored in the cluster. It does this by making use of interpreters, of which there are many to choose from. However, not all interpreters are equal. Similarly, not all user roles are equal. <br /><br />How does authentication work for this service? Could you perhaps do some lateral privilege escalation to execute code?<br /><br />You will find the next flag in the home directory of the compromised OS user.</p>", 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2021-10-10T19:15:11.109Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What is the password of the user allowed to interface with the interpreters and provided notebook?<br />', 'hint': 'Even though you might not have execute permissions, you definitely have read permissions. Use that to snoop around the notebooks of other users.'}, {'questionNo': 2, 'question': '<p>Which active interpreter can be used to execute code?<br /></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What OS user does the application run as?<br /></p>', 'hint': 'Short for the application name, but just execute whoami to figure this one out'}, {'questionNo': 4, 'question': "<p>What is the value of the flag found in the user's home directory (flag2.txt)?<br /></p>", 'hint': ''}]}, {'taskTitle': 'Keeping tabs on all these keys', 'taskDesc': '<p>Finally, you have RCE. At this point, you should probably consider getting a stable shell using your preferred method. While the entire challenge can be solved from a single notebook, this is just making your life more difficult than it honestly should be. Go get that stable shell before moving on. </p><p><b>Note: </b>A bit of an added twist, but reverse shells will probably not do the trick in this lab, since the Hadoop network does not have the relevant routes to communicate back on the VPN. This is often normal behaviour in Hadoop networks for additional security, ensuring that the network can\'t communicate out itself. This may be the ideal time to test your <b><a href="https://sushant747.gitbooks.io/total-oscp-guide/content/reverse-shell.html" target="_blank">bind shell</a></b> skills.<br /></p><p>You\'re back? Awesome! </p><p>You are still left with the same problem, you can\'t access the datalake without Kerberos authentication. The question then becomes, if everything has to do with Kerberos authentication, how can this process be automated? If you have this many Hadoop services running and each of them has to authenticate itself before it can perform actions, there has to be an automated way of doing this? Ever heard of Kerberos keytabs?</p><p>Keytabs are magical things. Think of them as a Kerberos Key. Essentially, you are storing all the information required (including the password) to authenticate in a file. Keytabs can be generated by interfacing with the Kerberos server and executing the following command:</p><p><code>ktpass /pass &lt;Krb Password&gt; /mapuser &lt;Krb Username&gt; /out &lt;ex.keytab&gt; /princ &lt;username&gt;/&lt;hostname&gt;@&lt;example.com&gt; /ptype KRB5_NT_PRINCIPAL /crypto RC4-HMAC-NT /Target example.</code></p><br /><p>But wait, how is that secure? Simple! The security of keytabs relies on restricting access to the associated keytab file. So file permissions should be used to protect the keytab file in question, similar to how SSH private keys are protected. However, by default, these keytab files do not inherit secure file permissions, especially during the initialisation phase when the datalake is created and these keys have to be distributed to each node in the cluster.</p><p>With this being said, go find the keytabs of the Hadoop services stored on this host. Use whatever enumeration techniques or scripts you would normally follow for privilege escalation after the initial compromise.</p><p>Did you find them? Great! Now let\'s use them.</p><p>Let\'s start small. Let\'s try to authenticate with Keberos and the keytab associated with our user. The following guide provides excellent assistance on using keytabs for authentication:</p><p><a href="https://kb.iu.edu/d/aumh" target="_blank">https://kb.iu.edu/d/aumh</a><a href="https://kb.iu.edu/d/aumh" target="_blank"></a></p><p>We are interested in two commands:</p><p><b>klist:</b></p><p>The klist command can be used to gather information from a keytab, since cat\'ing the keytab usually ends badly for your shell. We can use the following command to output the principals stored in the keytab file:</p><p><code>klist -k &lt;keytabfile&gt;</code><br /><b></b><br /><b>kinit:</b></p><p>The kinit command can be used to use a keytab, authenticate to the Kerberos server, and request a ticket. We can use the following command:</p><p><code>kinit &lt;principal name&gt; -k -V -t &lt;keytabfile&gt;<br /></code><br /><b><br /></b></p><p>While the <code>-V</code> flag is not really needed, I highly recommend adding it for additional verbosity, such as actually knowing that you are authenticated. Without it, you won\'t see any useful output.<br /><b></b><br /></p><p>Start by listing the principals stored in the service\'s associate keytab and then try to authenticate with the keytab. Use the <code>-V</code> flag for verbose mode to make sure you can see the output.<br /></p><p>Now that you are authenticated, we can finally start to interface with the datalake! However, you will soon notice that you don\'t have access to the CLI tools associated with Hadoop. The simple reason? The compromised user does not have the correct environment paths set to use the Hadoop services. Go find the associated <code>bin</code> directory for the Hadoop services and either add this to your environment path or navigate to this directory to execute the associated Hadoop services.</p><p>For starters, we are interested in interfacing with the datalake\'s file system. Thus, we will make use of the <code>hdfs</code> application. Have a read through this guide to get an understanding of the type of commands you can execute:</p><p><a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HDFSCommands.html" target="_blank">https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HDFSCommands.html</a><a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HDFSCommands.html" target="_blank"></a></p><p>The command that we are specifically interested in is the <code>dfs</code> command, which allows us to run file system commands on the datalake. Using this command, go hunt down the flag stored in this user\'s HDFS home directory.<br /></p>', 'taskType': 'none', 'taskNo': 5, 'taskCreated': '2021-10-10T19:16:03.761Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Which directory stores the keytabs for the Hadoop services?<br /></p>', 'hint': ''}, {'questionNo': 2, 'question': "What is the keytab file's name associated with the compromised user?<br />", 'hint': 'The keytab should correspond to the username, even though it is not owned by this user.'}, {'questionNo': 3, 'question': '<p>What is the first principal stored in this keytab file?<br /></p>', 'hint': 'Use the klist -k command to list the principals.'}, {'questionNo': 4, 'question': 'What is the full verbose command to authenticate with this keytab using the full file path?<br />', 'hint': 'The flags used for this mode are in order: -k -V -t\n\nMake sure to specify the full file path to the keytab.'}, {'questionNo': 5, 'question': "<p>What is the value of the flag stored in the compromised user's HDFS home directory (flag3.txt)?<br /></p>", 'hint': 'Use the dfs option of the hdfs service to interact with files. Such as: hdfs dfs -ls /'}]}, {'taskTitle': 'A great big ball of Yarn', 'taskDesc': '<p>Even though we now have access to the datalake, we still have not performed privilege escalation. We will need to do something in order to gain full control of the cluster.</p><p>After authenticating to the datalake, things start to get interesting. You see, even though the datalake may look like a normal Unix file system, in terms of authentication and access control, things work a tad bit different when it comes to Hadoop. One key concept to understand is that your current OS user and your cluster user, DOES NOT have to correspond. Through Kerberos, the cluster will believe you are whoever you authenticate as, regardless of your actual OS user.</p><p>Let\'s verify this concept before starting our exploitation path. Use the <code>-touchz</code> option of HDFS interface to touch a file to the <code>/tmp</code> directory of the datalake. Then, use the <code>-ls</code> option to list the contents of the temp directory and review the permissions associated with that file.</p><p>Okay, so what if we impersonate another Hadoop service? Often, the services in Hadoop has to perform impersonation to allow them to perform their duties. The HUE user may have to impersonate the HDFS user to create a new home directory. The Zeppelin user may have to impersonate the YARN user to schedule a job. YARN may impersonate the NodeManager to allocate processes to different nodes.</p><p>The secure way of configuring this is to copy keytabs and restrict them down with granular file permissions to only the services that require them. But ain\'t nobody got time for that. So what organisations usually do is they just chmod the hell (666) out of these keys until the services can impersonate as they deem fit. In our case, our organisation at least tried to perform some key segregation by using group permissions, but it is honestly not that much more secure.</p><p>Based on your enumeration results, you should see that our compromised user has access to a number of keytabs from other services, due to being a member of the\xa0<i>hadoop_services</i> group. Now the question becomes, which of these users can lead to privilege escalation? Have a look through the group memberships to find the service that sometimes has to act like a normal service, whereas other times it has to invoke its "super" abilities to perform tasks. This will be our target. Impersonate this user and retrieve the flag from its associated HDFS home directory. To verify that you have fully impersonated this user on the datalake, touch another file to the temp directory and review its permissions.<br /></p><p>HDFS impersonation is cool and all because we can now access the home directories of other users, but from an OS perspective, we are still the low-privileged user. We need to find some way to abuse the permissions of this impersonated service to also become this user on an OS level. Enter MapReduce. Certain Hadoop services, our impersonated service being one of them, have the ability to ask the datalake to execute processes on their behalf. The interesting thing is, these jobs will be executed from the context of the user associated with the job. So what if one of these jobs could be remote code execution? Fun times!</p><p>A resource that will greatly assist you at this step is the Hadoop Attack Library:</p><p><a href="https://github.com/wavestone-cdt/hadoop-attack-library" target="_blank">https://github.com/wavestone-cdt/hadoop-attack-library</a></p><p>Option number 5, executing commands, looks like a great place to start. This is where the training wheels come off. Using this attack library, try to create remote code execution job that will drop you from an OS perspective in the context of the impersonated user. Perhaps start small as the guide suggests, by first just creating a job that recovers a file from disk before going for the shell. Once impersonated, you can recover the flag from this user\'s home directory.<br /></p>', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2021-10-10T20:24:08.966Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What is the name of the service we will attempt to impersonate for privilege escalation?<br />', 'hint': ''}, {'questionNo': 2, 'question': "<p>What is the value of the flag in the impersonated user's HDFS home directory (flag4.txt)?<br /></p>", 'hint': ''}, {'questionNo': 3, 'question': "<p>What is the value of the flag in the impersonated user's OS home directory (flag5.txt)?<br /></p>", 'hint': ''}]}, {'taskTitle': 'Assistant to the regional Node', 'taskDesc': "<p>Congrats! You were able to impersonate another user!<br /><br />What's better than a ball of Yarn? Well owning the Yarn farm of course!</p><p>Now that we have some more permissions, it is finally time to herd up all the farm animals and take control. There is one peculiar keytab remaining. This keytab belongs to the NodeManager service. This is not a service mentioned at the start since this is a service that you normally never interact with directly. It is a little shy and stays behind the scenes. However, it is truly the master orchestrator. You want to create a new node? Got to speak to the manager. Do you want to update containers? Got to speak to the manager. Do you want to switch to the Secondary NameNode? Got to speak to the manager. Do you want to run a job? Got to speak to the manager.</p><p>Essentially, behind the scenes, this service ensures that all nodes are up and running. If a node becomes unhealthy, the NodeManager will inform the relevant services like ResourceManager to distribute the load of that node onto others in order to improve the node's health or get it ready for retirement.</p><p>It is usually behind the scenes, as organisations usually make use of what's called Datalake management solutions. These are applications like Ambari or Cloudera manager. These applications provide a centralised platform that helps control, manage, and deploy your cluster. However, they are usually just wrapping the NodeManager and ResourceManager services. </p><p>With all of this being said, if you want to ever control the entire cluster, this would be the service to hunt for. Using your newly acquired permissions, try to impersonate the NodeManager service. First just from a datalake perspective, but then also from an OS perspective.<br /></p>", 'taskType': 'none', 'taskNo': 7, 'taskCreated': '2021-10-10T19:19:07.355Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "What is the value of the flag associated with the NodeManager's HDFS home directory (flag6.txt)?<br />", 'hint': ''}, {'questionNo': 2, 'question': "<p>What is the value of the flag associated with the NodeManager's OS home directory (flag7.txt)?<br /></p>", 'hint': ''}]}, {'taskTitle': 'I:heart:root', 'taskDesc': "<p>This service is peculiar. If it can't directly access the other nodes, it probably needs to be able to invoke privileged commands?</p><p>You are going to be very disappointed in the root privilege escalation path, but it is as real as it can get. You see, to figure out exactly what commands are required to execute as NodeManager is a massive pain. So painful that large datalake providers often even recommend this glaringly bad misconfiguration. Your next flag awaits you in root's home directory.<br /></p>", 'taskType': 'none', 'taskNo': 8, 'taskCreated': '2021-10-10T19:21:03.189Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "What is the value of the flag in the root user's home directory (flag8.txt)?<br />", 'hint': 'Basic privilege escalation enumeration will get your this answer.'}, {'questionNo': 2, 'question': "<p>What is the value of the flag in the root user's HDFS home directory (flag9.txt)?<br /></p>", 'hint': "Hunt for root's keytab."}]}, {'taskTitle': 'Surfing the datalake', 'taskDesc': "<p>So you finally got root! What's better than one root?</p><p>We still have not answered that one burning question. How do NodeManager and ResourceManager actually join these nodes together both for storage and processing capabilities? </p><p>Yes, what you will find here is a misconfiguration, but try to fix this issue at your own peril through the use of sudo wrappers. It is much simpler to just protect the root user and risk accept the risk. Once you become root on a single node, 99% of the time it is over at this point.</p><p>Using basic enumeration from your new rootly position, you should be able to authenticate to the secondary cluster node on <i>172.23.0.4</i>. Your last flag waits in the root directory on that host.<br /></p>", 'taskType': 'none', 'taskNo': 9, 'taskCreated': '2021-10-10T19:21:27.593Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "What is the value of the flag in the root user's directory on the secondary cluster node (flag10.txt)?<br />", 'hint': ''}]}, {'taskTitle': 'Conclusion', 'taskDesc': '<p>Congrats! You made it to the end and took control of the entire cluster!</p><p>Some worthwhile notes on this lab:</p><ul><li>We cheated a bit here by having a single node in the main cluster. Usually, you would have many nodes. This is actually fairly important since you have no control over which node MapReduce would select for your job. Meaning you would get a randomised shell on node. This can become fairly annoying if you are trying to target a very specific host, but just executing a bunch of jobs will usually allow you to get lucky and hit the node of your choice.</li><li>Although the misconfigurations here were simulated, they replicate the real configuration usually seen when using Ambari as your datalake manager. Ambari can secure your datalake for you, but you have to alter the configuration to allow it to do so.</li><li>A key misconfiguration in datalakes is not setting the appropriate UMASK value for the datalake. This causes all pushed files to be world-readable by default which means you are in for a bad time if you start pushing sensitive content to your cluster.<br /></li><li>Datalakes are often an all-or-nothing thing when they are kerberised but don\'t have more granular access control. This means that ANY AD user can actually authenticate to the datalake and read files. This paired with the UMASK misconfiguration makes for a very potent and large attack surface.</li><li>It is not just the data that needs protection in the datalake, but the actual processing resources themselves as well. If you think GPUs are fast at mining Crypto, you haven\'t seen what a bad actor can do using the distributed computing of a cluster with MapReduce optimising those jobs.</li></ul><div><br /></div><div>Lastly, thank you for completing this lab! We hope you enjoyed this journey of learning about the security \nshortcomings you will often see in Hadoop. There are a lot of services \nin the datalake and this was just a sample of the misconfigurations you \ncould potentially find with some of them. If you are interested, go spin up your own datalake and play around!</div><div><br /></div><div>Another excellent resource to learn more about Hadoop services and misconfigurations is the following <a href="https://www.youtube.com/watch?v=5lUiLYQ6BG0" target="_blank">BlackHat talk.</a></div>', 'taskType': 'none', 'taskNo': 10, 'taskCreated': '2021-10-10T21:38:07.128Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<i>Read the above</i>', 'hint': ''}]}]}