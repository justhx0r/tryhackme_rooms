{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/dc3dd894bab489096b17750748245e2d.png', 'title': 'SSDLC', 'description': 'This room focuses on the Secure Software Development Lifecycle (S-SDLC), its processes, and methodologies.', 'code': 'securesdlc', 'users': 10293, 'tags': ['security', 'SDLC', 'DevSecOps', 'SSDLC'], 'type': 'walkthrough', 'difficulty': 'medium', 'userCompleted': False, 'upVotes': 358, 'created': '2022-04-22T12:55:35.831Z', 'published': '2022-07-12T16:00:00.145Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://assets.tryhackme.com/room-banners/introductiontodevsecops.jpg', 'creator': 'tryhackme', 'tasks': [{'taskTitle': 'Introduction', 'taskDesc': '<p><span class="notion-enable-hover"><b><span style="font-size:24px">Introduction</span></b></span></p><p>This room focuses on the Secure Software Development Lifecycle (S-SDLC), its processes, and methodologies.</p><p><span class="notion-enable-hover"><span style="font-size:24px">Learning objectives</span></span></p><ul><li><span class="notion-enable-hover"><span style="font-size:24px"><span style="font-size:16px">Understand\xa0 what SSDLC is and why it\'s important<br /></span></span></span></li><li><span class="notion-enable-hover"><span style="font-size:24px"><span style="font-size:16px">Learn about the processes of SSDLC</span></span></span></li><li><span class="notion-enable-hover"><span style="font-size:24px"><span style="font-size:16px">Understand the Secure SDLC methodologies<br /></span></span></span></li></ul><p><span class="notion-enable-hover"><span style="font-size:24px"></span></span></p><p></p>', 'taskType': 'none', 'taskNo': 1, 'taskCreated': '2022-04-22T12:55:51.207Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "Let's get this bread<br />", 'hint': ''}]}, {'taskTitle': 'What is SSDLC?', 'taskDesc': '<p><span style="font-size:24px">Secure Software Development Lifecycle (SSDLC)<br /></span></p><p>During SDLC, security testing was introduced very late in the lifecycle. \ufeffBugs, flaws, and other vulnerabilities were identified late, making them far more expensive and time-consuming to fix. In most cases, security testing was not considered during the testing phase, so end-users reported bugs after deployment. Secure SDLC models aim to introduce security at every stage of the SDLC.<br /></p><p><span style="font-size:24px">Why is Secure SDLC important?</span></p><p>A study conducted by the Systems and Sciences institute at IBM discovered that it costs six times more to fix a bug found during implementation than one identified as early as during the design phase. It also reported that it costs 15 times more if flaws are identified during testing and up to 100 times more costly if identified during the maintenance and operation phases. See the figure below:</p><p style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5c549500924ec576f953d9fc/room-content/1688d77f6f6401862a668820ab96061e.png" alt="a diagram showing the relative cost of bug fixes" /><br /></p><p style="text-align:center"><span style="font-size:12px">Source: The research paper on the cost of identifying vulnerabilities can be found\xa0</span><a href="https://www.researchgate.net/profile/Maurice-Dawson/publication/255965523_Integrating_Software_Assurance_into_the_Software_Development_Life_Cycle_SDLC/links/02e7e52114e5e1ba71000000/Integrating-Software-Assurance-into-the-Software-Development-Life-Cycle-SDLC.pdf?origin=publication_detail" target="_blank">here</a>.</p><p><span style="font-size:1rem">Apart from faster development and reduction of costs, integrating security across the SDLC helps discover and reduce vulnerabilities early, reducing business risk massively. Examples of introducing security at all stages are architecture analysis during design, code review and scanners during the development stage and conducting security assessments (e.g. penetration tests) before deployment. For example, in waterfall models, this sort of testing was carried out at the end of the lifecycle, right before production; in more agile processes, we can implement a "security by design" approach. If the pentests result in errors like an SQL injection in a waterfall scenario, mitigating the bugs would entail doing another cycle to fix the bug. It would require redesigning, applying the changes and retesting to check it has been remediated. In a more agile approach, discussions on whether to prevent flaws like this, such as deciding on parameterisation during the planning phase, can avoid having to roll back changes, and it only costs a planning discussion.\xa0</span><br /></p><p>\ufeff<span style="font-weight:bolder;font-size:1rem"><span style="font-size:24px">Summary</span></span></p><ul><li>Security is a constant concern, improving software quality and security constantly.<br /></li><li>Boosting security education and awareness: all stakeholders know each phase\'s security recommendations and requirements.</li><li>Flaws are detected early before deployment, reducing the risk of getting hacked or disrupted.</li><li>Costs are reduced, and speed increases, thanks to the early detection and resolution of vulnerabilities. Business risk, brand reputation damage, and fines that could lead to economic disaster for a company are prevented.</li></ul>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2022-04-22T12:57:25.496Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'How much more does it cost to identify vulnerabilities during the testing phase?', 'hint': ''}]}, {'taskTitle': 'Implementing SSDLC', 'taskDesc': '<h2>Implementing SSDLC</h2><p><span style="font-family:Ubuntu">As the <a href="https://tryhackme.com/room/introductiontodevsecops" target="_blank">Intro To DevSecOps</a> room shows, Secure SDLC involves instilling security processes at all lifecycle phases. From security testing tools to writing security requirements alongside functional requirements.</span><br /></p><div align="center"></div><p><span style="font-family:Ubuntu;font-size:24px">Understanding Security Posture</span></p><p><span style="font-family:Ubuntu">\ufeff</span><span style="font-size:18px"><span style="font-size:16px;font-family:&quot;Ubuntu&quot;">Like</span><span style="font-size:16px;font-family:&quot;Ubuntu&quot;"> with </span></span><span style="font-family:Ubuntu">every new process</span><span style="font-size:18px"><span style="font-size:16px"><span style="font-family:&quot;Ubuntu&quot;">, understanding your gaps and state is critical for successfully</span><b><span style="font-family:&quot;Ubuntu&quot;"> </span></b></span></span><span style="font-family:Ubuntu">introducing\n a new tool, solution, or change.</span><span style="font-family:Ubuntu;font-size:1rem">\xa0To help grasp what your \nsecurity posture is, you can start by doing the following:\ufeff</span></p><ul><li>Perform\n a<b> gap analysis</b> to determine what activities and policies exist in your \norganisation and how effective they are. For example, ensuring policies are in place (what the team does) with security procedures (how the team executes those policies).<br /></li><li>Create <b>Software Security \nInitiatives</b> (SSI) by establishing realistic and achievable goals with \ndefined metrics for success. For example, this could be a Secure Coding \nStandard, playbooks for handling data, etcetera are tracked using project management tools.<br /></li><li><b>Formalise\n processes</b> for security activities within your SSI. After starting a \nprogram or standard, it is essential to spend an operational period helping engineers get familiarised with it and gather \nfeedback before enforcing it. When performing a gap analysis, every policy should have defined procedures to make them effective.<br /></li><li><b>Invest in security training</b> for engineers as well as appropriate tools. Ensure people are \naware of new processes and the tools that will come with them to \noperationalise them, and invest in training early, ideally before \nestablishing / onboarding the tool. </li></ul><p style="line-height:1.38;margin-top:0pt;margin-bottom:12pt"><span style="font-size:24px"><b>SSDLC Processes</b></span></p><p style="line-height:1.38;margin-top:0pt;margin-bottom:12pt"><span style="font-size:1rem">After understanding your security posture, now is the time to prioritise and instil security in your SDLC. Generally speaking, a secure SDLC involves integrating processes like security testing and other activities into an existing development process. Examples include writing security requirements alongside functional requirements and performing an architecture risk analysis during the design phase of the SDLC.\xa0</span>These processes are the following:</p><p style="text-align:center;line-height:1.38;margin-top:0pt;margin-bottom:12pt"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61a7523c029d1c004fac97b3/room-content/3d1e3379a1e3ccc46f3c7471095cbfae.png" alt="Risk Matrix" />\xa0</p><ul><li style="line-height:1.38;margin-top:0pt;margin-bottom:12pt"><span style="font-size:16px"><b>Risk Assessment </b>- during the early stages of SDLC, it is essential to identify security considerations that promote a security by design approach when functional requirements are gathered in the planning and requirements stages. For example, if a user requests a blog entry from a site, the user should not be able to edit the blog or remove unnecessary input fields.</span><br /></li><li style="line-height:1.38;margin-top:0pt;margin-bottom:12pt"><span style="font-size:16px"><b>Threat Modelling</b> - is the process of identifying potential threats when there is a lack of appropriate safeguards. It is very effective when following a risk assessment and during the design stage of the SDLC, as Threat Modelling focuses on what should not happen. In contrast, design requirements state how the soft</span><span style="font-size:16px">ware will behave and interact. For example, ensure there is verification when a user requests account information.</span></li><li style="line-height:1.38;margin-top:0pt;margin-bottom:12pt"><span style="font-size:16px"><b>Code Scanning / Review</b> -\xa0 Code reviews can be either manual or automated. Code Scanning or automated code reviews can leverage Static and Dynamic Security testing technologies. These are crucial in the Development stages as code is being written.</span></li><li style="line-height:1.38;margin-top:0pt;margin-bottom:12pt"><b style="font-size:16px">Security Assessments - Like Penetration Testing &amp; Vulnerability Assessments</b>\xa0are a form of automated testing that can identify critical paths of an application that may lead to exploitation of a vulnerability. However, these are hypothetical as the assessment doesn\'t carry simulations of those attacks. Pentesting, on the other hand, identifies these flaws and attempts to exploit them to demonstrate validity. Pentests and Vulnerability Assessments are carried out during the Operations &amp; Maintenance phase of the SDLC after a prototype of the application.</li></ul><p style="line-height:1.38;margin-top:0pt;margin-bottom:12pt">There are methodologies to apply the processes in task 5 that will help you navigate and guide you when introducing risk assessment, threat modelling, scanning and testing, and operational assurance. The following tasks will cover these processes in more detail.</p>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2022-04-22T12:58:28.250Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What should you understand before implementing Secure SDLC processes?<br />', 'hint': ''}, {'questionNo': 2, 'question': '<p>During which stages should you perform a Risk Assessment?<br /></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What should be carried out during the design phase?</p>', 'hint': ''}]}, {'taskTitle': 'Risk Assessment', 'taskDesc': '<p style="margin-top:0pt;margin-bottom:12pt"><span>\ufeff</span><span>\ufeff</span><span style="font-size:16pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">Risk Assessment</span></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:16px;white-space:pre-wrap">Risk refers to the likelihood of a threat being exploited, negatively impacting a resource or the target it affects. For example, vulnerabilities being exploited after a new version of the software is published, design flaws, and poorly reviewed code can increase the risk of these scenarios. Risk management is an important pillar to integrate into the SDLC to mitigate risk in a product or service.</span><br /></p><p style="margin-top:0pt;margin-bottom:0pt"></p><hr /><p></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:16px;white-space:pre-wrap">Risk assessment is used to determine the level of the potential threat. Risk identified in the risk assessment process can be reduced or eliminated by applying appropriate controls during the risk mitigation process. Usually, a risk assessment is followed by threat modelling, which will be explained further in the next section.</span><br /></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="background-color:transparent;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap;font-size:18px"><b>Performing a Risk Assessment</b></span></p><ol><li style="margin-top:0pt;margin-bottom:12pt"><span style="white-space:pre-wrap;font-size:16px">The first step in the risk assessment process is to assume the software will be attacked and consider the factors that motivate the threat actor. List out the factors such as the data value of the program, the security level of companies who provide resources that the code depends on, the clients purchasing the software, and how big is the software distributed (single, small workgroup or released worldwide). Based on these factors, write down the acceptable level of risk. For instance, a data loss may cause the company to lose millions, especially if they require to pay fines nowadays with GDPR, but eliminating all potential security bugs in the code may cost $40,000. The company and some other stakeholder groups have to decide whether it is worth it; it is also crucial to communicate these tradeoffs. Hence, everyone has an understanding of risk and its implications. From a brand reputation perspective, if the attack causes damage to the company\'s image, it costs the company more in the long run than fixing the code.</span></li><li style="margin-top:0pt;margin-bottom:12pt"><span style="white-space:pre-wrap;font-size:16px">The next step is risk evaluation. Include factors like the worst-case scenario if the attacker has successfully attacked the software. You can demonstrate the worst-case scenario to executives and senior engineers by simulating a ransomware attack. Determine the value of data to be stolen, valuable data such as the user\'s identity, credentials to gain control of the endpoints on the network, and data or assets that pose a lower risk. Another factor to consider is the difficulty of mounting a successful attack, in other words, its complexity. For example, if an attacker can gain access to the company\'s tool for giving feedback to colleagues or running retrospective meetings, it would have a lower impact than accessing a production environment\'s monitoring and alerts system. The high level of risk will not be acceptable, and it is best to mitigate it. For example, a vulnerability can be exploited by anyone running prewritten attack scripts or using botnets to spread the scripts to compromise computers and networks. Users affected are a vital factor.</span></li><li style="margin-top:0pt;margin-bottom:12pt"><span style="white-space:pre-wrap;font-size:16px">Some attacks only affect one or two users, but the denial of service attack will affect thousands of users when a server is attacked. Moreover, thousands of computers may be infected by the spread of worms. The last factor is the accessibility of the target. Determine whether the target accepts requests across a network or only local access, whether authentication is needed for establishing a connection, or if anyone can send requests. It has more impact if an attacker accesses a production environment vs a sandbox environment used in local playgrounds for people to do labs or tutorials.</span></li></ol><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:24px;white-space:pre-wrap">Types of Risk Assessments</span></p><p style="margin-top:0pt;margin-bottom:12pt">There are several types of Risk assessments best suited for different scenarios. Below are the different types of Risk Assessments:</p><p style="margin-top:0pt;margin-bottom:12pt"><b><span style="font-size:18px">Qualitative Risk Assessment</span></b></p><p style="margin-top:0pt;margin-bottom:12pt">This is the most common type of Risk Assessment that you will find in companies (hopefully). In a Qualitative Risk Assessment, the goal is to assess and classify risk into thresholds like "Low", "Medium", and "High". It systematically examines what can cause harm and what decisions should be made to define or improve adequate control measures. Like all types of Risk Assessments, each level has a priority, where "High" has the most urgency. Even though Qualitative Risk Assessments don\'t use numbers, a typical formula to evaluate qualitative risk is:</p><p style="margin-top:0pt;margin-bottom:12pt"><code>Risk = Severity x Likelihood</code><span style="font-size:16px"></span></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="white-space:pre-wrap;font-size:1rem"><sup> "Severity" is the impact of the consequence, and Likelihood is the probability of it happening. It is up to the risk assessor to judge these circumstances.</sup></span></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:18px;white-space:pre-wrap"><b>Quantitative Risk Assessment\xa0\xa0</b></span></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:16px;white-space:pre-wrap">The Quantitative Risk Assessment is used to measure risk with numerical values. Instead of </span>"Low", "Medium", and "High"<span style="font-size:16px;white-space:pre-wrap">, you would have numbers that represent those bands. When carrying out Quantitative Risk Analysis, we can use tools to determine Severity and Likelihood or custom series of calculations based on the company\'s processes. </span></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:16px;white-space:pre-wrap">For example, suppose there are services with assigned business criticality levels. In that case, you can say that if a bug affects a business-critical service (an authentication service, a payment infrastructure etc.), you will assign 5 points. This highlights why it is vital to understand a security posture and its processes. Measuring risk and priority with an endemic equation to a company\'s services will have great results. An example of a Quantitative Risk Assessment Matrix can be seen below:</span></p><p style="margin-top:0pt;margin-bottom:12pt"></p><div style="text-align:center"><span style="white-space:pre-wrap"><br /></span></div><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61a7523c029d1c004fac97b3/room-content/e5fb607dfd764c3e162da1783dd58e02.png" alt="Risk Matrix" style="float:left;width:422px;height:446.407px" class="note-float-left" /><p></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:1rem;white-space:pre-wrap"><br /></span></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:1rem;white-space:pre-wrap"><br /></span></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:1rem;white-space:pre-wrap"><br /></span></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:1rem;white-space:pre-wrap">Risk assessments are better performed at the beginning of the SDLC, during the planning and requirement phases. For example,</span><span style="font-size:1rem;white-space:pre-wrap"> "Customer data gets exfiltrated by an attack". Once the system is developed, you can perform quantitative risk analysis: "One customer can sue us for $ 20,000 if their data gets leaked", and we have 100 customers. However, the Annual Rate of Occurrence (ARO) is 0.001. Hence Annual Loss Expectancy is = $20,000 * 100 * 0.001 = $ 2,000, meaning as long as our compensating security control is less than $ 2,000, we are not overspending on security.</span><br /></p>', 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2022-04-22T13:03:33.018Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What is a formula to assign a Qualitative Risk level?', 'hint': ''}, {'questionNo': 2, 'question': '<p>Which type of Risk Assessment assigns numerical values to determine risk?</p>', 'hint': ''}]}, {'taskTitle': 'Threat Modelling', 'taskDesc': '<p style="background-color:#ffffff;margin-top:0pt;margin-bottom:0pt;padding:0pt 0pt 12pt 0pt"><span style="font-size:24pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">Threat Modelling</span></p><p style="background-color:#ffffff;margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">Threat modelling is best integrated into the design phase of an SDLC before any code is written. Threat modelling is a structured process of identifying potential security threats and prioritising techniques to mitigate attacks so that data or assets that have been classified as valuable or of higher risk during risk assessment, such as confidential data, are protected. When performed early, it brings a great advantage; potential issues can be found early and solved, saving fixing costs down the line.\xa0</span></p><p style="background-color:#ffffff;margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap"><br /></span></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">There are various methods to perform threat modelling. Not all the methods have the same purpose; some focus on risk or privacy concerns, while some are more customer-focused. We can combine these methods to understand potential threats better; it is essential to analyse which way aligns more with the project or business. </span><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-weight:700;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">STRIDE, DREAD, and PASTA are among the common threat modelling methodologies.</span><br /></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:18pt;white-space:pre-wrap"><b>STRIDE</b></span><br /></p><p style="text-align:left;background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">STRIDE stands for Spoofing, Tampering, Repudiation, Information Disclosure, Denial Of Service, and Elevation/Escalation of Privilege. STRIDE is a widely used threat model developed by Microsoft which evaluates the system\'s design in a more detailed view. We can use STRIDE to identify threats, including the property violated by the threat and definition. The system\'s data flow diagram is to be developed in this model, and each node is applied with the STRIDE model. Identifying security threats is a manual process that tools are not supported and should be carried out during the risk assessment. Using data flow diagrams and integrating STRIDE, the system entities, attack surfaces, like known boundaries and attacker events become more identifiable. Stride stands for </span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">S</span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">poofing Identity, </span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">T</span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">ampering with Data, </span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">R</span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">epudiation, </span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">I</span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">nformation Disclosure, </span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">D</span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">enial of Service, </span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">E</span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">levation of </span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">P</span><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">rivilege. STRIDE is built upon the CIA triad principle (Confidentiality, Integrity &amp; Availability). Security professionals that perform STRIDE are looking to answer "What could go wrong with this system". Here are the components of the framework:</span></p><p style="text-align:center;background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap"> </span><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61a7523c029d1c004fac97b3/room-content/a5904cf6f063a62e77df6623eb1cbd33.png" alt="STRIDE diagram" /></p><p style="background-color:#ffffff;margin-top:0pt;margin-bottom:0pt">\xa0</p><ol><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Spoofing:</b></span><span style="font-weight:400;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> It is an act of impersonation of a user by a malicious actor which violates the authentication principle from the perspective of the CIA triad. Common ways include ARP, IP, and DNS spoofing.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Tampering:</b></span><span style="font-weight:400;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> The modification of information by an unauthorised user. It violates the integrity principle of the CIA triad.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Repudiation:</b></span><span style="font-weight:400;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> Not taking responsibility for events where the actions are not attributed to the attacker. It violates the principle of non-repudiability. For example, the attacker clears up all the logs that could lead to leaving traces.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Information Disclosure:</b></span><span style="font-weight:400;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> It is an act of violation of confidentiality of the CIA triad. A typical example is data breaches.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Denial of Service:</b></span><span style="font-weight:400;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> Denial of Service occurs when an authorised user cannot access the service, assets, or system due to the exhaustion of network resources. DoS is a violation of the availability principle of the CIA triad.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:12pt"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Elevation/Escalation of Privilege:</b></span><span style="font-weight:400;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> Escalating privileges to gain unauthorised access is a classic example of a violation of the authorisation principle of the CIA triad.</span></p></li></ol><p style="background-color:#ffffff;margin-top:0pt;margin-bottom:0pt"><span style="font-size:18pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>DREAD</b></span></p><p style="background-color:#ffffff;margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap"><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;font-size:12.5pt;vertical-align:baseline">The abbreviation DREAD stands for five questions about each potential: </span><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;font-size:12.5pt;font-weight:700;vertical-align:baseline">D</span><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;font-size:12.5pt;vertical-align:baseline">amage Potential, </span><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;font-size:12.5pt;font-weight:700;vertical-align:baseline">R</span><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;font-size:12.5pt;vertical-align:baseline">eproducibility, </span><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;font-size:12.5pt;font-weight:700;vertical-align:baseline">E</span><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;font-size:12.5pt;vertical-align:baseline">xploitability, </span><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;font-size:12.5pt;font-weight:700;vertical-align:baseline">A</span><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;font-size:12.5pt;vertical-align:baseline">ffected Users and </span><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;font-size:12.5pt;font-weight:700;vertical-align:baseline">D</span><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;font-size:12.5pt;vertical-align:baseline">iscoverability. </span>DREAD is also a methodology created by Microsoft which can be an add-on to the STRIDE model. It\'s a model that ranks threats by assigning identified threats according to their severity and priority. In other words, it creates a rating system that is scored based on risk probability. </span><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:12.5pt;white-space:pre-wrap">Without STRIDE, the DREAD model also can be used in assessing, analysing and finding the risk probability by </span><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">threat rating. </span><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Here are the components of the framework:</span></p><p style="background-color:#ffffff;margin-top:0pt;margin-bottom:0pt">\xa0</p><ol><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Damage: </b></span><span style="font-weight:400;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap">refers to the possible damage a threat could cause to the existing infrastructure or assets. It is based on a scale of 0–10. A score of 0 means no harm, 5 means Information Disclosure, 8 means user data is compromised, 9 means internal or administrative data is compromised, and 10 means unavailability of a service.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Reproducibility:</b></span><span style="font-weight:400;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> it measures the complexity of the attack. So how easily a hacker can replicate a threat. A score of 0 means it is nearly impossible to copy, 5 stands for being complex but possible, 7.5 for an authenticated user and a score of 10 means the attacker can reproduce very quickly without any authentication.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Exploitability:</b></span><span style="font-weight:400;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> Referring to the attack\'s sophistication or how easy it would be to launch the attack. A score of 2.5 implies it would require an advanced skill set of networking and programming skills; 5 means can be exploited with available tools, a score of 9 means we would need a simple web application proxy tool and a score of 10 means it can exploit through a web browser.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Affected Users:</b></span><span style="font-weight:400;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> it describes the number of users affected by the successful exploitation of a vulnerability. A score of 0 would mean that there would be no affected users, 2.5 shall mean for an individual user, 6 would mean a small group of users, 9 would mean significant users like administrative users, and 10 would imply all users are affected.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:12pt"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Discoverability:</b></span><span style="font-weight:400;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> The process of discovering the vulnerable points in the system. For example, the threat would be easily found in case of compromise. </span><span style="font-weight:400;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap">A score of 0 would mean it would be challenging to discover it, a score of 5 means that the threat can be discovered by analysis of HTTP requests, and 8 means it can be easily found as it\'s public-facing. A score of 10 would mean it\'s visible in the browser address bar.</span></p></li></ol><p style="background-color:#ffffff;margin-top:0pt;margin-bottom:0pt"><span style="font-size:18pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>PASTA</b></span></p><p style="background-color:#ffffff;margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">PASTA is short for Process for Attack Simulation and Threat Analysis; it is a risk-centric threat modelling framework. PASTA\'s focus is to align technical requirements with business objectives. PASTA involves the threat modelling process from analysing threats to finding ways to mitigate them, but on a more strategic level and from an attacker\'s perspective. It identifies the threat, enumerates them, and then assigns them a score. This helps organisations find suitable countermeasures to be deployed to mitigate security threats. PASTA is divided into seven stages:</span></p><p style="text-align:center;background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61a7523c029d1c004fac97b3/room-content/8222ed08e31753d975ec3ec3aa2e43a9.png" alt="PASTA diagram" /><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap"><br /></span></p><p style="text-align:center;background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap"> </span></p><ol><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Define Objectives: </b></span><span style="font-weight:400;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap">The first stage focuses on noting the structure and defining objectives. This makes the end goal a whole lot clearer and ensures the relevant assets are threat modelled by defining an asset scope.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Define Technical Scope:</b></span><span style="font-weight:400;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> This is where architectural diagrams are defined, both logical and physical infrastructure. Helpful in mapping the attack surface and dependencies from the environment.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Decomposition &amp; Analysis: </b></span><span style="font-weight:400;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap">Each asset will have a defined trust boundary that encompasses all its components and data in this stage. For example, mapping threat vectors for a payment service and evaluating which components underlying the service can be leveraged for an attack; components can be libraries, dependencies, modules or underlying services etc.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Threat Analysis:</b></span><span style="font-weight:400;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> This refers to the extracted information obtained from threat intelligence. Useful to identify which applications are vulnerable to specific vectors; for example, a customer/public-facing application can be susceptible to DDOS, unauthorised data alteration etc.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Vulnerabilities &amp; Weaknesses Analysis:</b></span><span style="font-weight:400;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> it analyses the vulnerabilities of web application security controls. It identifies security flaws in the application and enumerates vulnerabilities. It is highly recommended to add mitigation to the identified threat in this stage. For example, when describing a past incident involving an exploit of a mail server, lessons learned or mitigation: lack of thorough testing before implementation and hardening the server.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Attack/Exploit Enumeration &amp; Modelling:</b></span><span style="font-weight:400;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> In this stage, we map out the possible threat landscape and the entire attack surface of our web application. We then map all potential attack vectors to the different nodes, identifying exploits and attack paths. </span><span style="background-color:transparent;font-size:12pt;white-space:pre-wrap">This stage simulates all the enumerated information extracted from all of the previous steps; this helps security professionals determine the extent and probability of successfully launching the identified vulnerabilities.</span></p></li><li style="list-style-type:decimal;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre"><p style="background-color:rgb(255, 255, 255);margin-top:0pt;margin-bottom:12pt"><span style="font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"><b>Risk Impact Analysis:</b></span><span style="font-weight:400;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(33, 37, 41);background-color:transparent;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap"> Based on the collective data from the previous stages, all of the scoped assets that have been affected are analysed and finally, based upon the risk analysis, recommended steps to mitigate the risks and eliminate all of the residual risks are documented.</span></p></li></ol>', 'taskType': 'none', 'taskNo': 5, 'taskCreated': '2022-05-09T22:22:44.804Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What threat modelling methodology assigns a rating system based on risk probability?', 'hint': ''}, {'questionNo': 2, 'question': '<p>What threat modelling methodology is built upon the CIA triad?</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What threat modelling methodology helps align technical requirements with business objectives?</p>', 'hint': ''}]}, {'taskTitle': 'Secure Coding', 'taskDesc': '<p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="font-size:18px">\ufeff</span><span>\ufeff</span><span style="font-size:24px">\ufeff</span><span style="font-size:24px">\ufeff</span><span style="font-size:24px;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-weight:700;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Secure code review &amp; analysis</span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline"><span style="font-size:16px;white-space:pre-wrap">According to research conducted by Verizon in 2020 on Data Breaches, 43% of breaches were attacks on web applications, while some other security breaches resulted from some vulnerabilities in web applications. </span></span><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:12.5pt;white-space:pre-wrap">Implementing a secure code review in the phases of an SDLC, especially during the implementation phase, will increase the resilience and security of the product without bearing any additional cost for future patches. Secure code review is defined as a measure where the code itself is verified and validated to ensure vulnerabilities that are found can be mitigated and removed to avoid vulnerabilities and flaws. Having the developers be aware and proactive in reviewing the code during development can result in faster mitigation responses and fewer unattended threats. Reviewing code is a crucial step in the SDLC for developers. It prevents any setbacks on the release and issues exposed to the users. As shown in the previous SSDLC task, the cost of the project itself and the effort put in is proportional and cheaper in the long run than the cost of applying code reviews and analysis. By implementing this approach, the organisation will also be compliant with the standards set by government bodies and certifications.\xa0</span></p><br /><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="background-color:transparent;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);font-weight:700;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Code review</span><span style="background-color:transparent;font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap"> can be done manually or automated. A manual code review is where an expert analyses and checks the source code by going line by line to identify vulnerabilities. Therefore, a high-quality manual code review requires the expert to communicate with the software developers to get hold of the purpose and functionalities of the application. The analysis output will then be reported to the developers if there is a need for bug fixing.\xa0</span><br /></p><br /><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="font-size:18pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-weight:700;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Code Analysis</span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Static analysis examines the source code without executing the program. In contrast, Dynamic analysis looks at the source</span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">code when the program is running, static analysis detects bugs at the implementation level, and dynamic analysis detects errors during program runtime. Automated Static Application Security Testing (SAST) automatically analyses and checks the source code.\xa0</span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap"><br /></span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="font-size:18pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">SAST</span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline"><span style="font-size:16px">SAST means Static Application Security Testing, a white box testing method that directly analyses the source code.</span></span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38">Many people tend to develop an application that could automate or execute processes quickly and improve performance and user experience, thereby forgetting the negative impact an application that lacks security could cause.\xa0</p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><b><br /></b></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><b>Why is it Static?</b>\xa0- Because the test is done before an application is live and running. SAST can even help detect vulnerabilities in your application before the code is merged or integrated into the software if added as part of the SDLC development phase.</p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><br /></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="font-size:18px"><b>How Does SAST Work</b></span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="font-size:1rem">SAST uses a testing methodology of analysing a source code to detect any traces of vulnerabilities that could provide a backdoor for an attacker. SAST usually analyses and scans an application before the code is compiled.</span><br /></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><br /></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38">The process of SAST is also known as White Box Testing. Once a vulnerability is detected, the following line of action is to check the code and patch the code before the code is compiled and deployed to live.\xa0<span style="font-size:1rem">White Box Testing is an approach or method that testers use to test software\'s inner structure and see how it integrates with the external systems.</span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline"><span style="font-size:16px"><br /></span></span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline"><span style="font-size:16px"><span style="font-size:24px">Bonus: SCA</span></span></span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="font-size:16px">\ufeffTo summarise, SAST is used to scan source code for security vulnerabilities. Another type of testing goes hand in hand with SAST, Software Composition Analysis (SCA). SCA is used to scan dependencies for security vulnerabilities, helping development teams track and analyse any open-source component brought into a project. SCA is now an essential pillar in security testing as modern applications are increasingly composed of open-source code. Nowadays, one of the biggest challenges developer teams have is ensuring their codebase is secure as applications are assembled from different building blocks.\xa0</span><span style="background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline"><span style="font-size:16px"><br /></span><br /></span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="font-size:12.5pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap"><br /></span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="font-size:24px;white-space:pre-wrap">DAST</span></p><p style="overflow-wrap:break-word;border:0px;margin-right:0px;margin-bottom:1.4em;margin-left:0px;padding:0px"><span style="font-size:16px;white-space:pre-wrap;font-family:Ubuntu">DAST means Dynamic Application Security Testing, a black-box testing method that finds vulnerabilities at runtime. </span><span style="white-space:pre-wrap">DAST is a tool to scan any web application to find security vulnerabilities. This tool is used to detect vulnerabilities inside a web application that has been deployed to production. DAST tools will always send alerts to the security team assigned for immediate remediation.\n</span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><span style="font-size:18px"><span style="font-weight:bolder">How Does DAST Work</span></span></p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38">DAST works by simulating automated attacks on an application, mimicking a malicious attacker. The goal is to find unexpected outcomes or results that attackers could use to compromise an application. Since DAST tools don\'t have internal information about the application or the source code, they attack just as an external hacker would—with the same limited knowledge and information about the application.</p><p style="margin-top:0pt;margin-bottom:0pt;line-height:1.38"><br /></p><p style="overflow-wrap:break-word;border:0px;margin-right:0px;margin-bottom:1.4em;margin-left:0px;padding:0px"><span style="white-space:pre-wrap">DAST is a tool that can be integrated very early into the software development lifecycle. Its focus is to help organisations reduce and protect against the risk that application vulnerabilities could cause. It is very different from SAST because DAST uses the Black Box Testing Methodology; it conducts its vulnerability assessment outside as it does not have access to the application source code. DAST is typically used during the testing phase of SDLC.</span></p><p style="font-size:15px;overflow-wrap:break-word;border:0px;margin-right:0px;margin-bottom:1.4em;margin-left:0px;padding:0px;color:rgb(58, 58, 58);font-family:&quot;Work Sans&quot;, sans-serif"><span style="color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:24px;white-space:pre-wrap">IAST</span></p><p style="overflow-wrap:break-word;border:0px;margin-right:0px;margin-bottom:1.4em;margin-left:0px;padding:0px"><span style="color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:16px;white-space:pre-wrap">IAST means Interactive Application Security Testing that analyses code for security vulnerabilities while the app is running. It is usually deployed side by side with the main application on the application server. </span><span style="white-space:pre-wrap">IAST is an application security tool designed for web and mobile applications to detect and report issues even while running. Before someone can fully comprehend IAST\'s understanding, the person must know what SAST and DAST mean. IAST was developed to stop all the limitations in both SAST and DAST. It uses the Grey Box Testing Methodology.\n\n<b><span style="font-size:18px">How Does IAST Work\n</span></b>IAST testing occurs in real-time, just like DAST, while the application runs in the staging environment. IAST can identify the line of code causing security issues and quickly inform the developer for immediate remediation. IAST checks the source code similar to SAST, but at the post-build stage, unlike SAST, which occurs during development. IAST agents are typically deployed on the application servers. When the DAST scanner performs its work by reporting a vulnerability, the deployed IAST agent will now return a line number of the issue from the source code. Can deploy IAST agents on an application server. During functional testing performed by a QA tester, the agent studies every pattern that a data transfer inside the application follows regardless of whether it\'s dangerous. For example, if data is coming from a user and the user wants to perform an SQL Injection on the application by appending an SQL query to a request, the request will be flagged as dangerous.</span></p><div><span style="color:rgb(33, 37, 41);font-family:Ubuntu, monospace;font-size:1rem"><br /></span></div><p style="margin-right:0px;margin-bottom:1.4em;margin-left:0px;font-size:15px;overflow-wrap:break-word;border:0px;padding:0px;color:rgb(58, 58, 58);font-family:&quot;Work Sans&quot;, sans-serif"><span style="color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:24px;white-space:pre-wrap"><i>Bonus: RASP</i></span></p><p style="margin-right:0px;margin-bottom:1.4em;margin-left:0px;font-size:15px;overflow-wrap:break-word;border:0px;padding:0px;color:rgb(58, 58, 58);font-family:&quot;Work Sans&quot;, sans-serif"><span style="font-size:16px;white-space:pre-wrap;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif">"RASP" stands for Runtime Application Self Protection. RASP is a runtime application integrated into an application to analyse inward and outward traffic and end-user behavioural patterns to prevent security attacks. This tool is different from the other tools as RASP is used after product release, making it a more security-focused tool when compared to the others that are known for testing.</span></p><p style="margin-right:0px;margin-bottom:1.4em;margin-left:0px;overflow-wrap:break-word;border:0px;padding:0px"><span style="font-size:16px;white-space:pre-wrap"><span style="font-size:18px"><b>How does RASP work\n</b></span>RASP is deployed to a web or application server next to the main application while running to monitor and analyse the inward and outward traffic behaviour. </span><span style="white-space:pre-wrap;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:1rem">Immediately once an issue is found, RASP will send alerts to the security team and immediately block access to the individual making a request. </span><span style="color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:1rem;white-space:pre-wrap">When you deploy RASP, it will secure the whole application against different attacks. It does not just wait or try to rely only on specific signatures of some known vulnerabilities.</span></p><p style="margin-right:0px;margin-bottom:1.4em;margin-left:0px;overflow-wrap:break-word;border:0px;padding:0px"><span style="white-space:pre-wrap;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:1rem">RASP is a complete solution that observes every detail of different attacks on your application and knows your application behaviour.</span></p><p style="margin-right:0px;margin-bottom:1.4em;margin-left:0px;overflow-wrap:break-word;border:0px;padding:0px"><span style="font-size:24px">Choosing tools</span></p><p style="margin-right:0px;margin-bottom:1.4em;margin-left:0px;overflow-wrap:break-word;border:0px;padding:0px"><span style="font-size:16px">SAST, DAST, and IAST are great tools that complement each other.\xa0</span>A key strength of DAST is that it identifies runtime issues—weaknesses that aren\'t discoverable when an application isn\'t running. SAST is excellent at identifying vulnerabilities while code is being written. Additionally, DAST looks at how an application responds to an attack, providing helpful insight into how likely it would be for that vulnerability to be manipulated. AST enables DevSecOps and supports continuous testing, monitoring, assessment, and validation in real-time. IAST helps prioritise and alert on vital critical risks, as defined by business goals and application security needs. The security experts always support using two or more of these tools to ensure better coverage, which will lower the risk of vulnerabilities in production. Ensure you fit these tools to the way engineers push code and interact with the pipeline; watch out for integrations and focus on providing support and education vs being a blocker. For example, if choosing SAST, you can integrate it when engineers push code, and they can get feedback on the PR before merging.</p><div><span style="color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:24px;white-space:pre-wrap">Timeline of Application Security Automation</span></div><div style="text-align:left"><span style="color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:16px;white-space:pre-wrap">Check the diagram below to see where you can fit security testing tools!</span></div><div style="text-align:center"><span style="color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:16px;white-space:pre-wrap"><br /></span></div><div style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61a7523c029d1c004fac97b3/room-content/ed41446ac19972111b12a8b41bdb3599.png" alt="Security Testing Timeline" /><br /></div><div style="text-align:left"><br /></div><div>Above is a standard timeline when choosing when to implement security testing tooling. As described earlier, SAST is a static approach; there is no need for a running application. Therefore, SAST can be implemented in the earliest development stages. SCA typically work best for Identifying open source components, like packages via dependencies. It is also beneficial for identifying open-source licenses being used, especially from a legal risk perspective. Because of this, you can implement governance and control by enforcing security and license policies across the different stages of SDLC.</div><div><br /></div><div>On the other hand, DAST relies on the execution of the application, so integrating it in the pipeline is not as straightforward as SAST. DAST is typically implemented after the acceptance stage of the code and pre-production stage.\xa0This is where the application starts running in testing environments (e.g. sandbox/staging) similar to IAST. DAST and IAST reside on the far right of your pipeline because the execution of your application is required for DAST tools to do their work. This can become quite time-consuming, significantly if your application has grown over time. RASP\xa0helps uncover third-party packages and associated vulnerabilities at runtime, more effectively enabling developers to prioritise the remediation and mitigation of their highest pressing vulnerabilities. This is usually enabled in the production stage as security vulnerabilities are evaluated during the runtime of the application.</div>', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2022-05-09T22:24:37.722Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '\xa0Is it recommended to use SAST analysis at the beginning of the SDLC? (y/n)', 'hint': ''}, {'questionNo': 2, 'question': '<p>Which type of code analysis uses the black-box method?</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>Which type of code analysis uses the white-box method?</p>', 'hint': ''}]}, {'taskTitle': 'Security Assessments', 'taskDesc': '<p></p><p style="margin-top:0pt;margin-bottom:0pt"><span>\ufeff</span><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:24pt;font-weight:700;white-space:pre-wrap">Security Assessment</span><br /></p><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12.499999999999998pt;font-family:Ubuntu,sans-serif;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap">A security assessment plays a primary role in achieving security in SDLC and should be implemented in all phases where possible. Security testing assesses a system, software or web application for vulnerabilities and other attack vectors. Because they test from a holistic point of view of the application, they are usually carried out at the end of the SDLC, in the Operations and Maintenance phase, once the version has included all the working components and updates. There are two types of assessments: Penetration Testing and Vulnerability Assessment. </span><span style="font-size:16.6667px;white-space:pre-wrap"><b>Usually, a company employs and authorises external security testers to attempt to break into a company’s network and systems legally</b></span><b style="font-size:16.6667px;white-space:pre-wrap;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif">.</b></p><p style="margin-top:0pt;margin-bottom:0pt"><br /></p><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:18pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-weight:700;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Vulnerability Assessment</span></p><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:1rem">Vulnerability Assessments focus on Finding Vulnerabilities, but do not validate them or simulate the findings to prove they are exploitable in reality. Typically, automated tools run against an organisation\'s network and systems. Examples of tools: are OpenVAS, Nessus (Tenable), and ISS Scanner. These scanners probe ports and services on systems across various systems and IP Addresses. Other activities include checking service versions against a database of vulnerabilities affecting said version. The result is a report with a list of vulnerabilities usually found, with an automated threat level severity classification, e.g., High/Medium/Low or an assigned CVSS score.</span><br /></p><p style="margin-top:0pt;margin-bottom:0pt"><br /></p><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:18pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-weight:700;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Penetration Testing</span></p><div><span style="white-space:pre-wrap;background-color:transparent;text-indent:36pt;font-size:1rem">It Includes Vulnerability Testing but goes more in-depth. It is extended by testing/validating of vulnerabilities, quantifying risks and attempting to penetrate systems. For example, trying to escalate privileges after a vulnerability is found, some vulnerabilities can be a lower risk but can be used as leverage to cause more damage. The tester can provide a thorough report with suggested countermeasures to mitigate the vulnerabilities. This makes it easier to understand the threats by demonstrating the actual risk, for example, recovering an employee password by exploiting the mentioned vulnerability.</span><br /></div><p style="margin-top:0pt;margin-bottom:0pt"><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:12pt;white-space:pre-wrap;text-indent:36pt">\xa0</span></p><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:18pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-weight:700;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Pros and Cons</span></p><p style="margin-top:0pt;margin-bottom:0pt"><b style="font-size:18px">Vulnerability Assessment</b><br /></p><table class="table table-bordered"><tbody><tr><td>Pros</td><td>Cons</td></tr><tr><td><ul style="margin-bottom:0px;text-align:left;padding-inline-start:48px"><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Suitable for quickly identifying potential vulnerabilities</span></p></li></ul></td><td><ul style="margin-bottom:0px;text-align:left;padding-inline-start:48px"><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Can produce a large number of reports</span></p></li></ul></td></tr><tr><td><ul style="margin-bottom:0px;text-align:left;padding-inline-start:48px"><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Part of the Penetration Test</span></p></li></ul></td><td><ul style="margin-bottom:0px;text-align:left;padding-inline-start:48px"><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Quality depends on the tool used</span></p></li></ul></td></tr><tr><td><ul style="margin-bottom:0px;text-align:left;padding-inline-start:48px"><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Better for Budget, they are cheaper than Pentests</span></p></li></ul></td><td><ul style="margin-bottom:0px;text-align:left;padding-inline-start:48px"><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Real-life scenarios for vulnerabilities are not considered (it could be behind a proxy or only exploitable with social engineering/credentials)</span></p></li></ul></td></tr><tr><td><br /></td><td><ul style="margin-bottom:0px;text-align:left;padding-inline-start:48px"><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">The low-risk vulnerability may be used as part of a more powerful attack.</span></p></li></ul></td></tr></tbody></table><p><span style="font-size:18px"><b>Penetration testing</b></span></p><table class="table table-bordered"><tbody><tr><td>Pros</td><td>Cons</td></tr><tr><td><span style="color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;text-align:left;text-indent:48px;white-space:pre-wrap">Tester shows organisations what an attacker could do.\n\n</span></td><td>Very Expensive</td></tr><tr><td><span style="color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;text-align:left;text-indent:48px;white-space:pre-wrap">How any vulnerabilities could be used against it by attackers – the real risk\n\n</span></td><td>Requires extensive planning and time to carry out the tests</td></tr><tr><td><span style="color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;text-align:left;text-indent:48px;white-space:pre-wrap">Can be shown to the customer \n</span></td><td><br /></td></tr></tbody></table>', 'taskType': 'none', 'taskNo': 7, 'taskCreated': '2022-04-22T13:04:21.096Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Which form of assessment is more budget-friendly and takes less time?', 'hint': ''}, {'questionNo': 2, 'question': '<p>Which type of assessment identifies vulnerabilities and attempts to exploit them?</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>When do you typically carry out Vulnerability Assessments or Pentests?</p>', 'hint': ''}]}, {'taskTitle': 'SSDLC Methodologies', 'taskDesc': '<p></p><h2><span>\ufeff</span><span>\ufeff</span><span style="font-family:Ubuntu">\ufeff</span><span style="font-size:18pt;font-family:Ubuntu, sans-serif;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">SSDLC Methodologies</span></h2><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:12pt;font-family:Ubuntu, sans-serif;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">You can follow different methodologies to integrate security in the SDLC best. Before we dive into each method., regardless of the chosen development methodology (Agile, DevOps, Extreme Waterfall, etc.), there is a need to:</span></p><ul style="margin-bottom:0px;padding-inline-start:48px"><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Build with security in mind</span></p></li><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Introduce testing focused on security</span></p><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap"><br /></span></p></li></ul><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:12pt;font-family:Ubuntu, sans-serif;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">There are several methodologies for SDLC; some examples of widely used methodologies are:</span></p><ul style="margin-bottom:0px;padding-inline-start:48px"><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Microsoft\'s Security Development Lifecycle (SDL)</span></p></li><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">OWASP Secure Software Development Life Cycle Project (S-SDLC)</span></p></li><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:12pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Software Security Touchpoints</span></p></li></ul><p style="margin-top:0pt;margin-bottom:0pt;padding:0pt 0pt 12pt"><span style="background-color:transparent;color:rgb(67, 67, 67);font-family:Ubuntu, sans-serif;font-size:18pt;white-space:pre-wrap">Microsoft\'s SDL</span><br /></p><h4><span style="font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(102, 102, 102);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">SDL principles:</span></h4><ul style="margin-bottom:0px;padding-inline-start:48px"><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Secure by Design: Security is a built-in quality attribute affecting the whole software lifecycle.</span></p></li><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Security by Default: Software systems are constructed to minimise potential harm caused by attackers, e.g. software is deployed with the least necessary privilege.</span></p></li><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Secure in Deployment: software deployment is accompanied by tools and guidance supporting users and administrators.</span></p></li><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Communications: software developers are prepared for occurring threats by communicating openly and timely with users and administrators</span></p></li></ul><p style="margin-top:0pt;margin-bottom:12pt"><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:12pt;white-space:pre-wrap"><br /></span></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:12pt;white-space:pre-wrap">SDL is a collection of mandatory security activities grouped by the traditional software development lifecycle phases. </span><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:12pt;white-space:pre-wrap">Data is collected to assess training effectiveness. </span><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:12pt;white-space:pre-wrap">In-process metrics are used to confirm process compliance. </span><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:12pt;white-space:pre-wrap">Post-release metrics are used to guide future changes. </span><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:12pt;white-space:pre-wrap">SDL places heavy emphasis on understanding the cause and effect of security vulnerabilities. </span><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:12pt;white-space:pre-wrap">A development team must complete the mandatory security activities to comply with the Microsoft SDL process. You can implement SDL by following these practices:</span></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="background-color:transparent;color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:12pt;white-space:pre-wrap"><br /></span></p><table class="table table-bordered" style="text-align:center"><tbody><tr><td><b><span style="font-size:18px">Practice</span></b></td><td><b><span style="font-size:18px">Why?</span></b></td></tr><tr><td><h3><span style="font-size:16px;font-family:Ubuntu"><b>Provide Training</b></span></h3></td><td><div style="text-align:center;box-sizing:inherit;color:rgb(0, 0, 0);font-family:&quot;Segoe UI&quot;, SegoeUI, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size:15px"><span style="font-family:Ubuntu;font-size:14px">Engineers, program and product managers must understand security basics and know how to build security into software and services to make products more secure while still addressing business needs and delivering user value. </span></div><div style="text-align:center;box-sizing:inherit;color:rgb(0, 0, 0);font-family:&quot;Segoe UI&quot;, SegoeUI, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size:15px"><span style="font-family:Ubuntu;font-size:14px">Practical training will complement and re-enforce security policies, SDL practices, standards, and software security requirements and be guided by insights derived through data or newly available technical capabilities.</span></div><div style="box-sizing:inherit;color:rgb(0, 0, 0);font-family:&quot;Segoe UI&quot;, SegoeUI, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size:15px;text-align:start"><span style="font-family:Ubuntu;font-size:14px">\xa0</span></div></td></tr><tr><td><h3><span style="font-size:16px;font-family:Ubuntu"><b>Define Security Requirements</b></span></h3></td><td><span style="color:rgb(0, 0, 0);font-family:Ubuntu;font-size:14px;text-align:start">Considering security and privacy is a fundamental aspect of developing highly secure applications and systems. Regardless of the development methodology being used, must continually update security requirements to reflect changes in required functionality and changes to the threat landscape.</span><br /></td></tr><tr><td><h3><span style="font-family:Ubuntu;font-size:16px">Define Metrics and Compliance Reporting\xa0</span></h3></td><td><span style="color:rgb(0, 0, 0);font-family:Ubuntu;font-size:14px;text-align:start">It is essential to define the minimum acceptable levels of security quality and hold engineering teams accountable for meeting those criteria. Defining these early helps a team understand risks associated with security issues, identify and fix security defects during development, and apply the standards throughout the entire project.</span><br /></td></tr><tr><td><h3><span style="font-family:Ubuntu;font-size:16px">Perform Threat Modeling</span></h3></td><td><div style="box-sizing:inherit;color:rgb(0, 0, 0);font-family:&quot;Segoe UI&quot;, SegoeUI, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size:15px;text-align:start"><span style="font-family:Ubuntu;font-size:14px">This practice allows development teams to consider, document, and discuss the security implications of designs in their planned operational environment and in a structured fashion.</span></div><div style="box-sizing:inherit;color:rgb(0, 0, 0);font-family:&quot;Segoe UI&quot;, SegoeUI, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size:15px;text-align:start"><span style="font-family:Ubuntu;font-size:14px">\xa0</span></div><div style="box-sizing:inherit;color:rgb(0, 0, 0);font-family:&quot;Segoe UI&quot;, SegoeUI, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size:15px;text-align:start"><span style="font-family:Ubuntu;font-size:14px">Applying a structured approach to threat scenarios helps a team more effectively and less expensively identify security vulnerabilities, determine risks from those threats, make security feature selections and establish appropriate mitigations.</span></div></td></tr><tr><td><h3><span style="font-family:Ubuntu;font-size:16px">Establish Design Requirements</span></h3></td><td><span style="color:rgb(0, 0, 0);font-family:Ubuntu;font-size:14px;text-align:start">The SDL is typically thought of as assurance activities that help engineers implement "secure features", in that the features are well-engineered concerning security. Engineers will normally rely on security features, such as cryptography, authentication, logging, etc. In many cases, the selection or implementation of security features has proven so complicated that design or implementation choices are likely to result in vulnerabilities. Therefore, it\'s crucially essential to apply these consistently and with a consistent understanding of their protection.\xa0</span><br /></td></tr><tr><td><h3><span style="font-size:16px;font-family:Ubuntu">Define and Use Cryptography Standards</span></h3></td><td><span style="color:rgb(0, 0, 0);font-family:&quot;Segoe UI&quot;, SegoeUI, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size:15px;text-align:start"><span style="font-size:14px">It\'s critically important to ensure all data, including security-sensitive information and management and control data, is protected from unintended disclosure or alteration when transmitted or stored. Encryption is typically used to achieve this. </span><span style="font-family:Ubuntu;font-size:14px">E.g.,\xa0</span></span><span style="font-family:Ubuntu;font-size:14px">only use industry-vetted encryption libraries and ensure they\'re implemented to allow them to be easily replaced if needed.</span><br /></td></tr><tr><td><h3><span style="font-family:Ubuntu;font-size:16px">Manage the Security Risk of Using Third-Party Components</span></h3></td><td><p><span style="color:rgb(0, 0, 0);font-family:Ubuntu;font-size:14px;text-align:start">When selecting third-party components to use, it\'s essential to understand the impact of a security vulnerability on the security of the more extensive system into which they are integrated. Having an accurate inventory of third-party components and a plan to respond when new vulnerabilities are discovered will go a long way toward mitigating this risk.</span><br /></p></td></tr><tr><td><b>Use Approved Tools<br /></b></td><td><span style="color:rgb(0, 0, 0);font-family:Ubuntu;font-size:14px;text-align:start">Define and publish a list of approved tools and their associated security checks, such as compiler/linker options and warnings. Engineers should strive to use the latest version of approved tools, such as compiler versions, and take advantage of new security analysis functionality and protections.</span><br /></td></tr><tr><td><h3><span style="font-size:16px;font-family:Ubuntu"><b>Perform\xa0 Security Testing (SAST, DAST, IAST)</b></span></h3></td><td><span style="color:rgb(0, 0, 0);font-family:Ubuntu;font-size:14px;text-align:start">Analysing the source code before compilation provides a highly scalable method of security code review and helps ensure that secure coding policies are being followed. The same goes for p</span><span style="font-size:14px;font-family:Ubuntu">erforming run-time verification of your fully compiled or packaged software checks functionality that is only apparent when all components are integrated and running.</span><br /></td></tr><tr><td><h3><span style="font-family:Ubuntu;font-size:16px"><b>Perform Security Assessments: Vulnerability Assessment &amp; Penetration Testing</b></span></h3></td><td><span style="color:rgb(0, 0, 0);font-family:Ubuntu;font-size:14px;text-align:start">The objective of a penetration test is to uncover potential vulnerabilities resulting from coding errors, system configuration faults, or other operational deployment weaknesses. As such, the test typically finds the widest variety of vulnerabilities.\xa0</span><br /></td></tr><tr><td><h3><span style="font-family:Ubuntu;font-size:16px">Establish a Standard Incident Response Process\xa0</span></h3></td><td><span style="color:rgb(0, 0, 0);font-family:Ubuntu;font-size:14px;text-align:start">Preparing an Incident Response Plan is crucial for helping to address new threats that can emerge over time.<span style="font-family:Ubuntu;font-size:14px">\xa0</span></span><span style="font-family:Ubuntu;font-size:14px">The plan should include whom to contact in case of a security emergency and establish the protocol for security servicing, including methods for code inherited from other groups within the organisation and for third-party code.\xa0</span><div style="box-sizing:inherit;color:rgb(0, 0, 0);font-family:&quot;Segoe UI&quot;, SegoeUI, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size:15px;text-align:start">\xa0</div></td></tr></tbody></table><p style="text-align:center;margin-top:0pt;margin-bottom:12pt"><br /></p><p style="margin-top:0pt;margin-bottom:12pt"><span style="background-color:transparent;color:rgb(67, 67, 67);font-family:Ubuntu, sans-serif;font-size:18pt;white-space:pre-wrap">OWASP\'s S-SDLC</span><br /></p><h4><span style="font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(102, 102, 102);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">S-SDLC Principles</span></h4><ul style="margin-bottom:0px;padding-inline-start:48px"><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">SDL is a collection of mandatory security activities grouped by the traditional software development lifecycle phases.</span></p></li><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Data is collected to assess training effectiveness.</span></p></li><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">In-process metrics are used to confirm process compliance.</span></p></li><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">Post-release metrics are used to guide future changes.</span></p></li><li style="list-style-type:disc;font-size:12pt;font-family:Ubuntu, sans-serif;color:rgb(0, 0, 0);background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre"><p style="margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">SDL places heavy emphasis on understanding the cause and effect of security vulnerabilities.</span></p></li><li style="list-style-type:disc;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline"><p style="color:rgb(0, 0, 0);font-family:Ubuntu, sans-serif;font-size:12pt;white-space:pre;text-align:left;margin-top:0pt;margin-bottom:0pt"><span style="font-size:12pt;background-color:transparent;font-variant-numeric:normal;font-variant-east-asian:normal;vertical-align:baseline;white-space:pre-wrap">A development team must complete the sixteen mandatory security activities to comply with the Microsoft SDL process.</span></p><p style="text-align:center;margin-top:0pt;margin-bottom:0pt"></p><div style="text-align:left"><span style="white-space:pre-wrap"><br /></span></div><span style="font-size:12pt;white-space:pre"><div style="text-align:center"><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61a7523c029d1c004fac97b3/room-content/1e76d9be1c116a8d68925162aa3b01f0.png" alt="OWASP SSDLC methodology" style="font-size:12pt;background-color:transparent" /></div></span><p></p></li></ul>OWASP S-SDLC aims to build "security quality gates", to support quality and secure software made throughout the pipeline. This is done by following an Agile Security approach, where sprints are dedicated to security. Examples of Sprints can include: Code reviews, authentication, authorisation, input validation, and assessing technical risks like code injections. The gates comprise sprints focusing on similar building blocks like those seen in Microsoft SDL. OWASP S-SDLC Agile approach is heavily influenced and based on a "Maturity Model" approach, in particular OWASP SAMM. The Software Assurance Maturity Model (SAMM) is an open framework to help organisations formulate and implement a software security strategy tailored to the organisation\'s specific risks. It helps to evaluate an organisation\'s existing software security practices, build a software security assurance program, demonstrate improvements to that program, and define and measure security activities for an organisation. SAMM helps explain objectives, actions, results, success metrics, costs etc. An example would be a security scorecard for gap analysis, for instance, in a particular area, like endpoint protection. It aims to answer "How well are we doing and where do we want to get to?". <a href="https://owasp.org/www-project-samm/" target="_blank">OWASP SAMM link</a><p></p><p><br /></p><p>Another critical security model is the Building Security In Maturity Model (BSIMM). BSIMM is a study of real-world software security initiatives and reflects the current state of software security.\xa0<span style="font-size:1rem">BSIMM can be described as a "measuring stick" to understand your security posture by providing a comparison of other companies\' security states. In other words, it does not tell you what you should do but rather what you are doing wrong. There are hundreds of organisations involved.<a href="https://owaspsamm.org/blog/2020/10/29/comparing-bsimm-and-samm/" target="_blank"> BSIMM link</a></span></p><p></p>', 'taskType': 'none', 'taskNo': 8, 'taskCreated': '2022-05-16T14:21:01.745Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What methodology follows a set of mandatory procedures embedded in the SDLC?', 'hint': ''}, {'questionNo': 2, 'question': '<p>What Maturity Model helps you measure tailored risks facing your organisation?</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What maturity model acts as a measuring stick to determine your security posture?</p>', 'hint': ''}]}, {'taskTitle': 'Secure Space Lifecycle', 'taskDesc': '<h2><span>\ufeff</span><span style="font-size:24px">Introduction</span></h2><p>Ensure you are able to travel through the SDLC in a secure manner by selecting which secure processes you can implement at each stage.</p><p><b><span style="font-size:18px">Safe travels!</span></b></p><p>To\xa0<span style="font-size:1rem">start, select\xa0</span><code>View Site</code></p>', 'taskType': 'static-site', 'taskNo': 9, 'taskCreated': '2022-04-22T13:04:46.555Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '628eba27437056aee227cfd4', 'questions': [{'questionNo': 1, 'question': 'What is the flag?', 'hint': ''}], 'staticSites': [{'_id': '6538e19fcc24f2e6ba0800fe', 'title': 'SDLC Game', 'url': 'https://static-labs.tryhackme.cloud/sites/sdlc-game/', 'autoOpen': False}]}]}