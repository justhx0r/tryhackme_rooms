{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/268771cc9cef46ed20e557612028c6ba.png', 'title': 'Tony the Tiger', 'description': 'Learn how to use a Java Serialisation attack in this boot-to-root', 'code': 'tonythetiger', 'users': 6017, 'tags': ['CVE-2015-7501', 'Java Web App', 'cryptography', 'steganography', 'privilege escalation'], 'type': 'challenge', 'difficulty': 'easy', 'userCompleted': False, 'upVotes': 274, 'created': '2020-04-11T23:40:57.637Z', 'published': '2020-04-11T10:01:38.747Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://i.imgur.com/JjEWAGS.png', 'creator': 'cmnatic', 'tasks': [{'taskTitle': 'Deploy!', 'taskDesc': '<p>Firstly, ensure you are connected to the TryHackMe network via either the VPN Service or Kali Instance (subscribed members only). If you are not using the <a href="https://tryhackme.com/room/kali" target="_blank">Kali Instance</a>, you can <a href="https://tryhackme.com/access" target="_blank">verify connectivity to the THM network on the "access" page</a>. Or if you are new, you can learn how to connect by <a href="https://tryhackme.com/room/openvpn" target="_blank">visiting the OpenVPN Room</a>.</p><p><b style="font-size:1rem">Please allow up towards five minutes for this instance to fully boot - even as a subscribed member.</b><span style="font-size:1rem"> This is not a TryHackMe or AWS bottleneck, rather Java being Java and the web application taking time to fully initialise after boot.</span><br /></p><p><br /></p><p style="text-align:center"><span style="font-size:24px">Your Instance IP Address: </span><code>MACHINE_IP</code></p><p style="text-align:left"><br /></p><p style="text-align:center">Deploying now and proceeding with the material below should allow for plenty of time for the instance to fully boot.</p>', 'taskType': 'vm', 'taskNo': 1, 'taskCreated': '2020-03-16T23:54:55.799Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '5e63017bd183d07bf3c12cb2', 'questions': [{'questionNo': 1, 'question': '<p>I have deployed my Instance!</p>', 'hint': ''}]}, {'taskTitle': 'Support Material', 'taskDesc': '<p>Whilst this is a CTF-style room, as the approach to ultimately "rooting" the box is new to TryHackMe, I will explain it a little and leave you to experiment with. There are flags laying around that aren\'t focused on the CVE, so I still encourage exploring this room.\xa0<span style="font-size:1rem">Explaining the whole-theory behind it is a little out of scope for this. However, I have provided some further reading material that may help with the room - or prove interesting!</span></p><p><span style="font-size:1rem"><br /></span></p><p style="text-align:center"><span style="font-size:24px">What is "Serialisation"?</span></p><p style="text-align:left">Serialisation at an abstract is the process of converting data - specifically "Objects" in Object-Oriented Programming (OOP) languages such as Java into lower-level formatting known as "byte streams", where it can be stored for later use such as within files, databases, and/or traversed across a network. It is then later converted from this "byte stream" back into the higher-level "Object". This final conversion is known as "De-serialisation"</p><p style="text-align:left"><br /></p><p style="text-align:center"><img src="https://media.geeksforgeeks.org/wp-content/uploads/serialization-5.jpg" style="width:572.339px;float:none;height:309.194px" /></p><p style="text-align:justify">\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0<span style="text-align:center;font-size:1rem">(kindly taken from\xa0</span><a href="https://www.geeksforgeeks.org/classes-objects-java/">https://www.geeksforgeeks.org/classes-objects-java/</a><span style="text-align:center;font-size:1rem">)</span></p><p style="text-align:justify"><span style="text-align:center;font-size:1rem"><br /></span></p><p style="text-align:center"><span style="font-size:24px">So what is an "Object"?</span></p><p style="text-align:left">"Objects" in a programming-context can be compared to real-life examples. Simply, an "Object" is just that - a thing. "Objects" can contain various types of information such as states or features. To correlate to a real-world example...Let\'s take a lamp.</p><p><span style="font-size:1rem">A lamp is a great "Object". a lamp can be on or off, the lamp can have different types of bulbs - but ultimately it is still a lamp. What type of bulb it uses and whether or not the lamp is "on" or "off"\xa0in this instance is all stored within an "Object".</span></p><p><span style="font-size:1rem"><br /></span></p><p style="text-align:center"><span style="font-size:24px">How can we exploit this process?</span></p><p style="text-align:left"><span style="font-size:1rem">A "serialisation" attack is the injection and/or modification of data throughout the "byte stream" stage. When this data is later accessed by the application, malicious code can result in serious implications...ranging from DoS, data leaking or much more nefarious attacks like being "rooted"! Can you see where this is going...?</span></p>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2020-03-17T00:30:47.420Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>What is a great IRL example of an "Object"?</p>', 'hint': ''}, {'questionNo': 2, 'question': '<p>What is the acronym of a possible type of attack resulting from a "serialisation" attack?</p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What lower-level format does data within "Objects" get converted into?</p>', 'hint': ''}]}, {'taskTitle': 'Reconnaissance', 'taskDesc': '<p>Your first reaction to being presented with an instance should be information gathering.</p>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2020-03-17T00:38:14.014Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>What service is running on port "8080"</p>', 'hint': ''}, {'questionNo': 2, 'question': '<p>What is the name of the front-end application running on "8080"?</p>', 'hint': ''}]}, {'taskTitle': "Find Tony's Flag!", 'taskDesc': "<p>Tony has started a <i>totally</i> unbiased blog about taste-testing various cereals! He'd love for you to have a read...</p>", 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2020-03-17T00:48:30.240Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'This flag will have the formatting of "THM{}"', 'hint': ''}]}, {'taskTitle': 'Exploit!', 'taskDesc': '<p>Download the attached resources (48.3MB~) to this task by pressing the "Download" icon within this task.</p><p style="text-align:center">FILE NAME: <b>jboss.zip (48.3MB~)</b></p><p style="text-align:center">MD5 CHECKSUM:\xa0<b>ED2B009552080A4E0615451DB0769F8B</b></p><p style="text-align:left">The attached resources are compiled together to ensure that everyone is able to complete the exploit, <b>these resources are not my own creations</b> (although have been very slightly modified for compatibility) <b>and all credit is retained to the respective authors listed within "credits.txt" </b>as well as the end of the room.</p><p style="text-align:center"><img src="https://i.imgur.com/a1yznLT.png" style="width:220px" /></p><p style="text-align:left">It is your task to research the vulnerability <a href="https://www.rapid7.com/db/vulnerabilities/http-jboss-cve-2015-7501" target="_blank">CVE-2015-7501</a>\xa0and to use it to obtain a shell to the instance using the payload &amp; exploit provided. There may be a few ways of doing it...If you are struggling, <a href="https://blog.cmnatic.co.uk/posts/exploiting-java-deserialization-windows-demo/" target="_blank">I have written an example of how this vulnerability is used to launch an application on Windows.</a></p><p style="text-align:left">There\'s also a couple of ways of exploiting this service - I really encourage you to investigate into them yourself!</p>', 'taskType': 'downloadable', 'taskNo': 5, 'taskCreated': '2020-03-17T00:54:38.420Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '5e70332a56bb1b07edb3c969', 'questions': [{'questionNo': 1, 'question': '<p>I have obtained a shell.</p>', 'hint': ''}]}, {'taskTitle': "Find User JBoss' flag!", 'taskDesc': '<p>Knowledge of the Linux (specifically Ubuntu/Debian)\'s file system structure &amp; permissions is expected. If you are struggling, I strongly advise checking out the <a href="https://tryhackme.com/module/linux-fundamentals" target="_blank">Linux Fundamentals module</a>.</p>', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2020-03-17T01:10:05.161Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>This flag has the formatting of "THM{}"</p>', 'hint': ''}]}, {'taskTitle': 'Escalation!', 'taskDesc': '<p>Normal boot-to-root expectations apply here! It is located in /root/root.txt. Get cracking :)</p>', 'taskType': 'none', 'taskNo': 7, 'taskCreated': '2020-03-17T01:12:34.034Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>The final flag <b>does not </b>have the formatting of <b>"THM{}"</b></p>', 'hint': 'We will, we will Rock You...'}]}, {'taskTitle': 'Final Remarks, Credits & Further Reading', 'taskDesc': '<p style="text-align:center"><span style="font-size:24px">Final Remarks</span></p><p>I hope this was a refreshing CTF, where classic techniques meet new content on THM - all of which are not based around Metasploit!</p><p>This type of attack can prove to be extremely dangerous - as you\'d hopefully have discovered by now. It\'s still very real as\xa0<i>sigh,\xa0</i>java web applications are still used day-to-day. Because of their nature, "Serialisation" attacks all execute server-side, and as such - it results in being very hard to prevent from Firewalls / IDS\' / IPS\'.</p><p><span style="color:rgb(33, 37, 41);font-size:1rem;--darkreader-inline-color:#d1cdc7">For any and all feedback, questions, problems or future ideas you\'d like to be covered,\xa0</span><a href="https://discord.gg/QgC6Tdk" target="_blank">please get in touch in the TryHackMe Discord (following Rule #1)</a><br /></p><p style="color:rgb(33, 37, 41);--darkreader-inline-color:#d1cdc7">So long and thanks for all the fish!</p><p style="margin-bottom:0px;color:rgb(33, 37, 41);--darkreader-inline-color:#d1cdc7">~<a href="https://tryhackme.com/p/cmnatic" target="_blank">CMNatic</a></p><p style="text-align:center"><span style="font-size:24px">Credits</span></p><p style="text-align:left">Again, to reiterate, the provided downloadable material has only slightly been adapted to ensure compatibility for all users across TryHackMe. Generating and executing the payload especially is very user-environment dependant (i.e. Java versions, of which are hard to manage on Linux, etc...)</p><p>Many thanks to\xa0<a href="https://github.com/byt3bl33d3r" target="_blank">byt3bl33d3r</a>\xa0for providing a reliable Proof of Concept, and finally to all the contributors towards <a href="https://github.com/frohoff/ysoserial" target="_blank">Frohoff\'s Ysoserial</a>\xa0which facilitates the payload generation used for this CVE.</p><p><br /></p><p style="text-align:center"><span style="font-size:24px">Further Reading</span></p><p style="text-align:left">\ufeffIf you are curious into the whole "Serialisation" and "De-Serialisation" process and how it can be exploited, I recommend\xa0the following resources:</p><ul><li style="text-align:left"><a href="https://www.baeldung.com/java-serialization">https://www.baeldung.com/java-serialization</a><a href="https://www.baeldung.com/java-serialization"></a></li><li style="text-align:left"><a href="http://frohoff.github.io/appseccali-marshalling-pickles/">http://frohoff.github.io/appseccali-marshalling-pickles/</a><a href="http://frohoff.github.io/appseccali-marshalling-pickles/"></a></li><li style="text-align:left"><a href="https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data">https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data</a><a href="https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data"></a></li><li style="text-align:left"><a href="https://www.darkreading.com/informationweek-home/why-the-java-deserialization-bug-is-a-big-deal/d/d-id/1323237">https://www.darkreading.com/informationweek-home/why-the-java-deserialization-bug-is-a-big-deal/d/d-id/1323237</a><br /></li></ul>', 'taskType': 'none', 'taskNo': 8, 'taskCreated': '2020-03-17T01:25:25.826Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>TIL!</p>', 'hint': ''}]}]}