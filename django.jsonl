{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/c11fb449f10add8bc11a137fef9e979c.png', 'title': 'Introduction to Django', 'description': 'How it works and why should I learn it?', 'code': 'django', 'users': 40283, 'tags': ['security', 'django', 'python', 'web'], 'type': 'walkthrough', 'difficulty': 'easy', 'userCompleted': False, 'upVotes': 1040, 'created': '2020-05-28T08:45:44.467Z', 'published': '2020-05-28T19:05:08.324Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://i.imgur.com/S85p0V3.png', 'creator': 'Swafox', 'tasks': [{'taskTitle': 'Unit 1: Introduction', 'taskDesc': '<p style="text-align:center"><img src="https://i.imgur.com/mTLe7YG.jpg" style="width:25%;float:none;border-radius:5px" /><br /></p><p>Learning Python can be extremely useful for penetration testers, and a simple understanding of its frameworks can be a key to success. In this lesson, we are going to learn about one of the best ones ever made: Django.\xa0</p><p>Django is a high-level Python web framework that enables rapid development of secure and maintainable websites. It allows you to develop websites and web applications in a matter of hours.</p><p>Django can automatically compile HTML code, therefore making it possible for anyone without any advanced knowledge in markup languages to develop a website. Additionally, Django is arguably one of the most secure developing frameworks, which in the right configuration, can strongly resist against SQL injections and XSS.</p><p>All in all, if you are familiar with Python and considering creating a website, Django can be a really good choice. As for penetration tester, it is important to understand the basic structure of Django-powered websites in order to be able to identify possible weaknesses and mistakes a developer can make.</p>', 'taskType': 'none', 'taskNo': 1, 'taskCreated': '2020-04-02T08:52:23.488Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read the above</p>', 'hint': ''}]}, {'taskTitle': 'Unit 2 - Getting started', 'taskDesc': '<p>Attention! If you have <u>absolutely no</u> experience in python, I recommend doing this room on python basics: "<a href="https://tryhackme.com/room/pythonbasics" target="_blank">Intro To Python</a>"</p><p>For this room, we are going to use Python 3. (Any 3.x.x works here) with Django 2.2</p><p>Install Django by running this command:</p><p><code>pip3 install Django==2.2.12</code></p><p><br /></p><p><span style="font-size:1rem">Now we are ready to create and properly configure our first website.</span></p><p><span style="font-size:1rem">Make a directory for your project files and navigate there with the command prompt.</span><br /></p><p>run <code>django-admin startproject {project_name}</code> in order to start your project. (Replace {project_name} with your prefered name).</p><p>Run <code>python3 manage.py migrate</code>to automatically configure new files.<br /></p><p>After creating the project you can see that Django creates a file <code>manage.py</code> and a file directory named after your project.</p><p><code>manage.py</code> is a command-line utility that lets you interact with your Django project in various ways.\xa0<span style="font-size:1rem">It is especially handy in creating web-apps, managing databases, and most importantly running the server.</span></p><p>Basic syntax for using this utility is <code>python3 manage.py {command}</code></p><p><span style="font-size:1rem">&gt; </span><b style="font-size:1rem">runserver</b><br /></p><p><span style="font-size:1rem">Runserver is the most important command used with manage.py; It allows you to deploy your website on the server. Django has a wonderful feature that allows you to instantly see changes made on the website without restarting it. (It is only necessary to restart runserver command when adding a new app).</span><br /></p><p>Run this command and navigate to your website with IP given in the outline. You should see a page like this:</p><p><img src="https://i.imgur.com/sPAlYxt.png" style="font-size:1rem;width:50%;float:left" /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p>Note: If you are willing to run the server to your local network, just add <i>0.0.0.0:8000</i> after runserver command. (In case if you get an error afterward, just go to settings.py located your websites folder and add this address to ALLOWED_HOSTS)</p><p><img src="https://i.imgur.com/OXIf867.png" style="width:393px" /><br /></p><p><span style="font-size:1rem">&gt; </span><b style="font-size:1rem">createsuperuser</b><br /></p><p><span style="font-size:1rem">This command allows you to create an admin account for your Django web admin panel.\xa0</span><br /></p><p>Run this command and access the panel at IP:8000/admin</p><p><img src="https://i.imgur.com/nGCEOV5.png" style="width:415px" /></p><p><span style="font-size:1rem">&gt; </span><b style="font-size:1rem">startapp</b><br /></p><p>Startapp allows you to initialize an app for your project. Django projects can have infinite number of apps. Basic syntax:</p><p><code>python3 manage.py startapp {app_name}</code></p>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2020-04-05T10:42:11.318Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>How would we create an app called Forms?\xa0</p>', 'hint': ''}, {'questionNo': 2, 'question': '<p>How would we run our project to a local network?</p>', 'hint': ''}]}, {'taskTitle': 'Unit 3 - Creating a website', 'taskDesc': '<p>Now, let\'s go ahead and create a very simple app:\xa0</p><p>1. Create an app using a command from Unit 2 and call it whatever you like. I will be using \'Articles\' for this lesson.</p><p>2. Head over to settings.py and include your <b>app name</b> in *INSTALLED_APPS*:</p><p><img src="https://i.imgur.com/nBmIbMm.png" style="width:201px;" /><br /></p><p>3. Head over to urls.py (located in the main folder!) and include a path to your app there:</p><p><img src="https://i.imgur.com/LQO8uBx.png" style="width:428px;" /><br /></p><p><i>Note that {app_name} should be replaced with your app\'s name.</i></p><p>4. Migrate your changes by running <code>python3 manage.py migrate</code></p><p>Your app is now located in the https://IP:8000/{app_name}\xa0</p><p><span style="font-size:1rem;">After successful app creation let\'s move over to the app directory and proceed there.\xa0</span><span style="font-size:1rem;">As seen, Django automatically creates files inside your app folder. We are going to go through their purposes as we continue creating our website.</span><br /></p><p>For now, create a file <code>urls.py</code>\xa0which will be especially handy in the closest future.</p><p><span style="font-size:1rem;">Generally speaking, Django-driven websites operate in this way:</span><br /></p><p><img src="https://i.imgur.com/S5KdyNB.png" style="width:50%;" /><br /></p><p><span style="font-size:1rem;">urls.py is responsible for accepting and redistributing incoming HTTP requests via views.py</span><br /></p><p><img src="https://i.imgur.com/amH7lgp.png" style="width:323px;" /><br /></p><p>Basic syntax for urls.py can be seen on the screenshot above.\xa0</p><p>We create a variable called <code>urlpatterns</code> in which we state names of our directories. <code>views.index</code> calls <i>index</i> function from <code>views.py</code> to be executed therefore creating some output response for HTTP request.</p><p><b>For example</b>, if we are willing to create a directory called "archive", with function "main", we would include this in urls.py:</p><p><code>path(\'archive/\', views.main, name =\'main\')</code></p><p>NOTE: Paths with blank directory (\'\') are going to call the function whenever the app is accessed at https://IP/{app_name}; any other directories are going to <b>extend</b> the link, for example, the archives directory I used above would be located in<code>https://IP/articles/archive</code>.</p><p><code>views.py</code> is responsible for carrying out functions which are called using urls.py</p><p>Now let\'s create a simple HTTP response function for our app.</p><p>The syntax is pretty easy for this one. All you have to do is create a function with a certain name which you will be referring to in urls.py\xa0</p><p><span style="font-size:1rem;">Here\'s an example of a function that returns "Hello, world!" message:</span><br /></p><p><img src="https://i.imgur.com/hAHXPD8.png" style="width:366px;" /><br /></p><p> Note that in this case the function is called index, and so in order to make it work you need to put this line into your urls.py</p><p><code>path(\'\', views.index, name=\'index\'),</code></p><p><img src="https://i.imgur.com/Rt7S4NZ.png" style="width:339px;" /><span style="font-size:1rem;"><br /></span></p><p><span style="font-size:1rem;">Now navigate to your http://IP:8000/{app_name} and see if "Hello, world!" popped out.</span></p><p>By this point, we were able to create a really simple website example that returns a text message. We are also able to create different apps and expand them with directories and went through the web part of Django server.\xa0</p><p>Obviously, a simple HTTP Response isn\'t enough to properly display content. Django is able to automatically generate HTML markdown if properly told so. Templates are the ones who help us with that.\xa0</p><p>Without further ado let\'s create a folder named <b>templates</b> in your app\'s folder and place a file named <code>base.html</code> into it. Base.html is going to play a role of a simply configured HTML example which in the long run, allows us to omit work with HTML.\xa0</p><p>Content of base.html is pretty basic and stays the same most of the time:</p><p><img src="https://i.imgur.com/J4TDAt7.png" style="width:503px;" /><br /></p><p><span style="font-size:1rem;">Now, create some another blank HTML file (index.html) and include this code in it:</span><br /></p><p><img src="https://i.imgur.com/zpGwmXU.png" style="width:248px;" /><br /></p><p>As seen here, it uses base.html as its basis and allows us to input any simple or slightly HTML-marked text in-between <code>{% extends \'base.html\'%} and {% endblock %}</code>. Try changing Hello World to some other text and now we are ready to make it work!</p><p><span style="font-size:1rem;">Remember what file is responsible for storing functions? views.py!\xa0</span><br /></p><p>Head over there and change the <i>index</i>\xa0function to this code which will automatically render your template from index.html<br /></p><p><img src="https://i.imgur.com/bhOJxt0.png" style="width:326px;" /><br /></p><p>Now check your text at\xa0<span style="font-size:1rem;">http://IP:8000/{app_name}</span></p><p>You can create different templates for different functions and use them separately. For example, if you are creating a blog website, you might want to make templates for articles and homepage separately.</p><p><span style="font-size:1rem;">&gt; In case if it was hard for you to follow the guide, or you have any errors, head over to Unit 4 and find a github link there. I\'ll upload an exact example of what I was talking about here so you can compare it with your code and easily troubleshoot.</span><br /></p>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2020-04-08T11:36:41.263Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read the above</p>', 'hint': ''}]}, {'taskTitle': 'Unit 4 - Concluding', 'taskDesc': '<p>&gt; In case if it was hard for you to follow the guide, or you have any errors, here\'s an exact example of the Django website I was talking about:</p><p><a href="https://github.com/Swafox/Django-example" target="_blank">https://github.com/Swafox/Django-example</a><br /></p><p>(If you still have any questions, feel free to reach me out on Discord. I\'ll be happy to help.)<br /></p><p>&gt; It is also possible to deploy your Django example for free! <a href="https://www.pythonanywhere.com/" target="_blank">https://www.pythonanywhere.com/</a> Has a full support for Django applications with intuitive GUI.</p><p>&gt; In case if you enjoyed Django and want to go further, I would recommend these free sources:</p><ul><li><a href="https://tutorial.djangogirls.org/en/">https://tutorial.djangogirls.org/en/</a><a href="https://tutorial.djangogirls.org/en/"></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django">https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django</a></li><li><a href="https://docs.djangoproject.com/en/2.2/">https://docs.djangoproject.com/en/2.2/</a></li><li><a href="https://djangobook.com/mastering-django-2-book/" target="_blank">https://djangobook.com/mastering-django-2-book/</a></li></ul>', 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2020-04-08T11:38:42.997Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Flag from GitHub page</p>', 'hint': ''}]}, {'taskTitle': 'Unit 5 - CTF', 'taskDesc': '<p style="text-align:center;">Now it\'s time for a small CTF!</p><p style="text-align:center;"><code>It might take around ~3 minutes for the machine to boot properly.</code></p><p style="text-align:center;">Fix the error and retrieve all the flags! (Use knowledge from previous units)</p><p style="text-align:left;"></p><div style="text-align:center;"><span style="font-size:1rem;">Username: django-admin</span></div><span style="font-size:1rem;"><div style="text-align:center;"><span style="font-size:1rem;">Password: roottoor1212</span></div></span><p></p>', 'taskType': 'vm', 'taskNo': 5, 'taskCreated': '2020-04-08T17:23:45.605Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '5e9433dd948f440ce810d23b', 'questions': [{'questionNo': 1, 'question': 'Admin panel flag?<br />', 'hint': ''}, {'questionNo': 2, 'question': 'User flag?', 'hint': ''}, {'questionNo': 3, 'question': '<p>Hidden flag?</p>', 'hint': 'Did you see any identical files?'}]}]}